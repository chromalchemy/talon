// Override key bindings by placing them into your key bindings file.
[
{ "key": "escape escape",         "command": "workbench.action.exitZenMode",
                                     "when": "inZenMode" },
{ "key": "shift+escape",          "command": "closeReferenceSearch",
                                     "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
{ "key": "escape",                "command": "closeReferenceSearch",
                                     "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
{ "key": "shift+escape",          "command": "editor.action.inlineSuggest.hide",
                                     "when": "inInlineEditsPreviewEditor" },
{ "key": "escape",                "command": "editor.action.inlineSuggest.hide",
                                     "when": "inInlineEditsPreviewEditor" },
{ "key": "escape",                "command": "editor.closeTestPeek",
                                     "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek" },
{ "key": "shift+escape",          "command": "cancelSelection",
                                     "when": "editorHasSelection && textInputFocus" },
{ "key": "escape",                "command": "cancelSelection",
                                     "when": "editorHasSelection && textInputFocus" },
{ "key": "cmd+down",              "command": "cursorBottom",
                                     "when": "textInputFocus" },
{ "key": "shift+cmd+down",        "command": "cursorBottomSelect",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+down",    "command": "cursorColumnSelectDown",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+left",    "command": "cursorColumnSelectLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+pagedown", "command": "cursorColumnSelectPageDown",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+pageup",  "command": "cursorColumnSelectPageUp",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+right",   "command": "cursorColumnSelectRight",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+up",      "command": "cursorColumnSelectUp",
                                     "when": "textInputFocus" },
{ "key": "ctrl+n",                "command": "cursorDown",
                                     "when": "textInputFocus" },
{ "key": "down",                  "command": "cursorDown",
                                     "when": "textInputFocus" },
{ "key": "shift+down",            "command": "cursorDownSelect",
                                     "when": "textInputFocus" },
{ "key": "cmd+right",             "command": "cursorEnd",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "end",                   "command": "cursorEnd",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "shift+cmd+right",       "command": "cursorEndSelect",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "shift+end",             "command": "cursorEndSelect",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "cmd+left",              "command": "cursorHome",
                                     "when": "textInputFocus" },
{ "key": "home",                  "command": "cursorHome",
                                     "when": "textInputFocus" },
{ "key": "shift+cmd+left",        "command": "cursorHomeSelect",
                                     "when": "textInputFocus" },
{ "key": "shift+home",            "command": "cursorHomeSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+b",                "command": "cursorLeft",
                                     "when": "textInputFocus" },
{ "key": "left",                  "command": "cursorLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+left",            "command": "cursorLeftSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+e",                "command": "cursorLineEnd",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+e",          "command": "cursorLineEndSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+a",                "command": "cursorLineStart",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+a",          "command": "cursorLineStartSelect",
                                     "when": "textInputFocus" },
{ "key": "pagedown",              "command": "cursorPageDown",
                                     "when": "textInputFocus" },
{ "key": "shift+pagedown",        "command": "cursorPageDownSelect",
                                     "when": "textInputFocus" },
{ "key": "pageup",                "command": "cursorPageUp",
                                     "when": "textInputFocus" },
{ "key": "shift+pageup",          "command": "cursorPageUpSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+f",                "command": "cursorRight",
                                     "when": "textInputFocus" },
{ "key": "right",                 "command": "cursorRight",
                                     "when": "textInputFocus" },
{ "key": "shift+right",           "command": "cursorRightSelect",
                                     "when": "textInputFocus" },
{ "key": "cmd+up",                "command": "cursorTop",
                                     "when": "textInputFocus" },
{ "key": "shift+cmd+up",          "command": "cursorTopSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+p",                "command": "cursorUp",
                                     "when": "textInputFocus" },
{ "key": "up",                    "command": "cursorUp",
                                     "when": "textInputFocus" },
{ "key": "shift+up",              "command": "cursorUpSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+backspace",        "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "ctrl+h",                "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+backspace",       "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "backspace",             "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "ctrl+delete",           "command": "deleteRight",
                                     "when": "textInputFocus" },
{ "key": "ctrl+d",                "command": "deleteRight",
                                     "when": "textInputFocus" },
{ "key": "delete",                "command": "deleteRight",
                                     "when": "textInputFocus" },
{ "key": "cmd+a",                 "command": "editor.action.selectAll" },
{ "key": "cmd+c",                 "command": "execCopy" },
{ "key": "cmd+x",                 "command": "execCut" },
{ "key": "cmd+v",                 "command": "execPaste" },
{ "key": "cmd+l",                 "command": "expandLineSelection",
                                     "when": "textInputFocus" },
{ "key": "cmd+down",              "command": "inlineChat.arrowOutDown",
                                     "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorLast && !accessibilityModeEnabled && !isEmbeddedDiffEditor" },
{ "key": "cmd+up",                "command": "inlineChat.arrowOutUp",
                                     "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorFirst && !accessibilityModeEnabled && !isEmbeddedDiffEditor" },
{ "key": "ctrl+o",                "command": "lineBreakInsert",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "shift+tab",             "command": "outdent",
                                     "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "shift+cmd+z",           "command": "redo" },
{ "key": "ctrl+pagedown",         "command": "scrollLineDown",
                                     "when": "textInputFocus" },
{ "key": "ctrl+pageup",           "command": "scrollLineUp",
                                     "when": "textInputFocus" },
{ "key": "cmd+pagedown",          "command": "scrollPageDown",
                                     "when": "textInputFocus" },
{ "key": "cmd+pageup",            "command": "scrollPageUp",
                                     "when": "textInputFocus" },
{ "key": "tab",                   "command": "tab",
                                     "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "cmd+z",                 "command": "undo" },
{ "key": "shift+down",            "command": "cursorColumnSelectDown",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+left",            "command": "cursorColumnSelectLeft",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+pagedown",        "command": "cursorColumnSelectPageDown",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+pageup",          "command": "cursorColumnSelectPageUp",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+right",           "command": "cursorColumnSelectRight",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+up",              "command": "cursorColumnSelectUp",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+escape",          "command": "removeSecondaryCursors",
                                     "when": "editorHasMultipleSelections && textInputFocus" },
{ "key": "escape",                "command": "removeSecondaryCursors",
                                     "when": "editorHasMultipleSelections && textInputFocus" },
{ "key": "cmd+down",              "command": "notebook.cell.chat.arrowOutDown",
                                     "when": "inlineChatFocused && inlineChatInnerCursorLast && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused" },
{ "key": "cmd+up",                "command": "notebook.cell.chat.arrowOutUp",
                                     "when": "inlineChatFocused && inlineChatInnerCursorFirst && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused" },
{ "key": "cmd+up",                "command": "notebook.cell.focusChatWidget",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
{ "key": "cmd+down",              "command": "notebook.cell.focusNextChatWidget",
                                     "when": "editorTextFocus && inputFocus && isCompositeNotebook && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top' || editorTextFocus && inputFocus && notebookCellEditorFocused && !accessibilityModeEnabled && !isCompositeNotebook && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
{ "key": "cmd+down",              "command": "inlineChat.focus",
                                     "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'above'" },
{ "key": "cmd+up",                "command": "inlineChat.focus",
                                     "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'below'" },
{ "key": "escape",                "command": "notebook.cell.chat.acceptChanges",
                                     "when": "inlineChatFocused && notebookCellChatFocused && notebookChatUserDidEdit && !notebookCellEditorFocused" },
{ "key": "down",                  "command": "notebook.cell.chat.nextFromHistory",
                                     "when": "inlineChatFocused && notebookCellChatFocused" },
{ "key": "up",                    "command": "notebook.cell.chat.previousFromHistory",
                                     "when": "inlineChatFocused && notebookCellChatFocused" },
{ "key": "f12",                   "command": "goToNextReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "f4",                    "command": "goToNextReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "shift+f12",             "command": "goToPreviousReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "shift+f4",              "command": "goToPreviousReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "escape",                "command": "inlineChat.hideHint",
                                     "when": "inlineChatShowingHint" },
{ "key": "cmd+enter",             "command": "refactorPreview.apply",
                                     "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'" },
{ "key": "alt+enter",             "command": "testing.editFocusedTest",
                                     "when": "focusedView == 'workbench.view.testing'" },
{ "key": "escape",                "command": "notebook.cell.quitEdit",
                                     "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused" },
{ "key": "ctrl+enter",            "command": "notebook.cell.quitEdit",
                                     "when": "inputFocus && notebookEditorFocused && !inlineChatFocused && notebookCellType == 'markup'" },
{ "key": "cmd+f",                 "command": "actions.find",
                                     "when": "editorFocus || editorIsOpen" },
{ "key": "cmd+e",                 "command": "actions.findWithSelection" },
{ "key": "enter",                 "command": "breakpointWidget.action.acceptInput",
                                     "when": "breakpointWidgetVisible && inBreakpointWidget" },
{ "key": "cmd+up",                "command": "chat.action.focus",
                                     "when": "chatCursorAtTop && inChatInput && !quickChatHasFocus" },
{ "key": "cmd+up",                "command": "chat.action.focus",
                                     "when": "inChatInput && isLinux && !quickChatHasFocus || inChatInput && isWindows && !quickChatHasFocus" },
{ "key": "shift+escape",          "command": "closeBreakpointWidget",
                                     "when": "breakpointWidgetVisible && textInputFocus" },
{ "key": "escape",                "command": "closeBreakpointWidget",
                                     "when": "breakpointWidgetVisible && textInputFocus" },
{ "key": "cmd+u",                 "command": "cursorUndo",
                                     "when": "textInputFocus" },
{ "key": "alt+right",             "command": "cursorWordEndRight",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+right",       "command": "cursorWordEndRightSelect",
                                     "when": "textInputFocus" },
{ "key": "alt+left",              "command": "cursorWordLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+left",        "command": "cursorWordLeftSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+alt+left",         "command": "cursorWordPartLeft",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+alt+left",   "command": "cursorWordPartLeftSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+alt+right",        "command": "cursorWordPartRight",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+alt+right",  "command": "cursorWordPartRightSelect",
                                     "when": "textInputFocus" },
{ "key": "cmd+backspace",         "command": "deleteAllLeft",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "cmd+delete",            "command": "deleteAllRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+k",                "command": "deleteAllRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "alt+backspace",         "command": "deleteWordLeft",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+alt+backspace",    "command": "deleteWordPartLeft",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+alt+delete",       "command": "deleteWordPartRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "alt+delete",            "command": "deleteWordRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "f7",                    "command": "editor.action.accessibleDiffViewer.next",
                                     "when": "isInDiffEditor" },
{ "key": "shift+f7",              "command": "editor.action.accessibleDiffViewer.prev",
                                     "when": "isInDiffEditor" },
{ "key": "cmd+k cmd+c",           "command": "editor.action.addCommentLine",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+d",                 "command": "editor.action.addSelectionToNextFindMatch",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+.",             "command": "editor.action.autoFix",
                                     "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/" },
{ "key": "shift+alt+a",           "command": "editor.action.blockComment",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "escape",                "command": "editor.action.cancelSelectionAnchor",
                                     "when": "editorTextFocus && selectionAnchorSet" },
{ "key": "cmd+f2",                "command": "editor.action.changeAll",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+c",                 "command": "editor.action.clipboardCopyAction" },
{ "key": "cmd+x",                 "command": "editor.action.clipboardCutAction" },
{ "key": "cmd+v",                 "command": "editor.action.clipboardPasteAction" },
{ "key": "cmd+/",                 "command": "editor.action.commentLine",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+alt+down",        "command": "editor.action.copyLinesDownAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+alt+up",          "command": "editor.action.copyLinesUpAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+k",           "command": "editor.action.deleteLines",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "alt+f3",                "command": "editor.action.dirtydiff.next",
                                     "when": "editorTextFocus && !textCompareEditorActive" },
{ "key": "shift+alt+f3",          "command": "editor.action.dirtydiff.previous",
                                     "when": "editorTextFocus && !textCompareEditorActive" },
{ "key": "enter",                 "command": "editor.action.extensioneditor.findNext",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "shift+enter",           "command": "editor.action.extensioneditor.findPrevious",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "cmd+f",                 "command": "editor.action.extensioneditor.showfind",
                                     "when": "!editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "shift+alt+f",           "command": "editor.action.formatDocument",
                                     "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor" },
{ "key": "shift+alt+f",           "command": "editor.action.formatDocument.none",
                                     "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly" },
{ "key": "cmd+k cmd+f",           "command": "editor.action.formatSelection",
                                     "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" },
{ "key": "cmd+down",              "command": "editor.action.goToBottomHover",
                                     "when": "editorHoverFocused" },
{ "key": "end",                   "command": "editor.action.goToBottomHover",
                                     "when": "editorHoverFocused" },
{ "key": "enter",                 "command": "editor.action.goToFocusedStickyScrollLine",
                                     "when": "stickyScrollFocused" },
{ "key": "cmd+f12",               "command": "editor.action.goToImplementation",
                                     "when": "editorHasImplementationProvider && editorTextFocus" },
{ "key": "shift+f12",             "command": "editor.action.goToReferences",
                                     "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "cmd+up",                "command": "editor.action.goToTopHover",
                                     "when": "editorHoverFocused" },
{ "key": "home",                  "command": "editor.action.goToTopHover",
                                     "when": "editorHoverFocused" },
{ "key": "escape",                "command": "editor.action.hideColorPicker",
                                     "when": "standaloneColorPickerVisible" },
{ "key": "shift+cmd+.",           "command": "editor.action.inPlaceReplace.down",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+,",           "command": "editor.action.inPlaceReplace.up",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+]",                 "command": "editor.action.indentLines",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "alt+]",                 "command": "editor.action.inlineSuggest.showNext",
                                     "when": "inlineSuggestionVisible && !editorReadonly" },
{ "key": "alt+[",                 "command": "editor.action.inlineSuggest.showPrevious",
                                     "when": "inlineSuggestionVisible && !editorReadonly" },
{ "key": "enter",                 "command": "editor.action.insertColorWithStandaloneColorPicker",
                                     "when": "standaloneColorPickerFocused" },
{ "key": "alt+cmd+up",            "command": "editor.action.insertCursorAbove",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+i",           "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                     "when": "editorTextFocus" },
{ "key": "alt+cmd+down",          "command": "editor.action.insertCursorBelow",
                                     "when": "editorTextFocus" },
{ "key": "cmd+enter",             "command": "editor.action.insertLineAfter",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+enter",       "command": "editor.action.insertLineBefore",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "ctrl+j",                "command": "editor.action.joinLines",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+\\",          "command": "editor.action.jumpToBracket",
                                     "when": "editorTextFocus" },
{ "key": "shift+cmd+f2",          "command": "editor.action.linkedEditing",
                                     "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
{ "key": "alt+f8",                "command": "editor.action.marker.next",
                                     "when": "editorFocus" },
{ "key": "f8",                    "command": "editor.action.marker.nextInFiles",
                                     "when": "editorFocus" },
{ "key": "shift+alt+f8",          "command": "editor.action.marker.prev",
                                     "when": "editorFocus" },
{ "key": "shift+f8",              "command": "editor.action.marker.prevInFiles",
                                     "when": "editorFocus" },
{ "key": "alt+down",              "command": "editor.action.moveLinesDownAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "alt+up",                "command": "editor.action.moveLinesUpAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+k cmd+d",           "command": "editor.action.moveSelectionToNextFindMatch",
                                     "when": "editorFocus" },
{ "key": "alt+f9",                "command": "editor.action.nextCommentThreadAction" },
{ "key": "alt+f10",               "command": "editor.action.nextCommentedRangeAction",
                                     "when": "activeEditorHasCommentingRange" },
{ "key": "cmd+k alt+cmd+down",    "command": "editor.action.nextCommentingRange",
                                     "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'" },
{ "key": "f3",                    "command": "editor.action.nextMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "cmd+g",                 "command": "editor.action.nextMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "enter",                 "command": "editor.action.nextMatchFindAction",
                                     "when": "editorFocus && findInputFocussed" },
{ "key": "cmd+f3",                "command": "editor.action.nextSelectionMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "shift+alt+o",           "command": "editor.action.organizeImports",
                                     "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/" },
{ "key": "cmd+[",                 "command": "editor.action.outdentLines",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "alt+down",              "command": "editor.action.pageDownHover",
                                     "when": "editorHoverFocused" },
{ "key": "pagedown",              "command": "editor.action.pageDownHover",
                                     "when": "editorHoverFocused" },
{ "key": "alt+up",                "command": "editor.action.pageUpHover",
                                     "when": "editorHoverFocused" },
{ "key": "pageup",                "command": "editor.action.pageUpHover",
                                     "when": "editorHoverFocused" },
{ "key": "alt+f12",               "command": "editor.action.peekDefinition",
                                     "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "shift+cmd+f12",         "command": "editor.action.peekImplementation",
                                     "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "shift+alt+f9",          "command": "editor.action.previousCommentThreadAction" },
{ "key": "shift+alt+f10",         "command": "editor.action.previousCommentedRangeAction",
                                     "when": "activeEditorHasCommentingRange" },
{ "key": "cmd+k alt+cmd+up",      "command": "editor.action.previousCommentingRange",
                                     "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'" },
{ "key": "shift+f3",              "command": "editor.action.previousMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "shift+cmd+g",           "command": "editor.action.previousMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "shift+enter",           "command": "editor.action.previousMatchFindAction",
                                     "when": "editorFocus && findInputFocussed" },
{ "key": "shift+cmd+f3",          "command": "editor.action.previousSelectionMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "cmd+.",                 "command": "editor.action.quickFix",
                                     "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly" },
{ "key": "ctrl+shift+r",          "command": "editor.action.refactor",
                                     "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly" },
{ "key": "alt+cmd+backspace",     "command": "editor.action.removeBrackets",
                                     "when": "editorTextFocus" },
{ "key": "cmd+k cmd+u",           "command": "editor.action.removeCommentLine",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "f2",                    "command": "editor.action.rename",
                                     "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
{ "key": "f12",                   "command": "editor.action.revealDefinition",
                                     "when": "editorHasDefinitionProvider && editorTextFocus" },
{ "key": "cmd+f12",               "command": "editor.action.revealDefinition",
                                     "when": "editorHasDefinitionProvider && editorTextFocus && isWeb" },
{ "key": "cmd+k f12",             "command": "editor.action.revealDefinitionAside",
                                     "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
{ "key": "cmd+k cmd+f12",         "command": "editor.action.revealDefinitionAside",
                                     "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor" },
{ "key": "down",                  "command": "editor.action.scrollDownHover",
                                     "when": "editorHoverFocused" },
{ "key": "left",                  "command": "editor.action.scrollLeftHover",
                                     "when": "editorHoverFocused" },
{ "key": "right",                 "command": "editor.action.scrollRightHover",
                                     "when": "editorHoverFocused" },
{ "key": "up",                    "command": "editor.action.scrollUpHover",
                                     "when": "editorHoverFocused" },
{ "key": "escape",                "command": "editor.action.selectEditor",
                                     "when": "stickyScrollFocused" },
{ "key": "cmd+k cmd+k",           "command": "editor.action.selectFromAnchorToCursor",
                                     "when": "editorTextFocus && selectionAnchorSet" },
{ "key": "shift+cmd+l",           "command": "editor.action.selectHighlights",
                                     "when": "editorFocus" },
{ "key": "down",                  "command": "editor.action.selectNextStickyScrollLine",
                                     "when": "stickyScrollFocused" },
{ "key": "up",                    "command": "editor.action.selectPreviousStickyScrollLine",
                                     "when": "stickyScrollFocused" },
{ "key": "cmd+k cmd+b",           "command": "editor.action.setSelectionAnchor",
                                     "when": "editorTextFocus" },
{ "key": "shift+f10",             "command": "editor.action.showContextMenu",
                                     "when": "textInputFocus" },
{ "key": "cmd+k cmd+i",           "command": "editor.action.showHover",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+right",      "command": "editor.action.smartSelect.expand",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+cmd+right",  "command": "editor.action.smartSelect.expand",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+left",       "command": "editor.action.smartSelect.shrink",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+cmd+left",   "command": "editor.action.smartSelect.shrink",
                                     "when": "editorTextFocus" },
{ "key": "alt+cmd+f",             "command": "editor.action.startFindReplaceAction",
                                     "when": "editorFocus || editorIsOpen" },
{ "key": "cmd+enter",             "command": "editor.action.submitComment",
                                     "when": "commentEditorFocused" },
{ "key": "ctrl+shift+m",          "command": "editor.action.toggleTabFocusMode" },
{ "key": "alt+z",                 "command": "editor.action.toggleWordWrap" },
{ "key": "ctrl+t",                "command": "editor.action.transposeLetters",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "shift+cmd+space",       "command": "editor.action.triggerParameterHints",
                                     "when": "editorHasSignatureHelpProvider && editorTextFocus" },
{ "key": "cmd+i",                 "command": "editor.action.triggerSuggest",
                                     "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
{ "key": "alt+escape",            "command": "editor.action.triggerSuggest",
                                     "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
{ "key": "ctrl+space",            "command": "editor.action.triggerSuggest",
                                     "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
{ "key": "cmd+k cmd+x",           "command": "editor.action.trimTrailingWhitespace",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "enter",                 "command": "editor.action.webvieweditor.findNext",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "shift+enter",           "command": "editor.action.webvieweditor.findPrevious",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "escape",                "command": "editor.action.webvieweditor.hideFind",
                                     "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "cmd+f",                 "command": "editor.action.webvieweditor.showFind",
                                     "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "f7",                    "command": "editor.action.wordHighlight.next",
                                     "when": "editorTextFocus && hasWordHighlights" },
{ "key": "shift+f7",              "command": "editor.action.wordHighlight.prev",
                                     "when": "editorTextFocus && hasWordHighlights" },
{ "key": "escape",                "command": "editor.cancelOperation",
                                     "when": "cancellableOperation" },
{ "key": "cmd+.",                 "command": "editor.changeDropType",
                                     "when": "dropWidgetVisible" },
{ "key": "cmd+.",                 "command": "editor.changePasteType",
                                     "when": "pasteWidgetVisible" },
{ "key": "cmd+k cmd+,",           "command": "editor.createFoldingRangeFromSelection",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "escape",                "command": "editor.debug.action.closeExceptionWidget",
                                     "when": "exceptionWidgetVisible" },
{ "key": "cmd+k cmd+i",           "command": "editor.debug.action.showDebugHover",
                                     "when": "editorTextFocus && inDebugMode" },
{ "key": "f9",                    "command": "editor.debug.action.toggleBreakpoint",
                                     "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus" },
{ "key": "tab",                   "command": "editor.emmet.action.expandAbbreviation",
                                     "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "alt+cmd+[",             "command": "editor.fold",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+0",           "command": "editor.foldAll",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+/",           "command": "editor.foldAllBlockComments",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+-",           "command": "editor.foldAllExcept",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+8",           "command": "editor.foldAllMarkerRegions",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+1",           "command": "editor.foldLevel1",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+2",           "command": "editor.foldLevel2",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+3",           "command": "editor.foldLevel3",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+4",           "command": "editor.foldLevel4",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+5",           "command": "editor.foldLevel5",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+6",           "command": "editor.foldLevel6",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+7",           "command": "editor.foldLevel7",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+[",           "command": "editor.foldRecursively",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "f12",                   "command": "editor.gotoNextSymbolFromResult",
                                     "when": "hasSymbols" },
{ "key": "escape",                "command": "editor.gotoNextSymbolFromResult.cancel",
                                     "when": "hasSymbols" },
{ "key": "escape",                "command": "editor.hideDropWidget",
                                     "when": "dropWidgetVisible" },
{ "key": "escape",                "command": "editor.hidePasteWidget",
                                     "when": "pasteWidgetVisible" },
{ "key": "cmd+k cmd+.",           "command": "editor.removeManualFoldingRanges",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+l",           "command": "editor.toggleFold",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k shift+cmd+l",     "command": "editor.toggleFoldRecursively",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "alt+cmd+]",             "command": "editor.unfold",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+j",           "command": "editor.unfoldAll",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+=",           "command": "editor.unfoldAllExcept",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+9",           "command": "editor.unfoldAllMarkerRegions",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+]",           "command": "editor.unfoldRecursively",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "escape",                "command": "inlayHints.stopReadingLineWithHint",
                                     "when": "isReadingLineWithInlayHints" },
{ "key": "escape",                "command": "inlineChat.discardHunkChange",
                                     "when": "inlineChatHasProvider && inlineChatVisible && inlineChatResponseType == 'messagesAndEdits'" },
{ "key": "tab",                   "command": "insertSnippet",
                                     "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode" },
{ "key": "cmd+enter",             "command": "interactive.execute",
                                     "when": "isCompositeNotebook && activeEditor == 'workbench.editor.interactive'" },
{ "key": "shift+enter",           "command": "interactive.execute",
                                     "when": "config.interactiveWindow.executeWithShiftEnter && isCompositeNotebook && activeEditor == 'workbench.editor.interactive'" },
{ "key": "enter",                 "command": "interactive.execute",
                                     "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'" },
{ "key": "escape",                "command": "notebook.cell.chat.discard",
                                     "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit" },
{ "key": "pagedown",              "command": "notebook.cell.cursorPageDown",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
{ "key": "shift+pagedown",        "command": "notebook.cell.cursorPageDownSelect",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused" },
{ "key": "pageup",                "command": "notebook.cell.cursorPageUp",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
{ "key": "shift+pageup",          "command": "notebook.cell.cursorPageUpSelect",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused" },
{ "key": "ctrl+enter",            "command": "notebook.cell.execute",
                                     "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
{ "key": "alt+enter",             "command": "notebook.cell.executeAndInsertBelow",
                                     "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
{ "key": "shift+enter",           "command": "notebook.cell.executeAndSelectBelow",
                                     "when": "notebookCellListFocused && !inlineChatFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
{ "key": "shift+cmd+v",           "command": "notebook.cell.pasteAbove",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "down",                  "command": "notebook.focusNextEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
{ "key": "up",                    "command": "notebook.focusPreviousEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
{ "key": "shift+alt+f",           "command": "notebook.formatCell",
                                     "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'" },
{ "key": "ctrl+enter",            "command": "openReferenceToSide",
                                     "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused" },
{ "key": "enter",                 "command": "repl.action.acceptInput",
                                     "when": "inDebugRepl && textInputFocus" },
{ "key": "cmd+f",                 "command": "repl.action.filter",
                                     "when": "inDebugRepl && textInputFocus" },
{ "key": "alt+cmd+f",             "command": "repl.action.find",
                                     "when": "inDebugRepl || inDebugRepl && focusedView == 'workbench.panel.repl.view'" },
{ "key": "cmd+enter",             "command": "repl.execute",
                                     "when": "isCompositeNotebook && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'" },
{ "key": "shift+enter",           "command": "repl.execute",
                                     "when": "config.interactiveWindow.executeWithShiftEnter && isCompositeNotebook && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'" },
{ "key": "enter",                 "command": "repl.execute",
                                     "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'" },
{ "key": "alt+end alt+end",       "command": "repl.focusLastItemExecuted",
                                     "when": "isCompositeNotebook && mostRecentReplEditor || mostRecentReplEditor && !notebookCellListFocused" },
{ "key": "cmd+down",              "command": "repl.input.focus",
                                     "when": "isCompositeNotebook && notebookEditorFocused" },
{ "key": "shift+cmd+r",           "command": "rerunSearchEditorSearch",
                                     "when": "inSearchEditor" },
{ "key": "escape",                "command": "search.action.focusQueryEditorWidget",
                                     "when": "inSearchEditor" },
{ "key": "shift+cmd+backspace",   "command": "search.searchEditor.action.deleteFileResults",
                                     "when": "inSearchEditor" },
{ "key": "escape",                "command": "settings.action.clearSearchResults",
                                     "when": "inSettingsEditor && inSettingsSearch" },
{ "key": "down",                  "command": "settings.action.focusSettingsFile",
                                     "when": "inSettingsSearch && !suggestWidgetVisible" },
{ "key": "cmd+f",                 "command": "settings.action.search",
                                     "when": "inSettingsEditor" },
{ "key": "cmd+/",                 "command": "toggleExplainMode",
                                     "when": "suggestWidgetVisible" },
{ "key": "cmd+k f2",              "command": "togglePeekWidgetFocus",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "shift+cmd+.",           "command": "windsurf.prioritized.explainProblem",
                                     "when": "editorFocus" },
{ "key": "cmd+k alt+cmd+c",       "command": "workbench.action.addComment",
                                     "when": "activeCursorHasCommentingRange" },
{ "key": "cmd+/",                 "command": "workbench.action.chat.attachContext",
                                     "when": "inChatInput && !inUnifiedChat && chatLocation == 'panel' && chatLocation != 'editing-session'" },
{ "key": "shift+cmd+/",           "command": "workbench.action.chat.attachTools",
                                     "when": "inChatInput && chatMode == 'agent'" },
{ "key": "cmd+/",                 "command": "workbench.action.chat.editing.attachContext",
                                     "when": "inChatInput && inUnifiedChat || inChatInput && chatLocation == 'editing-session' || inChatInput && inUnifiedChat && chatLocation == 'editing-session'" },
{ "key": "ctrl+alt+enter",        "command": "workbench.action.chat.runInTerminal",
                                     "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat" },
{ "key": "enter",                 "command": "workbench.action.chat.submit",
                                     "when": "chatInputHasText && chatRequestIsPaused && inChatInput && chatMode == 'ask' || chatInputHasText && inChatInput && !chatSessionRequestInProgress && chatMode == 'ask' || chatInstructionsAttached && chatRequestIsPaused && inChatInput && chatMode == 'ask' || chatInstructionsAttached && inChatInput && !chatSessionRequestInProgress && chatMode == 'ask'" },
{ "key": "cmd+enter",             "command": "workbench.action.chat.submitWithCodebase",
                                     "when": "chatInputHasText && chatRequestIsPaused && inChatInput || chatInputHasText && inChatInput && !chatSessionRequestInProgress || chatInstructionsAttached && chatRequestIsPaused && inChatInput || chatInstructionsAttached && inChatInput && !chatSessionRequestInProgress" },
{ "key": "shift+alt+enter",       "command": "workbench.action.chat.submitWithoutDispatching",
                                     "when": "chatInputHasText && chatRequestIsPaused && inChatInput && chatMode == 'ask' || chatInputHasText && inChatInput && !chatSessionRequestInProgress && chatMode == 'ask' || chatInstructionsAttached && chatRequestIsPaused && inChatInput && chatMode == 'ask' || chatInstructionsAttached && inChatInput && !chatSessionRequestInProgress && chatMode == 'ask'" },
{ "key": "cmd+.",                 "command": "workbench.action.chat.toggleAgentMode",
                                     "when": "chatHasToolsAgent && chatIsEnabled && inChatInput && inUnifiedChat && !chatSessionRequestInProgress || chatHasToolsAgent && chatIsEnabled && inChatInput && !chatSessionRequestInProgress && chatLocation == 'editing-session' || chatIsEnabled && config.chat.unifiedChatView && inChatInput && inUnifiedChat && !chatSessionRequestInProgress || chatIsEnabled && config.chat.unifiedChatView && inChatInput && !chatSessionRequestInProgress && chatLocation == 'editing-session'" },
{ "key": "alt+f5",                "command": "workbench.action.editor.nextChange",
                                     "when": "editorTextFocus && !textCompareEditorActive && quickDiffDecorationCount != '0'" },
{ "key": "shift+alt+f5",          "command": "workbench.action.editor.previousChange",
                                     "when": "editorTextFocus && !textCompareEditorActive && quickDiffDecorationCount != '0'" },
{ "key": "enter",                 "command": "workbench.action.edits.submit",
                                     "when": "chatInputHasText && chatRequestIsPaused && inChatInput && chatMode != 'ask' || chatInputHasText && inChatInput && !chatSessionRequestInProgress && chatMode != 'ask' || chatInstructionsAttached && chatRequestIsPaused && inChatInput && chatMode != 'ask' || chatInstructionsAttached && inChatInput && !chatSessionRequestInProgress && chatMode != 'ask'" },
{ "key": "shift+escape",          "command": "workbench.action.hideComment",
                                     "when": "commentEditorFocused || commentFocused" },
{ "key": "escape",                "command": "workbench.action.hideComment",
                                     "when": "commentEditorFocused || commentFocused" },
{ "key": "cmd+down",              "command": "editor.action.inlineSuggest.acceptNextLine",
                                     "when": "inlineSuggestionVisible && !editorReadonly" },
{ "key": "cmd+right",             "command": "editor.action.inlineSuggest.acceptNextWord",
                                     "when": "inlineSuggestionVisible && !editorReadonly" },
{ "key": "escape",                "command": "inlineChat.close",
                                     "when": "inlineChatHasProvider && inlineChatVisible" },
{ "key": "alt+f8",                "command": "testing.goToNextMessage",
                                     "when": "editorFocus && testing.isPeekVisible" },
{ "key": "shift+alt+f8",          "command": "testing.goToPreviousMessage",
                                     "when": "editorFocus && testing.isPeekVisible" },
{ "key": "shift+escape",          "command": "closeFindWidget",
                                     "when": "editorFocus && findWidgetVisible && !isComposing" },
{ "key": "escape",                "command": "closeFindWidget",
                                     "when": "editorFocus && findWidgetVisible && !isComposing" },
{ "key": "alt+cmd+enter",         "command": "editor.action.replaceAll",
                                     "when": "editorFocus && findWidgetVisible" },
{ "key": "cmd+enter",             "command": "editor.action.replaceAll",
                                     "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
{ "key": "shift+cmd+1",           "command": "editor.action.replaceOne",
                                     "when": "editorFocus && findWidgetVisible" },
{ "key": "enter",                 "command": "editor.action.replaceOne",
                                     "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
{ "key": "alt+enter",             "command": "editor.action.selectAllMatches",
                                     "when": "editorFocus && findWidgetVisible" },
{ "key": "alt+cmd+c",             "command": "toggleFindCaseSensitive",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+l",             "command": "toggleFindInSelection",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+r",             "command": "toggleFindRegex",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+w",             "command": "toggleFindWholeWord",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+p",             "command": "togglePreserveCase",
                                     "when": "editorFocus" },
{ "key": "cmd+enter",             "command": "notebook.cell.chat.acceptChanges",
                                     "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused" },
{ "key": "tab",                   "command": "jumpToNextSnippetPlaceholder",
                                     "when": "hasNextTabstop && inSnippetMode && textInputFocus" },
{ "key": "shift+tab",             "command": "jumpToPrevSnippetPlaceholder",
                                     "when": "hasPrevTabstop && inSnippetMode && textInputFocus" },
{ "key": "escape",                "command": "leaveEditorMessage",
                                     "when": "messageVisible" },
{ "key": "shift+escape",          "command": "leaveSnippet",
                                     "when": "inSnippetMode && textInputFocus" },
{ "key": "escape",                "command": "leaveSnippet",
                                     "when": "inSnippetMode && textInputFocus" },
{ "key": "shift+escape",          "command": "closeMarkersNavigation",
                                     "when": "editorFocus && markersNavigationVisible" },
{ "key": "escape",                "command": "closeMarkersNavigation",
                                     "when": "editorFocus && markersNavigationVisible" },
{ "key": "shift+escape",          "command": "closeQuickDiff",
                                     "when": "dirtyDiffVisible" },
{ "key": "escape",                "command": "closeQuickDiff",
                                     "when": "dirtyDiffVisible" },
{ "key": "escape",                "command": "notifications.hideToasts",
                                     "when": "notificationToastsVisible" },
{ "key": "shift+escape",          "command": "closeParameterHints",
                                     "when": "editorFocus && parameterHintsVisible" },
{ "key": "escape",                "command": "closeParameterHints",
                                     "when": "editorFocus && parameterHintsVisible" },
{ "key": "ctrl+n",                "command": "showNextParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "alt+down",              "command": "showNextParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "down",                  "command": "showNextParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "ctrl+p",                "command": "showPrevParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "alt+up",                "command": "showPrevParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "up",                    "command": "showPrevParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "shift+tab",             "command": "acceptAlternativeSelectedSuggestion",
                                     "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
{ "key": "shift+enter",           "command": "acceptAlternativeSelectedSuggestion",
                                     "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
{ "key": "tab",                   "command": "acceptSelectedSuggestion",
                                     "when": "inDebugRepl && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
{ "key": "enter",                 "command": "acceptSelectedSuggestion",
                                     "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },
{ "key": "escape",                "command": "editor.action.inlineSuggest.hide",
                                     "when": "inlineEditIsVisible || inlineSuggestionVisible" },
{ "key": "cmd+i",                 "command": "focusSuggestion",
                                     "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "ctrl+space",            "command": "focusSuggestion",
                                     "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "shift+escape",          "command": "hideSuggestWidget",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "escape",                "command": "hideSuggestWidget",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "tab",                   "command": "insertBestCompletion",
                                     "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "tab",                   "command": "insertNextSuggestion",
                                     "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "shift+tab",             "command": "insertPrevSuggestion",
                                     "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "cmd+pagedown",          "command": "selectNextPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "pagedown",              "command": "selectNextPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "ctrl+n",                "command": "selectNextSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "cmd+down",              "command": "selectNextSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "down",                  "command": "selectNextSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "cmd+pageup",            "command": "selectPrevPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "pageup",                "command": "selectPrevPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "ctrl+p",                "command": "selectPrevSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "cmd+up",                "command": "selectPrevSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "up",                    "command": "selectPrevSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "cmd+i",                 "command": "toggleSuggestionDetails",
                                     "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+space",            "command": "toggleSuggestionDetails",
                                     "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+alt+space",        "command": "toggleSuggestionFocus",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "enter",                 "command": "acceptRenameInput",
                                     "when": "editorFocus && renameInputVisible && !isComposing" },
{ "key": "cmd+enter",             "command": "acceptRenameInputWithPreview",
                                     "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible && !isComposing" },
{ "key": "shift+escape",          "command": "cancelLinkedEditingInput",
                                     "when": "LinkedEditingInputVisible && editorTextFocus" },
{ "key": "escape",                "command": "cancelLinkedEditingInput",
                                     "when": "LinkedEditingInputVisible && editorTextFocus" },
{ "key": "shift+escape",          "command": "cancelRenameInput",
                                     "when": "editorFocus && renameInputVisible" },
{ "key": "escape",                "command": "cancelRenameInput",
                                     "when": "editorFocus && renameInputVisible" },
{ "key": "down",                  "command": "focusNextRenameSuggestion",
                                     "when": "renameInputVisible" },
{ "key": "up",                    "command": "focusPreviousRenameSuggestion",
                                     "when": "renameInputVisible" },
{ "key": "cmd+k cmd+i",           "command": "workbench.action.showHover",
                                     "when": "!editorTextFocus" },
{ "key": "shift+cmd+l",           "command": "addCursorsAtSearchResults",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "shift+cmd+;",           "command": "breadcrumbs.focus",
                                     "when": "breadcrumbsPossible && breadcrumbsVisible" },
{ "key": "shift+cmd+.",           "command": "breadcrumbs.focusAndSelect",
                                     "when": "breadcrumbsPossible && breadcrumbsVisible" },
{ "key": "alt+right",             "command": "breadcrumbs.focusNext",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "right",                 "command": "breadcrumbs.focusNext",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "alt+left",              "command": "breadcrumbs.focusPrevious",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "left",                  "command": "breadcrumbs.focusPrevious",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "cmd+enter",             "command": "breadcrumbs.revealFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "space",                 "command": "breadcrumbs.revealFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "cmd+enter",             "command": "breadcrumbs.revealFocusedFromTreeAside",
                                     "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "down",                  "command": "breadcrumbs.selectFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "enter",                 "command": "breadcrumbs.selectFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "shift+cmd+.",           "command": "breadcrumbs.toggleToOn",
                                     "when": "!config.breadcrumbs.enabled" },
{ "key": "cmd+down",              "command": "chat.action.focus",
                                     "when": "inChat && inChatInput && quickChatHasFocus" },
{ "key": "cmd+c",                 "command": "chat.inlineResourceAnchor.copyResource",
                                     "when": "chatAttachmentResource" },
{ "key": "cmd+enter",             "command": "chatEditing.acceptAllFiles",
                                     "when": "hasUndecidedChatEditingResource && inChatInput && !chatSessionRequestInProgress" },
{ "key": "cmd+backspace",         "command": "chatEditing.discardAllFiles",
                                     "when": "hasUndecidedChatEditingResource && inChatInput && !chatInputHasText && !chatSessionRequestInProgress" },
{ "key": "cmd+enter",             "command": "chatEditor.action.accept",
                                     "when": "chatEdits.hasEditorModifications && editorFocus && !chatEdits.isRequestInProgress" },
{ "key": "shift+cmd+enter",       "command": "chatEditor.action.acceptHunk",
                                     "when": "chatEdits.hasEditorModifications && editorFocus && !chatEdits.isRequestInProgress" },
{ "key": "alt+f5",                "command": "chatEditor.action.navigateNext",
                                     "when": "chatEdits.hasEditorModifications && chatIsEnabled && editorFocus && !chatEdits.isRequestInProgress" },
{ "key": "shift+alt+f5",          "command": "chatEditor.action.navigatePrevious",
                                     "when": "chatEdits.hasEditorModifications && chatIsEnabled && editorFocus && !chatEdits.isRequestInProgress" },
{ "key": "cmd+backspace",         "command": "chatEditor.action.reject",
                                     "when": "chatEdits.hasEditorModifications && editorFocus && !chatEdits.isRequestInProgress" },
{ "key": "f7",                    "command": "chatEditor.action.showAccessibleDiffView",
                                     "when": "chatEdits.hasEditorModifications && editorFocus && !chatEdits.isRequestInProgress" },
{ "key": "shift+alt+f7",          "command": "chatEditor.action.toggleDiff",
                                     "when": "chatEdits.hasEditorModifications && editorFocus && !chatEdits.isRequestInProgress" },
{ "key": "shift+cmd+backspace",   "command": "chatEditor.action.undoHunk",
                                     "when": "chatEdits.hasEditorModifications && editorFocus && !chatEdits.isRequestInProgress" },
{ "key": "escape",                "command": "closeReplaceInFilesWidget",
                                     "when": "replaceInputBoxFocus && searchViewletVisible" },
{ "key": "escape",                "command": "commentsClearFilterText",
                                     "when": "commentsFilterFocus" },
{ "key": "cmd+f",                 "command": "commentsFocusFilter",
                                     "when": "focusedView == 'workbench.panel.comments'" },
{ "key": "cmd+down",              "command": "commentsFocusViewFromFilter",
                                     "when": "commentsFilterFocus" },
{ "key": "alt+cmd+c",             "command": "copyFilePath",
                                     "when": "!editorFocus" },
{ "key": "cmd+k alt+cmd+c",       "command": "copyFilePath",
                                     "when": "editorFocus" },
{ "key": "shift+alt+cmd+c",       "command": "copyRelativeFilePath",
                                     "when": "!editorFocus" },
{ "key": "cmd+k shift+alt+cmd+c", "command": "copyRelativeFilePath",
                                     "when": "editorFocus" },
{ "key": "cmd+left",              "command": "cursorWordAccessibilityLeft",
                                     "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'" },
{ "key": "shift+cmd+left",        "command": "cursorWordAccessibilityLeftSelect",
                                     "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'" },
{ "key": "cmd+right",             "command": "cursorWordAccessibilityRight",
                                     "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'" },
{ "key": "shift+cmd+right",       "command": "cursorWordAccessibilityRightSelect",
                                     "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'" },
{ "key": "alt+cmd+c",             "command": "debug.copyWatchExpression",
                                     "when": "watchExpressionsExist && !expressionSelected && focusedView == 'workbench.debug.watchExpressionsView'" },
{ "key": "alt+enter",             "command": "debug.openBreakpointToSide",
                                     "when": "breakpointsFocused" },
{ "key": "cmd+enter",             "command": "debug.openBreakpointToSide",
                                     "when": "breakpointsFocused" },
{ "key": "cmd+f5",                "command": "debug.openView",
                                     "when": "!debuggersAvailable" },
{ "key": "f5",                    "command": "debug.openView",
                                     "when": "!debuggersAvailable" },
{ "key": "cmd+backspace",         "command": "debug.removeBreakpoint",
                                     "when": "breakpointsFocused && !breakpointInputFocused" },
{ "key": "cmd+backspace",         "command": "debug.removeWatchExpression",
                                     "when": "watchExpressionsFocused && !expressionSelected" },
{ "key": "alt+-",                 "command": "decreaseSearchEditorContextLines",
                                     "when": "inSearchEditor" },
{ "key": "alt+f1",                "command": "editor.action.accessibilityHelp",
                                     "when": "!accessibilityHelpIsShown" },
{ "key": "alt+a",                 "command": "editor.action.accessibilityHelpConfigureAssignedKeybindings",
                                     "when": "accessibilityHelpIsShown && accessibleViewHasAssignedKeybindings" },
{ "key": "alt+k",                 "command": "editor.action.accessibilityHelpConfigureKeybindings",
                                     "when": "accessibilityHelpIsShown && accessibleViewHasUnassignedKeybindings" },
{ "key": "alt+h",                 "command": "editor.action.accessibilityHelpOpenHelpLink",
                                     "when": "accessibilityHelpIsShown" },
{ "key": "alt+f2",                "command": "editor.action.accessibleView" },
{ "key": "ctrl+/",                "command": "editor.action.accessibleViewAcceptInlineCompletion",
                                     "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'" },
{ "key": "alt+f6",                "command": "editor.action.accessibleViewDisableHint",
                                     "when": "accessibilityHelpIsShown && accessibleViewVerbosityEnabled || accessibleViewIsShown && accessibleViewVerbosityEnabled" },
{ "key": "alt+]",                 "command": "editor.action.accessibleViewNext",
                                     "when": "accessibleViewIsShown && accessibleViewSupportsNavigation" },
{ "key": "alt+cmd+pagedown",      "command": "editor.action.accessibleViewNextCodeBlock",
                                     "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'inlineChat' || accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat' || accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'quickChat'" },
{ "key": "alt+[",                 "command": "editor.action.accessibleViewPrevious",
                                     "when": "accessibleViewIsShown && accessibleViewSupportsNavigation" },
{ "key": "alt+cmd+pageup",        "command": "editor.action.accessibleViewPreviousCodeBlock",
                                     "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'inlineChat' || accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat' || accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'quickChat'" },
{ "key": "cmd+k cmd+k",           "command": "editor.action.defineKeybinding",
                                     "when": "resource == 'vscode-userdata:/Users/ryan/Library/Application%20Support/Windsurf%20-%20Next/User/keybindings.json'" },
{ "key": "tab",                   "command": "editor.action.inlineSuggest.commit",
                                     "when": "inlineEditIsVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible" },
{ "key": "alt+cmd+o",             "command": "editor.action.toggleOvertypeInsertMode" },
{ "key": "shift+f9",              "command": "editor.debug.action.toggleInlineBreakpoint",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+d",           "command": "editor.detectLanguage",
                                     "when": "editorTextFocus && !notebookEditable" },
{ "key": "shift+enter",           "command": "editor.refocusCallHierarchy",
                                     "when": "callHierarchyVisible" },
{ "key": "shift+enter",           "command": "editor.refocusTypeHierarchy",
                                     "when": "typeHierarchyVisible" },
{ "key": "shift+alt+h",           "command": "editor.showCallHierarchy",
                                     "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor" },
{ "key": "shift+alt+h",           "command": "editor.showIncomingCalls",
                                     "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'" },
{ "key": "shift+alt+h",           "command": "editor.showOutgoingCalls",
                                     "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'" },
{ "key": "shift+alt+h",           "command": "editor.showSubtypes",
                                     "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'" },
{ "key": "shift+alt+h",           "command": "editor.showSupertypes",
                                     "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'" },
{ "key": "ctrl+enter",            "command": "explorer.openToSide",
                                     "when": "explorerViewletFocus && foldersViewVisible && !inputFocus" },
{ "key": "shift+alt+f",           "command": "filesExplorer.findInFolder",
                                     "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus" },
{ "key": "alt+down",              "command": "history.showNext",
                                     "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
{ "key": "down",                  "command": "history.showNext",
                                     "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
{ "key": "alt+up",                "command": "history.showPrevious",
                                     "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
{ "key": "up",                    "command": "history.showPrevious",
                                     "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
{ "key": "down",                  "command": "iconSelectBox.focusDown",
                                     "when": "iconSelectBoxFocus" },
{ "key": "right",                 "command": "iconSelectBox.focusNext",
                                     "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus" },
{ "key": "left",                  "command": "iconSelectBox.focusPrevious",
                                     "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus" },
{ "key": "up",                    "command": "iconSelectBox.focusUp",
                                     "when": "iconSelectBoxFocus" },
{ "key": "enter",                 "command": "iconSelectBox.selectFocused",
                                     "when": "iconSelectBoxFocus" },
{ "key": "alt+=",                 "command": "increaseSearchEditorContextLines",
                                     "when": "inSearchEditor" },
{ "key": "cmd+i",                 "command": "inlineChat.holdForSpeech",
                                     "when": "hasSpeechProvider && inlineChatVisible && textInputFocus" },
{ "key": "f7",                    "command": "inlineChat.moveToNextHunk",
                                     "when": "inlineChatHasProvider && inlineChatVisible" },
{ "key": "shift+f7",              "command": "inlineChat.moveToPreviousHunk",
                                     "when": "inlineChatHasProvider && inlineChatVisible" },
{ "key": "cmd+r",                 "command": "inlineChat.regenerate",
                                     "when": "inlineChatHasProvider && inlineChatVisible" },
{ "key": "cmd+i",                 "command": "inlineChat.start",
                                     "when": "editorFocus && inlineChatHasEditsAgent && inlineChatPossible && !editorReadonly && !editorSimpleInput || editorFocus && inlineChatHasProvider && inlineChatPossible && !editorReadonly && !editorSimpleInput" },
{ "key": "cmd+k i",               "command": "inlineChat.startWithCurrentLine",
                                     "when": "inlineChatHasProvider && !editorReadonly && !inlineChatVisible" },
{ "key": "cmd+z",                 "command": "inlineChat.unstash",
                                     "when": "inlineChatHasStashedSession && !editorReadonly" },
{ "key": "cmd+down",              "command": "inlineChat.viewInChat",
                                     "when": "inChatInput && inlineChatHasProvider && inlineChatVisible" },
{ "key": "cmd+i",                 "command": "inlineChat2.reveal",
                                     "when": "inlineChatHasEditsAgent && !chatEdits.isGlobalEditingSession && chatEdits.requestCount >= 1" },
{ "key": "cmd+i",                 "command": "inlineChat2.stop",
                                     "when": "inlineChatHasEditsAgent && inlineChatVisible && chatEdits.requestCount == '0'" },
{ "key": "escape",                "command": "inlineChat2.stop",
                                     "when": "inlineChatHasEditsAgent && inlineChatVisible" },
{ "key": "cmd+up",                "command": "interactive.history.focus",
                                     "when": "isCompositeNotebook && isLinux && !notebookEditorFocused || isCompositeNotebook && isWindows && !notebookEditorFocused" },
{ "key": "down",                  "command": "interactive.history.next",
                                     "when": "isCompositeNotebook && !notebookEditorFocused && !suggestWidgetVisible && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'" },
{ "key": "up",                    "command": "interactive.history.previous",
                                     "when": "isCompositeNotebook && !notebookEditorFocused && !suggestWidgetVisible && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'" },
{ "key": "cmd+down",              "command": "interactive.scrollToBottom",
                                     "when": "activeEditor == 'workbench.editor.interactive'" },
{ "key": "cmd+up",                "command": "interactive.scrollToTop",
                                     "when": "activeEditor == 'workbench.editor.interactive'" },
{ "key": "enter",                 "command": "keybindings.editor.acceptWhenExpression",
                                     "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },
{ "key": "cmd+k cmd+a",           "command": "keybindings.editor.addKeybinding",
                                     "when": "inKeybindings && keybindingFocus" },
{ "key": "escape",                "command": "keybindings.editor.clearSearchResults",
                                     "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "cmd+c",                 "command": "keybindings.editor.copyKeybindingEntry",
                                     "when": "inKeybindings && keybindingFocus && !whenFocus" },
{ "key": "enter",                 "command": "keybindings.editor.defineKeybinding",
                                     "when": "inKeybindings && keybindingFocus && !whenFocus" },
{ "key": "cmd+k cmd+e",           "command": "keybindings.editor.defineWhenExpression",
                                     "when": "inKeybindings && keybindingFocus" },
{ "key": "cmd+down",              "command": "keybindings.editor.focusKeybindings",
                                     "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "alt+cmd+k",             "command": "keybindings.editor.recordSearchKeys",
                                     "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "escape",                "command": "keybindings.editor.rejectWhenExpression",
                                     "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },
{ "key": "cmd+backspace",         "command": "keybindings.editor.removeKeybinding",
                                     "when": "inKeybindings && keybindingFocus && !inputFocus" },
{ "key": "cmd+f",                 "command": "keybindings.editor.searchKeybindings",
                                     "when": "inKeybindings" },
{ "key": "alt+cmd+p",             "command": "keybindings.editor.toggleSortByPrecedence",
                                     "when": "inKeybindings" },
{ "key": "escape",                "command": "list.clear",
                                     "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "escape",                "command": "list.closeFind",
                                     "when": "listFocus && treeFindOpen" },
{ "key": "cmd+up",                "command": "list.collapse",
                                     "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused" },
{ "key": "left",                  "command": "list.collapse",
                                     "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused" },
{ "key": "shift+cmd+up",          "command": "list.collapseAll",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "cmd+left",              "command": "list.collapseAll",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "right",                 "command": "list.expand",
                                     "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused" },
{ "key": "shift+down",            "command": "list.expandSelectionDown",
                                     "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
{ "key": "shift+up",              "command": "list.expandSelectionUp",
                                     "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
{ "key": "f3",                    "command": "list.find",
                                     "when": "listFocus && listSupportsFind" },
{ "key": "alt+cmd+f",             "command": "list.find",
                                     "when": "listFocus && listSupportsFind" },
{ "key": "ctrl+alt+n",            "command": "list.focusAnyDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+down",              "command": "list.focusAnyDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+home",              "command": "list.focusAnyFirst",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+end",               "command": "list.focusAnyLast",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "ctrl+alt+p",            "command": "list.focusAnyUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+up",                "command": "list.focusAnyUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "ctrl+n",                "command": "list.focusDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "down",                  "command": "list.focusDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "home",                  "command": "list.focusFirst",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "end",                   "command": "list.focusLast",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "pagedown",              "command": "list.focusPageDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "pageup",                "command": "list.focusPageUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "ctrl+p",                "command": "list.focusUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "up",                    "command": "list.focusUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "cmd+down",              "command": "list.scrollDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'" },
{ "key": "cmd+up",                "command": "list.scrollUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'" },
{ "key": "cmd+down",              "command": "list.select",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "enter",                 "command": "list.select",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "cmd+a",                 "command": "list.selectAll",
                                     "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
{ "key": "cmd+k cmd+i",           "command": "list.showHover",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "space",                 "command": "list.toggleExpand",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "shift+cmd+enter",       "command": "list.toggleSelection",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "backspace",             "command": "noteMultiCursor.deleteLeft",
                                     "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '1' || config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '2'" },
{ "key": "delete",                "command": "noteMultiCursor.deleteRight",
                                     "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '1' || config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '2'" },
{ "key": "escape",                "command": "noteMultiCursor.exit",
                                     "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook'" },
{ "key": "cmd+d",                 "command": "notebook.addFindMatchToSelection",
                                     "when": "config.notebook.multiCursor.enabled && notebookCellEditorFocused && activeEditor == 'workbench.editor.notebook'" },
{ "key": "cmd+k m",               "command": "notebook.cell.changeLanguage",
                                     "when": "notebookCellEditable && notebookEditable && notebookEditorFocused" },
{ "key": "y",                     "command": "notebook.cell.changeToCode",
                                     "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'" },
{ "key": "m",                     "command": "notebook.cell.changeToMarkdown",
                                     "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'" },
{ "key": "enter",                 "command": "notebook.cell.chat.accept",
                                     "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused" },
{ "key": "cmd+enter",             "command": "notebook.cell.chat.acceptChanges",
                                     "when": "notebookEditorFocused && !inputFocus && !notebookCellEditorFocused && notebookChatOuterFocusPosition == 'below'" },
{ "key": "cmd+down",              "command": "notebook.cell.chat.focus",
                                     "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'above'" },
{ "key": "cmd+up",                "command": "notebook.cell.chat.focus",
                                     "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'below'" },
{ "key": "cmd+down",              "command": "notebook.cell.chat.focusNextCell",
                                     "when": "inlineChatFocused && notebookCellChatFocused" },
{ "key": "cmd+up",                "command": "notebook.cell.chat.focusPreviousCell",
                                     "when": "inlineChatFocused && notebookCellChatFocused" },
{ "key": "cmd+k i",               "command": "notebook.cell.chat.start",
                                     "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "cmd+i",                 "command": "notebook.cell.chat.start",
                                     "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "alt+delete",            "command": "notebook.cell.clearOutputs",
                                     "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "cmd+k cmd+c",           "command": "notebook.cell.collapseCellInput",
                                     "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed" },
{ "key": "cmd+k t",               "command": "notebook.cell.collapseCellOutput",
                                     "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed" },
{ "key": "shift+alt+down",        "command": "notebook.cell.copyDown",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "shift+alt+up",          "command": "notebook.cell.copyUp",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+backspace",         "command": "notebook.cell.delete",
                                     "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
{ "key": "shift+alt+d",           "command": "notebook.cell.detectLanguage",
                                     "when": "notebookCellEditable && notebookEditable" },
{ "key": "enter",                 "command": "notebook.cell.edit",
                                     "when": "notebookCellListFocused && !editorHoverFocused && !inputFocus && !notebookOutputInputFocused" },
{ "key": "cmd+k cmd+c",           "command": "notebook.cell.expandCellInput",
                                     "when": "notebookCellInputIsCollapsed && notebookCellListFocused" },
{ "key": "cmd+k t",               "command": "notebook.cell.expandCellOutput",
                                     "when": "notebookCellListFocused && notebookCellOutputIsCollapsed" },
{ "key": "cmd+down",              "command": "notebook.cell.focusInOutput",
                                     "when": "isWindows && notebookCellHasOutputs && notebookEditorFocused && !isCompositeNotebook" },
{ "key": "ctrl+cmd+down",         "command": "notebook.cell.focusInOutput",
                                     "when": "notebookCellHasOutputs && notebookEditorFocused" },
{ "key": "ctrl+cmd+up",           "command": "notebook.cell.focusOutOutput",
                                     "when": "notebookEditorFocused && notebookOutputFocused" },
{ "key": "shift+cmd+enter",       "command": "notebook.cell.insertCodeCellAbove",
                                     "when": "notebookCellListFocused && !inputFocus" },
{ "key": "cmd+enter",             "command": "notebook.cell.insertCodeCellBelow",
                                     "when": "notebookCellListFocused && !inputFocus && notebookChatOuterFocusPosition == ''" },
{ "key": "ctrl+shift+alt+j",      "command": "notebook.cell.joinAbove",
                                     "when": "notebookEditorFocused" },
{ "key": "ctrl+alt+j",            "command": "notebook.cell.joinBelow",
                                     "when": "notebookEditorFocused" },
{ "key": "alt+down",              "command": "notebook.cell.moveDown",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+up",                "command": "notebook.cell.moveUp",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+.",                 "command": "notebook.cell.openFailureActions",
                                     "when": "notebookCellFocused && notebookCellHasErrorDiagnostics && !notebookCellEditorFocused" },
{ "key": "cmd+k shift+cmd+\\",    "command": "notebook.cell.split",
                                     "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused" },
{ "key": "cmd+k y",               "command": "notebook.cell.toggleOutputScrolling",
                                     "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus" },
{ "key": "ctrl+l",                "command": "notebook.centerActiveCell",
                                     "when": "notebookEditorFocused" },
{ "key": "cmd+/",                 "command": "notebook.commentSelectedCells",
                                     "when": "notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "alt+f3",                "command": "notebook.diff.action.next",
                                     "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'" },
{ "key": "shift+alt+f3",          "command": "notebook.diff.action.previous",
                                     "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'" },
{ "key": "cmd+f",                 "command": "notebook.find",
                                     "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "cmd+end",               "command": "notebook.focusBottom",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+down",              "command": "notebook.focusBottom",
                                     "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == ''" },
{ "key": "down",                  "command": "notebook.focusNextEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },
{ "key": "ctrl+cmd+down",         "command": "notebook.focusNextEditor",
                                     "when": "notebookEditorFocused && notebookOutputFocused" },
{ "key": "up",                    "command": "notebook.focusPreviousEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },
{ "key": "cmd+home",              "command": "notebook.focusTop",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+up",                "command": "notebook.focusTop",
                                     "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == ''" },
{ "key": "left",                  "command": "notebook.fold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "alt+cmd+[",             "command": "notebook.fold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "shift+alt+f",           "command": "notebook.format",
                                     "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "escape",                "command": "notebook.hideFind",
                                     "when": "notebookEditorFocused && notebookFindWidgetFocused" },
{ "key": "shift+cmd+l",           "command": "notebook.selectAllFindMatches",
                                     "when": "config.notebook.multiCursor.enabled && notebookFindWidgetFocused || config.notebook.multiCursor.enabled && notebookCellEditorFocused && activeEditor == 'workbench.editor.notebook'" },
{ "key": "right",                 "command": "notebook.unfold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "alt+cmd+]",             "command": "notebook.unfold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "shift+cmd+a",           "command": "notification.acceptPrimaryAction",
                                     "when": "notificationFocus || notificationToastsVisible" },
{ "key": "cmd+backspace",         "command": "notification.clear",
                                     "when": "notificationFocus" },
{ "key": "left",                  "command": "notification.collapse",
                                     "when": "notificationFocus" },
{ "key": "right",                 "command": "notification.expand",
                                     "when": "notificationFocus" },
{ "key": "enter",                 "command": "notification.toggle",
                                     "when": "notificationFocus" },
{ "key": "space",                 "command": "notification.toggle",
                                     "when": "notificationFocus" },
{ "key": "home",                  "command": "notifications.focusFirstToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "pageup",                "command": "notifications.focusFirstToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "end",                   "command": "notifications.focusLastToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "pagedown",              "command": "notifications.focusLastToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "down",                  "command": "notifications.focusNextToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "up",                    "command": "notifications.focusPreviousToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "cmd+k shift+cmd+n",     "command": "notifications.showList" },
{ "key": "escape",                "command": "problems.action.clearFilterText",
                                     "when": "problemsFilterFocus" },
{ "key": "cmd+c",                 "command": "problems.action.copy",
                                     "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'" },
{ "key": "cmd+f",                 "command": "problems.action.focusFilter",
                                     "when": "focusedView == 'workbench.panel.markers.view'" },
{ "key": "cmd+down",              "command": "problems.action.focusProblemsFromFilter",
                                     "when": "problemsFilterFocus" },
{ "key": "cmd+down",              "command": "problems.action.open",
                                     "when": "problemFocus" },
{ "key": "enter",                 "command": "problems.action.open",
                                     "when": "problemFocus" },
{ "key": "ctrl+enter",            "command": "problems.action.openToSide",
                                     "when": "problemFocus" },
{ "key": "cmd+.",                 "command": "problems.action.showQuickFixes",
                                     "when": "problemFocus" },
{ "key": "ctrl+alt+cmd+home",     "command": "quickInput.first",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+home",         "command": "quickInput.first",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+home",         "command": "quickInput.first",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+home",             "command": "quickInput.first",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+cmd+end",      "command": "quickInput.last",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+end",          "command": "quickInput.last",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+end",          "command": "quickInput.last",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+end",              "command": "quickInput.last",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+down",             "command": "quickInput.next",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "down",                  "command": "quickInput.next",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+cmd+down",     "command": "quickInput.nextSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+down",         "command": "quickInput.nextSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+cmd+down",          "command": "quickInput.nextSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "cmd+down",              "command": "quickInput.nextSeparatorWithQuickAccessFallback",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+cmd+pagedown", "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+cmd+pagedown",      "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+pagedown",     "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "cmd+pagedown",          "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+pagedown",     "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+pagedown",         "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+pagedown",          "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "pagedown",              "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+cmd+pageup",   "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+cmd+pageup",        "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+pageup",       "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "cmd+pageup",            "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+pageup",       "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+pageup",           "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+pageup",            "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "pageup",                "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+up",               "command": "quickInput.previous",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "up",                    "command": "quickInput.previous",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+cmd+up",       "command": "quickInput.previousSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+up",           "command": "quickInput.previousSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+cmd+up",            "command": "quickInput.previousSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "cmd+up",                "command": "quickInput.previousSeparatorWithQuickAccessFallback",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+space",            "command": "quickInput.toggleHover",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "space",                 "command": "refactorPreview.toggleCheckedState",
                                     "when": "listFocus && refactorPreview.enabled && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+cmd+r",             "command": "revealFileInOS",
                                     "when": "!editorFocus" },
{ "key": "cmd+down",              "command": "revealReference",
                                     "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused" },
{ "key": "enter",                 "command": "revealReference",
                                     "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused" },
{ "key": "alt+cmd+s",             "command": "saveAll" },
{ "key": "cmd+enter",             "command": "scm.acceptInput",
                                     "when": "scmRepository" },
{ "key": "escape",                "command": "scm.clearInput",
                                     "when": "scmRepository && !editorHasSelection && !suggestWidgetVisible" },
{ "key": "alt+down",              "command": "scm.forceViewNextCommit",
                                     "when": "scmRepository" },
{ "key": "alt+up",                "command": "scm.forceViewPreviousCommit",
                                     "when": "scmRepository" },
{ "key": "down",                  "command": "scm.viewNextCommit",
                                     "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible" },
{ "key": "up",                    "command": "scm.viewPreviousCommit",
                                     "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible" },
{ "key": "escape",                "command": "search.action.cancel",
                                     "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'" },
{ "key": "cmd+c",                 "command": "search.action.copyMatch",
                                     "when": "fileMatchOrMatchFocus" },
{ "key": "alt+cmd+c",             "command": "search.action.copyPath",
                                     "when": "fileMatchOrFolderMatchWithResourceFocus" },
{ "key": "f4",                    "command": "search.action.focusNextSearchResult",
                                     "when": "hasSearchResult || inSearchEditor" },
{ "key": "shift+f4",              "command": "search.action.focusPreviousSearchResult",
                                     "when": "hasSearchResult || inSearchEditor" },
{ "key": "cmd+up",                "command": "search.action.focusSearchFromResults",
                                     "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible" },
{ "key": "cmd+enter",             "command": "search.action.openInEditor",
                                     "when": "hasSearchResult && searchViewletFocus" },
{ "key": "cmd+down",              "command": "search.action.openResult",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "enter",                 "command": "search.action.openResult",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "ctrl+enter",            "command": "search.action.openResultToSide",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "cmd+backspace",         "command": "search.action.remove",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "shift+cmd+1",           "command": "search.action.replace",
                                     "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible" },
{ "key": "alt+cmd+enter",         "command": "search.action.replaceAll",
                                     "when": "replaceActive && searchViewletVisible && !findWidgetVisible" },
{ "key": "shift+cmd+enter",       "command": "search.action.replaceAllInFile",
                                     "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+1",           "command": "search.action.replaceAllInFile",
                                     "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+enter",       "command": "search.action.replaceAllInFolder",
                                     "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+1",           "command": "search.action.replaceAllInFolder",
                                     "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
{ "key": "shift+alt+f",           "command": "search.action.restrictSearchToFolder",
                                     "when": "folderMatchWithResourceFocus && searchViewletVisible" },
{ "key": "cmd+i",                 "command": "search.action.searchWithAI",
                                     "when": "hasAIResultProviderKey && searchViewletFocus" },
{ "key": "cmd+down",              "command": "search.focus.nextInputBox",
                                     "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible" },
{ "key": "cmd+up",                "command": "search.focus.previousInputBox",
                                     "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus" },
{ "key": "shift+cmd+l",           "command": "selectAllSearchEditorMatches",
                                     "when": "inSearchEditor" },
{ "key": "escape",                "command": "settings.action.focusLevelUp",
                                     "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch" },
{ "key": "enter",                 "command": "settings.action.focusSettingControl",
                                     "when": "inSettingsEditor && settingRowFocus" },
{ "key": "down",                  "command": "settings.action.focusSettingsFromSearch",
                                     "when": "inSettingsSearch && !suggestWidgetVisible" },
{ "key": "enter",                 "command": "settings.action.focusSettingsList",
                                     "when": "inSettingsEditor && settingsTocRowFocus" },
{ "key": "left",                  "command": "settings.action.focusTOC",
                                     "when": "inSettingsEditor && settingRowFocus" },
{ "key": "shift+f9",              "command": "settings.action.showContextMenu",
                                     "when": "inSettingsEditor" },
{ "key": "cmd+; cmd+x",           "command": "testing.cancelRun" },
{ "key": "cmd+; shift+cmd+a",     "command": "testing.coverageAll" },
{ "key": "cmd+; shift+cmd+c",     "command": "testing.coverageAtCursor",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; shift+cmd+f",     "command": "testing.coverageCurrentFile",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; shift+cmd+l",     "command": "testing.coverageLastRun" },
{ "key": "cmd+; cmd+a",           "command": "testing.debugAll" },
{ "key": "cmd+; cmd+c",           "command": "testing.debugAtCursor",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; cmd+f",           "command": "testing.debugCurrentFile",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; cmd+e",           "command": "testing.debugFailTests" },
{ "key": "cmd+; cmd+l",           "command": "testing.debugLastRun" },
{ "key": "cmd+; cmd+m",           "command": "testing.openOutputPeek" },
{ "key": "cmd+; e",               "command": "testing.reRunFailTests" },
{ "key": "cmd+; l",               "command": "testing.reRunLastRun" },
{ "key": "cmd+; cmd+r",           "command": "testing.refreshTests",
                                     "when": "testing.canRefresh" },
{ "key": "cmd+; a",               "command": "testing.runAll" },
{ "key": "cmd+; c",               "command": "testing.runAtCursor",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; f",               "command": "testing.runCurrentFile",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; cmd+o",           "command": "testing.showMostRecentOutput",
                                     "when": "testing.hasAnyResults" },
{ "key": "cmd+; shift+cmd+i",     "command": "testing.toggleInlineCoverage" },
{ "key": "cmd+; cmd+i",           "command": "testing.toggleInlineTestOutput" },
{ "key": "alt+h",                 "command": "testing.toggleTestingPeekHistory",
                                     "when": "testing.isPeekVisible" },
{ "key": "alt+cmd+c",             "command": "toggleSearchCaseSensitive",
                                     "when": "searchViewletFocus && !fileMatchOrFolderMatchFocus" },
{ "key": "alt+cmd+c",             "command": "toggleSearchEditorCaseSensitive",
                                     "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+l",             "command": "toggleSearchEditorContextLines",
                                     "when": "inSearchEditor" },
{ "key": "alt+cmd+r",             "command": "toggleSearchEditorRegex",
                                     "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+w",             "command": "toggleSearchEditorWholeWord",
                                     "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+p",             "command": "toggleSearchPreserveCase",
                                     "when": "searchViewletFocus" },
{ "key": "alt+cmd+r",             "command": "toggleSearchRegex",
                                     "when": "searchViewletFocus" },
{ "key": "alt+cmd+w",             "command": "toggleSearchWholeWord",
                                     "when": "searchViewletFocus" },
{ "key": "ctrl+alt+cmd+n",        "command": "welcome.showNewFileEntries" },
{ "key": "cmd+down",              "command": "widgetNavigation.focusNext",
                                     "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'bottom'" },
{ "key": "cmd+up",                "command": "widgetNavigation.focusPrevious",
                                     "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'top'" },
{ "key": "cmd+escape",            "command": "workbench.action.chat.cancel" },
{ "key": "cmd+down",              "command": "workbench.action.chat.focusInput",
                                     "when": "inChat && !inChatInput && !quickChatHasFocus" },
{ "key": "cmd+up",                "command": "workbench.action.chat.focusInput",
                                     "when": "inChat && quickChatHasFocus && !inChatInput" },
{ "key": "cmd+i",                 "command": "workbench.action.chat.holdToVoiceChatInChatView",
                                     "when": "chatIsEnabled && hasSpeechProvider && !chatSessionRequestInProgress && !editorFocus && !inChatInput && !inlineChatFocused && !notebookEditorFocused && !searchViewletFocus" },
{ "key": "ctrl+l",                "command": "workbench.action.chat.newChat",
                                     "when": "chatIsEnabled && inChat && !config.chat.unifiedChatView && chatLocation != 'editing-session'" },
{ "key": "ctrl+l",                "command": "workbench.action.chat.newEditSession",
                                     "when": "chatEditingParticipantRegistered && chatIsEnabled && inChat" },
{ "key": "alt+cmd+pagedown",      "command": "workbench.action.chat.nextCodeBlock",
                                     "when": "chatIsEnabled && inChat" },
{ "key": "cmd+f9",                "command": "workbench.action.chat.nextFileTree",
                                     "when": "chatIsEnabled && inChat" },
{ "key": "ctrl+cmd+i",            "command": "workbench.action.chat.open",
                                     "when": "!chatSetupHidden" },
{ "key": "shift+cmd+i",           "command": "workbench.action.chat.openEditSession",
                                     "when": "chatEditingParticipantRegistered && !chatSetupHidden && view != 'workbench.panel.chat.view.edits'" },
{ "key": "alt+cmd+pageup",        "command": "workbench.action.chat.previousCodeBlock",
                                     "when": "chatIsEnabled && inChat" },
{ "key": "shift+cmd+f9",          "command": "workbench.action.chat.previousFileTree",
                                     "when": "chatIsEnabled && inChat" },
{ "key": "cmd+backspace",         "command": "workbench.action.chat.remove",
                                     "when": "inChat && !config.chat.unifiedChatView && !inChatInput && chatMode == 'ask'" },
{ "key": "alt+cmd+enter",         "command": "workbench.action.chat.sendToChatEditing",
                                     "when": "chatEditingParticipantRegistered && chatInputHasText && chatIsEnabled && chatRequestIsPaused && !chatInputHasAgent && !inUnifiedChat && chatLocation == 'panel' && chatLocation != 'editing-session' && chatLocation != 'editor' || chatEditingParticipantRegistered && chatInputHasText && chatIsEnabled && !chatInputHasAgent && !chatSessionRequestInProgress && !inUnifiedChat && chatLocation == 'panel' && chatLocation != 'editing-session' && chatLocation != 'editor' || chatEditingParticipantRegistered && chatInstructionsAttached && chatIsEnabled && chatRequestIsPaused && !chatInputHasAgent && !inUnifiedChat && chatLocation == 'panel' && chatLocation != 'editing-session' && chatLocation != 'editor' || chatEditingParticipantRegistered && chatInstructionsAttached && chatIsEnabled && !chatInputHasAgent && !chatSessionRequestInProgress && !inUnifiedChat && chatLocation == 'panel' && chatLocation != 'editing-session' && chatLocation != 'editor'" },
{ "key": "shift+cmd+enter",       "command": "workbench.action.chat.sendToNewChat",
                                     "when": "chatInputHasText && chatRequestIsPaused && inChatInput || chatInputHasText && inChatInput && !chatSessionRequestInProgress || chatInstructionsAttached && chatRequestIsPaused && inChatInput || chatInstructionsAttached && inChatInput && !chatSessionRequestInProgress" },
{ "key": "cmd+i",                 "command": "workbench.action.chat.startVoiceChat",
                                     "when": "chatIsEnabled && hasSpeechProvider && inChatInput && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress || chatIsEnabled && hasSpeechProvider && inlineChatFocused && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress" },
{ "key": "cmd+i",                 "command": "workbench.action.chat.stopListeningAndSubmit",
                                     "when": "inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'view' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'view'" },
{ "key": "alt+cmd+.",             "command": "workbench.action.chat.switchToNextModel",
                                     "when": "chatIsEnabled && inChatInput" },
{ "key": "cmd+backspace",         "command": "workbench.action.chat.undoEdits",
                                     "when": "inChat && !textInputFocus" },
{ "key": "cmd+w",                 "command": "workbench.action.closeActiveEditor" },
{ "key": "cmd+k cmd+w",           "command": "workbench.action.closeAllEditors" },
{ "key": "cmd+k shift+cmd+w",     "command": "workbench.action.closeAllGroups" },
{ "key": "cmd+k w",               "command": "workbench.action.closeEditorsInGroup" },
{ "key": "cmd+k f",               "command": "workbench.action.closeFolder",
                                     "when": "emptyWorkspaceSupport && workbenchState != 'empty'" },
{ "key": "cmd+w",                 "command": "workbench.action.closeGroup",
                                     "when": "activeEditorGroupEmpty && multipleEditorGroups" },
{ "key": "alt+cmd+t",             "command": "workbench.action.closeOtherEditors" },
{ "key": "shift+escape",          "command": "workbench.action.closeQuickOpen",
                                     "when": "inQuickOpen" },
{ "key": "escape",                "command": "workbench.action.closeQuickOpen",
                                     "when": "inQuickOpen" },
{ "key": "cmd+k u",               "command": "workbench.action.closeUnmodifiedEditors" },
{ "key": "shift+cmd+w",           "command": "workbench.action.closeWindow" },
{ "key": "cmd+w",                 "command": "workbench.action.closeWindow",
                                     "when": "!editorIsOpen && !multipleEditorGroups" },
{ "key": "alt+f5",                "command": "workbench.action.compareEditor.nextChange",
                                     "when": "textCompareEditorVisible" },
{ "key": "cmd+k shift+o",         "command": "workbench.action.compareEditor.openSide",
                                     "when": "inDiffEditor" },
{ "key": "shift+alt+f5",          "command": "workbench.action.compareEditor.previousChange",
                                     "when": "textCompareEditorVisible" },
{ "key": "cmd+k o",               "command": "workbench.action.copyEditorToNewWindow",
                                     "when": "activeEditor" },
{ "key": "shift+f5",              "command": "workbench.action.debug.disconnect",
                                     "when": "focusedSessionIsAttach && inDebugMode" },
{ "key": "shift+cmd+f5",          "command": "workbench.action.debug.restart",
                                     "when": "inDebugMode" },
{ "key": "ctrl+f5",               "command": "workbench.action.debug.run",
                                     "when": "debuggersAvailable && debugState != 'initializing'" },
{ "key": "f5",                    "command": "workbench.action.debug.start",
                                     "when": "debuggersAvailable && debugState == 'inactive'" },
{ "key": "cmd+f11",               "command": "workbench.action.debug.stepIntoTarget",
                                     "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'" },
{ "key": "shift+f11",             "command": "workbench.action.debug.stepOut",
                                     "when": "debugState == 'stopped'" },
{ "key": "f10",                   "command": "workbench.action.debug.stepOver",
                                     "when": "debugState == 'stopped'" },
{ "key": "shift+f5",              "command": "workbench.action.debug.stop",
                                     "when": "inDebugMode && !focusedSessionIsAttach" },
{ "key": "cmd+k m",               "command": "workbench.action.editor.changeLanguageMode",
                                     "when": "!notebookEditorFocused" },
{ "key": "alt+cmd+v",             "command": "workbench.action.editorDictation.start",
                                     "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress" },
{ "key": "cmd+k p",               "command": "workbench.action.files.copyPathOfActiveFile" },
{ "key": "cmd+n",                 "command": "workbench.action.files.newUntitledFile" },
{ "key": "cmd+o",                 "command": "workbench.action.files.openFile",
                                     "when": "false" },
{ "key": "cmd+o",                 "command": "workbench.action.files.openFileFolder",
                                     "when": "isMacNative && openFolderWorkspaceSupport" },
{ "key": "cmd+o",                 "command": "workbench.action.files.openFolderViaWorkspace",
                                     "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'" },
{ "key": "cmd+o",                 "command": "workbench.action.files.openLocalFileFolder",
                                     "when": "remoteFileDialogVisible" },
{ "key": "cmd+k r",               "command": "workbench.action.files.revealActiveFileInWindows" },
{ "key": "cmd+s",                 "command": "workbench.action.files.save" },
{ "key": "shift+cmd+s",           "command": "workbench.action.files.saveAs" },
{ "key": "shift+cmd+s",           "command": "workbench.action.files.saveLocalFile",
                                     "when": "remoteFileDialogVisible" },
{ "key": "cmd+k s",               "command": "workbench.action.files.saveWithoutFormatting" },
{ "key": "shift+cmd+f",           "command": "workbench.action.findInFiles" },
{ "key": "cmd+k cmd+up",          "command": "workbench.action.focusAboveGroup" },
{ "key": "cmd+k cmd+down",        "command": "workbench.action.focusBelowGroup" },
{ "key": "cmd+8",                 "command": "workbench.action.focusEighthEditorGroup" },
{ "key": "cmd+5",                 "command": "workbench.action.focusFifthEditorGroup" },
{ "key": "cmd+1",                 "command": "workbench.action.focusFirstEditorGroup" },
{ "key": "cmd+4",                 "command": "workbench.action.focusFourthEditorGroup" },
{ "key": "cmd+k cmd+left",        "command": "workbench.action.focusLeftGroup" },
{ "key": "f6",                    "command": "workbench.action.focusNextPart" },
{ "key": "shift+f6",              "command": "workbench.action.focusPreviousPart" },
{ "key": "cmd+k cmd+right",       "command": "workbench.action.focusRightGroup" },
{ "key": "cmd+2",                 "command": "workbench.action.focusSecondEditorGroup" },
{ "key": "cmd+7",                 "command": "workbench.action.focusSeventhEditorGroup" },
{ "key": "cmd+0",                 "command": "workbench.action.focusSideBar" },
{ "key": "cmd+6",                 "command": "workbench.action.focusSixthEditorGroup" },
{ "key": "cmd+3",                 "command": "workbench.action.focusThirdEditorGroup" },
{ "key": "ctrl+g",                "command": "workbench.action.gotoLine" },
{ "key": "shift+cmd+o",           "command": "workbench.action.gotoSymbol",
                                     "when": "!accessibilityHelpIsShown && !accessibleViewIsShown" },
{ "key": "down",                  "command": "workbench.action.interactivePlayground.arrowDown",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "up",                    "command": "workbench.action.interactivePlayground.arrowUp",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "pagedown",              "command": "workbench.action.interactivePlayground.pageDown",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "pageup",                "command": "workbench.action.interactivePlayground.pageUp",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "cmd+k shift+cmd+\\",    "command": "workbench.action.joinEditorInGroup",
                                     "when": "sideBySideEditorActive" },
{ "key": "cmd+k enter",           "command": "workbench.action.keepEditor" },
{ "key": "cmd+9",                 "command": "workbench.action.lastEditorInGroup" },
{ "key": "ctrl+0",                "command": "workbench.action.lastEditorInGroup" },
{ "key": "cmd+k down",            "command": "workbench.action.moveActiveEditorGroupDown" },
{ "key": "cmd+k left",            "command": "workbench.action.moveActiveEditorGroupLeft" },
{ "key": "cmd+k right",           "command": "workbench.action.moveActiveEditorGroupRight" },
{ "key": "cmd+k up",              "command": "workbench.action.moveActiveEditorGroupUp" },
{ "key": "cmd+k shift+cmd+left",  "command": "workbench.action.moveEditorLeftInGroup" },
{ "key": "cmd+k shift+cmd+right", "command": "workbench.action.moveEditorRightInGroup" },
{ "key": "ctrl+cmd+1",            "command": "workbench.action.moveEditorToFirstGroup" },
{ "key": "ctrl+cmd+9",            "command": "workbench.action.moveEditorToLastGroup" },
{ "key": "ctrl+cmd+right",        "command": "workbench.action.moveEditorToNextGroup" },
{ "key": "ctrl+cmd+left",         "command": "workbench.action.moveEditorToPreviousGroup" },
{ "key": "browserback",           "command": "workbench.action.navigateBack",
                                     "when": "canNavigateBack" },
{ "key": "ctrl+-",                "command": "workbench.action.navigateBack",
                                     "when": "canNavigateBack" },
{ "key": "browserforward",        "command": "workbench.action.navigateForward",
                                     "when": "canNavigateForward" },
{ "key": "ctrl+shift+-",          "command": "workbench.action.navigateForward",
                                     "when": "canNavigateForward" },
{ "key": "cmd+k cmd+q",           "command": "workbench.action.navigateToLastEditLocation" },
{ "key": "shift+cmd+n",           "command": "workbench.action.newWindow" },
{ "key": "shift+cmd+]",           "command": "workbench.action.nextEditor" },
{ "key": "alt+cmd+right",         "command": "workbench.action.nextEditor" },
{ "key": "cmd+k alt+cmd+right",   "command": "workbench.action.nextEditorInGroup" },
{ "key": "ctrl+1",                "command": "workbench.action.openEditorAtIndex1" },
{ "key": "ctrl+2",                "command": "workbench.action.openEditorAtIndex2" },
{ "key": "ctrl+3",                "command": "workbench.action.openEditorAtIndex3" },
{ "key": "ctrl+4",                "command": "workbench.action.openEditorAtIndex4" },
{ "key": "ctrl+5",                "command": "workbench.action.openEditorAtIndex5" },
{ "key": "ctrl+6",                "command": "workbench.action.openEditorAtIndex6" },
{ "key": "ctrl+7",                "command": "workbench.action.openEditorAtIndex7" },
{ "key": "ctrl+8",                "command": "workbench.action.openEditorAtIndex8" },
{ "key": "ctrl+9",                "command": "workbench.action.openEditorAtIndex9" },
{ "key": "cmd+k cmd+s",           "command": "workbench.action.openGlobalKeybindings" },
{ "key": "ctrl+r",                "command": "workbench.action.openRecent" },
{ "key": "cmd+,",                 "command": "workbench.action.openSettings" },
{ "key": "shift+cmd+u",           "command": "workbench.action.output.toggleOutput",
                                     "when": "workbench.panel.output.active" },
{ "key": "cmd+k shift+enter",     "command": "workbench.action.pinEditor",
                                     "when": "!activeEditorIsPinned" },
{ "key": "shift+cmd+[",           "command": "workbench.action.previousEditor" },
{ "key": "alt+cmd+left",          "command": "workbench.action.previousEditor" },
{ "key": "cmd+k alt+cmd+left",    "command": "workbench.action.previousEditorInGroup" },
{ "key": "cmd+p",                 "command": "workbench.action.quickOpen" },
{ "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
                                     "when": "!activeEditorGroupEmpty" },
{ "key": "ctrl+tab",              "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
                                     "when": "!activeEditorGroupEmpty" },
{ "key": "ctrl+q",                "command": "workbench.action.quickOpenView" },
{ "key": "shift+alt+cmd+l",       "command": "workbench.action.quickchat.toggle",
                                     "when": "chatIsEnabled" },
{ "key": "cmd+q",                 "command": "workbench.action.quit" },
{ "key": "alt+cmd+o",             "command": "workbench.action.remote.showMenu" },
{ "key": "shift+cmd+t",           "command": "workbench.action.reopenClosedEditor" },
{ "key": "shift+cmd+h",           "command": "workbench.action.replaceInFiles" },
{ "key": "shift+cmd+j",           "command": "workbench.action.search.toggleQueryDetails",
                                     "when": "inSearchEditor || searchViewletFocus" },
{ "key": "cmd+k cmd+t",           "command": "workbench.action.selectTheme" },
{ "key": "alt+cmd+tab",           "command": "workbench.action.showAllEditors" },
{ "key": "cmd+t",                 "command": "workbench.action.showAllSymbols" },
{ "key": "f1",                    "command": "workbench.action.showCommands" },
{ "key": "shift+cmd+p",           "command": "workbench.action.showCommands" },
{ "key": "cmd+\\",                "command": "workbench.action.splitEditor" },
{ "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorDown" },
{ "key": "cmd+k shift+cmd+\\",    "command": "workbench.action.splitEditorInGroup",
                                     "when": "activeEditorCanSplitInGroup" },
{ "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorLeft" },
{ "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorOrthogonal" },
{ "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorRight" },
{ "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorUp" },
{ "key": "ctrl+w",                "command": "workbench.action.switchWindow" },
{ "key": "shift+cmd+b",           "command": "workbench.action.tasks.build",
                                     "when": "taskCommandsRegistered" },
{ "key": "ctrl+shift+r",          "command": "workbench.action.tasks.rerunForActiveTerminal",
                                     "when": "taskTerminalActive && terminalFocus" },
{ "key": "escape",                "command": "workbench.action.terminal.chat.close",
                                     "when": "chatIsEnabled && terminalChatFocus && terminalChatVisible || chatIsEnabled && terminalChatVisible && terminalFocus" },
{ "key": "alt+cmd+enter",         "command": "workbench.action.terminal.chat.insertCommand",
                                     "when": "chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks" },
{ "key": "alt+enter",             "command": "workbench.action.terminal.chat.insertCommand",
                                     "when": "chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks" },
{ "key": "alt+cmd+enter",         "command": "workbench.action.terminal.chat.insertFirstCommand",
                                     "when": "chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest" },
{ "key": "alt+enter",             "command": "workbench.action.terminal.chat.insertFirstCommand",
                                     "when": "chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest" },
{ "key": "cmd+r",                 "command": "workbench.action.terminal.chat.rerunRequest",
                                     "when": "chatIsEnabled && terminalChatFocus && terminalHasBeenCreated && !terminalChatActiveRequest || chatIsEnabled && terminalChatFocus && terminalProcessSupported && !terminalChatActiveRequest" },
{ "key": "cmd+enter",             "command": "workbench.action.terminal.chat.runCommand",
                                     "when": "chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || chatIsEnabled && terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks" },
{ "key": "cmd+enter",             "command": "workbench.action.terminal.chat.runFirstCommand",
                                     "when": "chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || chatIsEnabled && terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest" },
{ "key": "escape",                "command": "workbench.action.terminal.clearSelection",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible" },
{ "key": "shift+cmd+,",           "command": "workbench.action.terminal.configureSuggestSettings",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "cmd+c",                 "command": "workbench.action.terminal.copySelection",
                                     "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused" },
{ "key": "f3",                    "command": "workbench.action.terminal.findNext",
                                     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "cmd+g",                 "command": "workbench.action.terminal.findNext",
                                     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "shift+enter",           "command": "workbench.action.terminal.findNext",
                                     "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported" },
{ "key": "shift+f3",              "command": "workbench.action.terminal.findPrevious",
                                     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "shift+cmd+g",           "command": "workbench.action.terminal.findPrevious",
                                     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "enter",                 "command": "workbench.action.terminal.findPrevious",
                                     "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported" },
{ "key": "cmd+down",              "command": "workbench.action.terminal.focus",
                                     "when": "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "cmd+up",                "command": "workbench.action.terminal.focusAccessibleBuffer",
                                     "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
{ "key": "alt+f2",                "command": "workbench.action.terminal.focusAccessibleBuffer",
                                     "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
{ "key": "cmd+f",                 "command": "workbench.action.terminal.focusFind",
                                     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "cmd+k cmd+i",           "command": "workbench.action.terminal.focusHover",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "shift+cmd+]",           "command": "workbench.action.terminal.focusNext",
                                     "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
{ "key": "alt+cmd+down",          "command": "workbench.action.terminal.focusNextPane",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+right",         "command": "workbench.action.terminal.focusNextPane",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+[",           "command": "workbench.action.terminal.focusPrevious",
                                     "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
{ "key": "alt+cmd+up",            "command": "workbench.action.terminal.focusPreviousPane",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+left",          "command": "workbench.action.terminal.focusPreviousPane",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+\\",          "command": "workbench.action.terminal.focusTabs",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+g",                 "command": "workbench.action.terminal.goToRecentDirectory",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "shift+escape",          "command": "workbench.action.terminal.hideFind",
                                     "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported" },
{ "key": "escape",                "command": "workbench.action.terminal.hideFind",
                                     "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported" },
{ "key": "delete",                "command": "workbench.action.terminal.killActiveTab",
                                     "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+backspace",         "command": "workbench.action.terminal.killActiveTab",
                                     "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+w",                 "command": "workbench.action.terminal.killEditor",
                                     "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+shift+`",          "command": "workbench.action.terminal.new",
                                     "when": "terminalProcessSupported || terminalWebExtensionContributedProfile" },
{ "key": "shift+cmd+c",           "command": "workbench.action.terminal.openNativeConsole",
                                     "when": "!terminalFocus" },
{ "key": "cmd+v",                 "command": "workbench.action.terminal.paste",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "enter",                 "command": "workbench.action.terminal.renameActiveTab",
                                     "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection" },
{ "key": "ctrl+cmd+down",         "command": "workbench.action.terminal.resizePaneDown",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+left",         "command": "workbench.action.terminal.resizePaneLeft",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+right",        "command": "workbench.action.terminal.resizePaneRight",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+up",           "command": "workbench.action.terminal.resizePaneUp",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "cmd+r",                 "command": "workbench.action.terminal.runRecentCommand",
                                     "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "ctrl+alt+r",            "command": "workbench.action.terminal.runRecentCommand",
                                     "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
{ "key": "alt+cmd+pagedown",      "command": "workbench.action.terminal.scrollDown",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "pagedown",              "command": "workbench.action.terminal.scrollDownPage",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+end",               "command": "workbench.action.terminal.scrollToBottom",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+end",               "command": "workbench.action.terminal.scrollToBottomAccessibleView",
                                     "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "cmd+down",              "command": "workbench.action.terminal.scrollToNextCommand",
                                     "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
{ "key": "cmd+up",                "command": "workbench.action.terminal.scrollToPreviousCommand",
                                     "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
{ "key": "cmd+home",              "command": "workbench.action.terminal.scrollToTop",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+home",              "command": "workbench.action.terminal.scrollToTopAccessibleView",
                                     "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "alt+cmd+pageup",        "command": "workbench.action.terminal.scrollUp",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "pageup",                "command": "workbench.action.terminal.scrollUpPage",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+a",                 "command": "workbench.action.terminal.selectAll",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "shift+cmd+down",        "command": "workbench.action.terminal.selectToNextCommand",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+up",          "command": "workbench.action.terminal.selectToPreviousCommand",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+space",            "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                     "args": {"text":"\u001b[24~a"} },
{ "key": "alt+space",             "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                     "args": {"text":"\u001b[24~b"} },
{ "key": "shift+enter",           "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                     "args": {"text":"\u001b[24~c"} },
{ "key": "shift+cmd+right",       "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                     "args": {"text":"\u001b[24~d"} },
{ "key": "shift+cmd+left",        "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus && terminalShellType == 'pwsh'",
                                     "args": {"text":"\u001b[1;2H"} },
{ "key": "ctrl+alt+r",            "command": "workbench.action.terminal.sendSequence",
                                     "when": "accessibilityModeEnabled && terminalFocus",
                                     "args": {"text":"\u0012"} },
{ "key": "ctrl+alt+g",            "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0007"} },
{ "key": "alt+backspace",         "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0017"} },
{ "key": "alt+delete",            "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u001bd"} },
{ "key": "cmd+backspace",         "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0015"} },
{ "key": "cmd+left",              "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0001"} },
{ "key": "cmd+right",             "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0005"} },
{ "key": "ctrl+shift+2",          "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0000"} },
{ "key": "ctrl+shift+6",          "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u001e"} },
{ "key": "ctrl+/",                "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u001f"} },
{ "key": "cmd+.",                 "command": "workbench.action.terminal.showQuickFixes",
                                     "when": "terminalFocus" },
{ "key": "alt+z",                 "command": "workbench.action.terminal.sizeToContentWidth",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported" },
{ "key": "ctrl+shift+5",          "command": "workbench.action.terminal.split",
                                     "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile" },
{ "key": "cmd+\\",                "command": "workbench.action.terminal.split",
                                     "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile" },
{ "key": "ctrl+shift+5",          "command": "workbench.action.terminal.splitActiveTab",
                                     "when": "terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+\\",                "command": "workbench.action.terminal.splitActiveTab",
                                     "when": "terminalProcessSupported && terminalTabsFocus" },
{ "key": "ctrl+alt+space",        "command": "workbench.action.terminal.suggestToggleDetailsFocus",
                                     "when": "!textInputFocus" },
{ "key": "alt+cmd+c",             "command": "workbench.action.terminal.toggleFindCaseSensitive",
                                     "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported" },
{ "key": "alt+cmd+r",             "command": "workbench.action.terminal.toggleFindRegex",
                                     "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported" },
{ "key": "alt+cmd+w",             "command": "workbench.action.terminal.toggleFindWholeWord",
                                     "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported" },
{ "key": "ctrl+`",                "command": "workbench.action.terminal.toggleTerminal",
                                     "when": "terminal.active" },
{ "key": "alt+cmd+b",             "command": "workbench.action.toggleAuxiliaryBar" },
{ "key": "alt+cmd+0",             "command": "workbench.action.toggleEditorGroupLayout" },
{ "key": "ctrl+cmd+f",            "command": "workbench.action.toggleFullScreen",
                                     "when": "!isIOS" },
{ "key": "cmd+k cmd+m",           "command": "workbench.action.toggleMaximizeEditorGroup",
                                     "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups" },
{ "key": "cmd+j",                 "command": "workbench.action.togglePanel" },
{ "key": "cmd+b",                 "command": "workbench.action.toggleSidebarVisibility" },
{ "key": "cmd+k z",               "command": "workbench.action.toggleZenMode",
                                     "when": "!isAuxiliaryWindowFocusedContext" },
{ "key": "cmd+k shift+enter",     "command": "workbench.action.unpinEditor",
                                     "when": "activeEditorIsPinned" },
{ "key": "cmd+numpad_add",        "command": "workbench.action.zoomIn" },
{ "key": "shift+cmd+=",           "command": "workbench.action.zoomIn" },
{ "key": "cmd+=",                 "command": "workbench.action.zoomIn" },
{ "key": "cmd+numpad_subtract",   "command": "workbench.action.zoomOut" },
{ "key": "shift+cmd+-",           "command": "workbench.action.zoomOut" },
{ "key": "cmd+-",                 "command": "workbench.action.zoomOut" },
{ "key": "cmd+numpad0",           "command": "workbench.action.zoomReset" },
{ "key": "shift+cmd+m",           "command": "workbench.actions.view.problems",
                                     "when": "workbench.panel.markers.view.active" },
{ "key": "escape",                "command": "workbench.banner.focusBanner",
                                     "when": "bannerFocused" },
{ "key": "down",                  "command": "workbench.banner.focusNextAction",
                                     "when": "bannerFocused" },
{ "key": "right",                 "command": "workbench.banner.focusNextAction",
                                     "when": "bannerFocused" },
{ "key": "up",                    "command": "workbench.banner.focusPreviousAction",
                                     "when": "bannerFocused" },
{ "key": "left",                  "command": "workbench.banner.focusPreviousAction",
                                     "when": "bannerFocused" },
{ "key": "alt+cmd+/",             "command": "workbench.command.prompts.use",
                                     "when": "chatIsEnabled && config.chat.promptFiles" },
{ "key": "shift+cmd+y",           "command": "workbench.debug.action.toggleRepl",
                                     "when": "workbench.panel.repl.view.active" },
{ "key": "cmd+c",                 "command": "workbench.debug.viewlet.action.copyValue",
                                     "when": "!expressionSelected && focusedView == 'workbench.debug.variablesView' || !expressionSelected && focusedView == 'workbench.debug.watchExpressionsView'" },
{ "key": "cmd+k c",               "command": "workbench.files.action.compareWithClipboard" },
{ "key": "cmd+k d",               "command": "workbench.files.action.compareWithSaved" },
{ "key": "cmd+k e",               "command": "workbench.files.action.focusOpenEditorsView",
                                     "when": "workbench.explorer.openEditorsView.active" },
{ "key": "ctrl+cmd+i",            "command": "workbench.panel.chat",
                                     "when": "workbench.panel.chat.view.copilot.active" },
{ "key": "shift+cmd+i",           "command": "workbench.panel.chatEditing",
                                     "when": "workbench.panel.chat.view.edits.active" },
{ "key": "escape",                "command": "workbench.statusBar.clearFocus",
                                     "when": "statusBarFocused" },
{ "key": "home",                  "command": "workbench.statusBar.focusFirst",
                                     "when": "statusBarFocused" },
{ "key": "end",                   "command": "workbench.statusBar.focusLast",
                                     "when": "statusBarFocused" },
{ "key": "down",                  "command": "workbench.statusBar.focusNext",
                                     "when": "statusBarFocused" },
{ "key": "right",                 "command": "workbench.statusBar.focusNext",
                                     "when": "statusBarFocused" },
{ "key": "up",                    "command": "workbench.statusBar.focusPrevious",
                                     "when": "statusBarFocused" },
{ "key": "left",                  "command": "workbench.statusBar.focusPrevious",
                                     "when": "statusBarFocused" },
{ "key": "shift+cmd+d",           "command": "workbench.view.debug",
                                     "when": "viewContainer.workbench.view.debug.enabled" },
{ "key": "shift+cmd+e",           "command": "workbench.view.explorer",
                                     "when": "viewContainer.workbench.view.explorer.enabled" },
{ "key": "shift+cmd+x",           "command": "workbench.view.extensions",
                                     "when": "viewContainer.workbench.view.extensions.enabled" },
{ "key": "ctrl+shift+g",          "command": "workbench.view.scm",
                                     "when": "workbench.scm.active" },
{ "key": "shift+cmd+f",           "command": "workbench.view.search",
                                     "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/" },
{ "key": "alt+right",             "command": "breadcrumbs.focusNextWithPicker",
                                     "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+left",              "command": "breadcrumbs.focusPreviousWithPicker",
                                     "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "escape",                "command": "breadcrumbs.selectEditor",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "tab",                   "command": "editor.action.inlineSuggest.jump",
                                     "when": "inlineEditIsVisible && tabShouldJumpToInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible" },
{ "key": "cmd+i",                 "command": "inlineChat.startWithCurrentLine",
                                     "when": "inlineChatHasProvider && inlineChatShowingHint && !editorReadonly && !inlineChatVisible" },
{ "key": "f3",                    "command": "list.find.replInputFocus",
                                     "when": "view == 'workbench.panel.repl.view'" },
{ "key": "alt+cmd+f",             "command": "list.find.replInputFocus",
                                     "when": "view == 'workbench.panel.repl.view'" },
{ "key": "down",                  "command": "notebook.cell.nullAction",
                                     "when": "notebookOutputInputFocused" },
{ "key": "up",                    "command": "notebook.cell.nullAction",
                                     "when": "notebookOutputInputFocused" },
{ "key": "cmd+a",                 "command": "notebook.cell.output.selectAll",
                                     "when": "notebookEditorFocused && notebookOutputFocused" },
{ "key": "ctrl+pageup",           "command": "notebook.focusNextEditor",
                                     "when": "accessibilityModeEnabled && notebookCellEditorFocused" },
{ "key": "ctrl+pageup",           "command": "notebook.focusPreviousEditor",
                                     "when": "accessibilityModeEnabled && notebookCellEditorFocused" },
{ "key": "cmd+/",                 "command": "terminalSuggestToggleExplainMode",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "cmd+k down",            "command": "views.moveViewDown",
                                     "when": "focusedView != ''" },
{ "key": "cmd+k left",            "command": "views.moveViewLeft",
                                     "when": "focusedView != ''" },
{ "key": "cmd+k right",           "command": "views.moveViewRight",
                                     "when": "focusedView != ''" },
{ "key": "cmd+k up",              "command": "views.moveViewUp",
                                     "when": "focusedView != ''" },
{ "key": "cmd+enter",             "command": "workbench.action.chat.acceptTool",
                                     "when": "chatHasToolConfirmation && inChat" },
{ "key": "shift+cmd+]",           "command": "workbench.action.debug.nextConsole",
                                     "when": "inDebugRepl" },
{ "key": "shift+cmd+[",           "command": "workbench.action.debug.prevConsole",
                                     "when": "inDebugRepl" },
{ "key": "tab",                   "command": "workbench.action.terminal.acceptSelectedSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "enter",                 "command": "workbench.action.terminal.acceptSelectedSuggestionEnter",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore' || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore'" },
{ "key": "cmd+k",                 "command": "workbench.action.terminal.clear",
                                     "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "escape",                "command": "workbench.action.terminal.hideSuggestWidget",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "shift+cmd+o",           "command": "workbench.action.terminal.openDetectedLink",
                                     "when": "terminalFocus && terminalHasBeenCreated" },
{ "key": "shift+cmd+g",           "command": "workbench.action.terminal.openDetectedLink",
                                     "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "ctrl+space",            "command": "workbench.action.terminal.requestCompletions",
                                     "when": "config.terminal.integrated.suggest.enabled && terminalFocus && terminalProcessSupported && !terminalSuggestWidgetVisible" },
{ "key": "pagedown",              "command": "workbench.action.terminal.selectNextPageSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "down",                  "command": "workbench.action.terminal.selectNextSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "pageup",                "command": "workbench.action.terminal.selectPrevPageSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "up",                    "command": "workbench.action.terminal.selectPrevSuggestion",
                                     "when": "simpleSuggestWidgetHasNavigated && terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || simpleSuggestWidgetHasNavigated && terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible || terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && !config.terminal.integrated.suggest.upArrowNavigatesHistory || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && !config.terminal.integrated.suggest.upArrowNavigatesHistory" },
{ "key": "cmd+k",                 "command": "workbench.debug.panel.action.clearReplAction",
                                     "when": "focusedView == 'workbench.panel.repl.view'" },
{ "key": "tab",                   "command": "editor.action.inlineSuggest.commit",
                                     "when": "inInlineEditsPreviewEditor" },
{ "key": "cmd+i",                 "command": "windsurf.interactiveCascade.focusEditIntent",
                                     "when": "windsurf.interactiveCascade.enabled && !editorReadonly" },
{ "key": "alt+cmd+i",             "command": "windsurf.interactiveCascade.toggleVisibility" },
{ "key": "f6",                    "command": "workbench.action.debug.pause",
                                     "when": "debugState == 'running'" },
{ "key": "alt+down",              "command": "workbench.action.terminal.accessibleBufferGoToNextCommand",
                                     "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "alt+up",                "command": "workbench.action.terminal.accessibleBufferGoToPreviousCommand",
                                     "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "up",                    "command": "workbench.action.terminal.hideSuggestWidgetAndNavigateHistory",
                                     "when": "config.terminal.integrated.suggest.upArrowNavigatesHistory && terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && !simpleSuggestWidgetHasNavigated || config.terminal.integrated.suggest.upArrowNavigatesHistory && terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && !simpleSuggestWidgetHasNavigated" },
{ "key": "enter",                 "command": "debug.renameWatchExpression",
                                     "when": "watchExpressionsFocused" },
{ "key": "enter",                 "command": "debug.setVariable",
                                     "when": "variablesFocused" },
{ "key": "space",                 "command": "debug.toggleBreakpoint",
                                     "when": "breakpointsFocused && !inputFocus" },
{ "key": "cmd+up",                "command": "interactive.history.focus",
                                     "when": "isCompositeNotebook && !notebookEditorFocused && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'" },
{ "key": "escape",                "command": "notebook.cell.quitEdit",
                                     "when": "notebookEditorFocused && notebookOutputFocused" },
{ "key": "alt+home alt+home",     "command": "repl.input.focus",
                                     "when": "mostRecentReplEditor" },
{ "key": "cmd+v",                 "command": "filesExplorer.paste",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus" },
{ "key": "alt+cmd+backspace",     "command": "deleteFile",
                                     "when": "filesExplorerFocus && foldersViewVisible && !inputFocus" },
{ "key": "cmd+backspace",         "command": "deleteFile",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceMoveableToTrash && !inputFocus" },
{ "key": "shift+cmd+.",           "command": "editor.action.accessibleViewGoToSymbol",
                                     "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown" },
{ "key": "shift+cmd+o",           "command": "editor.action.accessibleViewGoToSymbol",
                                     "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown" },
{ "key": "cmd+e",                 "command": "editor.action.toggleScreenReaderAccessibilityMode",
                                     "when": "accessibilityHelpIsShown" },
{ "key": "shift+alt+f1",          "command": "editor.action.toggleScreenReaderAccessibilityMode" },
{ "key": "escape",                "command": "editor.closeCallHierarchy",
                                     "when": "callHierarchyVisible && !config.editor.stablePeek" },
{ "key": "escape",                "command": "editor.closeTypeHierarchy",
                                     "when": "typeHierarchyVisible && !config.editor.stablePeek" },
{ "key": "cmd+down",              "command": "explorer.openAndPassFocus",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus" },
{ "key": "escape",                "command": "filesExplorer.cancelCut",
                                     "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus" },
{ "key": "cmd+c",                 "command": "filesExplorer.copy",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus" },
{ "key": "cmd+x",                 "command": "filesExplorer.cut",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
{ "key": "space",                 "command": "filesExplorer.openFilePreserveFocus",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus" },
{ "key": "home",                  "command": "firstCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus" },
{ "key": "cmd+enter",             "command": "inlineChat.acceptChanges",
                                     "when": "inlineChatHasProvider && inlineChatVisible" },
{ "key": "end",                   "command": "lastCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus" },
{ "key": "delete",                "command": "moveFileToTrash",
                                     "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !inputFocus" },
{ "key": "cmd+backspace",         "command": "moveFileToTrash",
                                     "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !inputFocus" },
{ "key": "right",                 "command": "nextCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus" },
{ "key": "left",                  "command": "previousCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus" },
{ "key": "delete",                "command": "remote.tunnel.closeInline",
                                     "when": "tunnelCloseable && tunnelViewFocus" },
{ "key": "cmd+backspace",         "command": "remote.tunnel.closeInline",
                                     "when": "tunnelCloseable && tunnelViewFocus" },
{ "key": "cmd+c",                 "command": "remote.tunnel.copyAddressInline",
                                     "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
{ "key": "enter",                 "command": "remote.tunnel.label",
                                     "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
{ "key": "enter",                 "command": "renameFile",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
{ "key": "f5",                    "command": "workbench.action.debug.continue",
                                     "when": "debugState == 'stopped'" },
{ "key": "f11",                   "command": "workbench.action.debug.stepInto",
                                     "when": "debugState != 'inactive'" },
{ "key": "shift+escape",          "command": "closeReferenceSearch",
                                     "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus" },
{ "key": "escape",                "command": "closeReferenceSearch",
                                     "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus" },
{ "key": "cmd+up",                "command": "list.stickyScroll.collapse",
                                     "when": "treestickyScrollFocused" },
{ "key": "left",                  "command": "list.stickyScroll.collapse",
                                     "when": "treestickyScrollFocused" },
{ "key": "cmd+down",              "command": "list.stickyScrollselect",
                                     "when": "treestickyScrollFocused" },
{ "key": "enter",                 "command": "list.stickyScrollselect",
                                     "when": "treestickyScrollFocused" },
{ "key": "space",                 "command": "list.stickyScrolltoggleExpand",
                                     "when": "treestickyScrollFocused" },
{ "key": "escape",                "command": "notifications.hideList",
                                     "when": "notificationCenterVisible" },
{ "key": "ctrl+alt+cmd+right",    "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "alt+cmd+right",         "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+right",        "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "cmd+right",             "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+right",        "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "ctrl+right",            "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "alt+right",             "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "right",                 "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "ctrl+-",                "command": "workbench.action.quickInputBack",
                                     "when": "inQuickOpen" },
{ "key": "ctrl+tab",              "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
                                     "when": "inEditorsPicker && inQuickOpen" },
{ "key": "cmd+p",                 "command": "workbench.action.quickOpenNavigateNextInFilePicker",
                                     "when": "inFilesPicker && inQuickOpen" },
{ "key": "ctrl+r",                "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
                                     "when": "inQuickOpen && inRecentFilesPicker" },
{ "key": "ctrl+q",                "command": "workbench.action.quickOpenNavigateNextInViewPicker",
                                     "when": "inQuickOpen && inViewsPicker" },
{ "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
                                     "when": "inEditorsPicker && inQuickOpen" },
{ "key": "shift+cmd+p",           "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
                                     "when": "inFilesPicker && inQuickOpen" },
{ "key": "ctrl+shift+r",          "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
                                     "when": "inQuickOpen && inRecentFilesPicker" },
{ "key": "ctrl+shift+q",          "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
                                     "when": "inQuickOpen && inViewsPicker" },
{ "key": "ctrl+n",                "command": "workbench.action.quickOpenSelectNext",
                                     "when": "inQuickOpen" },
{ "key": "ctrl+p",                "command": "workbench.action.quickOpenSelectPrevious",
                                     "when": "inQuickOpen" },
{ "key": "cmd+r",                 "command": "workbench.action.reloadWindow",
                                     "when": "isDevelopment" },
{ "key": "shift+cmd+f",           "command": "workbench.action.terminal.searchWorkspace",
                                     "when": "terminalFocus && terminalProcessSupported && terminalTextSelected" },
{ "key": "alt+cmd+i",             "command": "workbench.action.toggleDevTools",
                                     "when": "isDevelopment" },
{ "key": "escape",                "command": "notifications.hideToasts",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "cmd+l",                 "command": "windsurf.prioritized.chat.openFromTerminal",
                                     "when": "terminalFocus" },
{ "key": "escape",                "command": "workbench.action.chat.stopListening",
                                     "when": "voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || voiceChatInProgress && scopedVoiceChatInProgress == 'view'" },
{ "key": "escape",                "command": "workbench.action.chat.stopReadChatItemAloud",
                                     "when": "scopedChatSynthesisInProgress" },
{ "key": "escape",                "command": "workbench.action.editorDictation.stop",
                                     "when": "editorDictation.inProgress" },
{ "key": "escape",                "command": "workbench.action.speech.stopReadAloud",
                                     "when": "scopedChatSynthesisInProgress && textToSpeechInProgress" },
{ "key": "f10",                   "command": "extension.node-debug.startWithStopOnEntry",
                                     "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'" },
{ "key": "cmd+k alt+cmd+s",       "command": "git.stageSelectedRanges",
                                     "when": "editorTextFocus && !operationInProgress && resourceScheme == 'file'" },
{ "key": "shift+cmd+v",           "command": "markdown.showPreview",
                                     "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
{ "key": "shift+alt+f12",         "command": "references-view.findReferences",
                                     "when": "editorHasReferenceProvider" },
{ "key": "cmd+l",                 "command": "windsurf.prioritized.chat.open",
                                     "when": "!terminalFocus" },
{ "key": "shift+cmd+l",           "command": "windsurf.prioritized.chat.openNewConversationFromTerminal",
                                     "when": "terminalFocus" },
{ "key": "f11",                   "command": "extension.node-debug.startWithStopOnEntry",
                                     "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'" },
{ "key": "cmd+k cmd+n",           "command": "git.unstageSelectedRanges",
                                     "when": "editorTextFocus && isInDiffEditor && isInDiffRightEditor && !operationInProgress && resourceScheme == 'git'" },
{ "key": "cmd+k v",               "command": "markdown.showPreviewToSide",
                                     "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
{ "key": "f4",                    "command": "references-view.next",
                                     "when": "reference-list.hasResult && references-view.canNavigate" },
{ "key": "cmd+i",                 "command": "windsurf.prioritized.terminalCommand.open",
                                     "when": "terminalFocus && !cascadeUiTerminalFocus" },
{ "key": "cmd+k cmd+r",           "command": "git.revertSelectedRanges",
                                     "when": "editorTextFocus && !operationInProgress && resourceScheme == 'file'" },
{ "key": "shift+f4",              "command": "references-view.prev",
                                     "when": "reference-list.hasResult && references-view.canNavigate" },
{ "key": "cmd+enter",             "command": "windsurf.terminalCommand.run",
                                     "when": "terminalFocus && windsurf.canTriggerTerminalCommandAction" },
{ "key": "shift+alt+h",           "command": "references-view.showCallHierarchy",
                                     "when": "editorHasCallHierarchyProvider" },
{ "key": "alt+enter",             "command": "windsurf.terminalCommand.accept",
                                     "when": "terminalFocus && windsurf.canTriggerTerminalCommandAction" },
{ "key": "cmd+backspace",         "command": "windsurf.terminalCommand.reject",
                                     "when": "terminalFocus && windsurf.canTriggerTerminalCommandAction" },
{ "key": "cmd+i",                 "command": "windsurf.prioritized.command.open",
                                     "when": "editorTextFocus && !windsurf.interactiveCascade.enabled" },
{ "key": "cmd+enter",             "command": "windsurf.command.accept",
                                     "when": "editorTextFocus && windsurf.canAcceptOrRejectCommand && !editorHasSelection" },
{ "key": "cmd+backspace",         "command": "windsurf.command.reject",
                                     "when": "editorTextFocus && windsurf.canAcceptOrRejectCommand && !editorHasSelection" },
{ "key": "shift+cmd+i",           "command": "windsurf.triggerCascade",
                                     "when": "!windsurf.interactiveCascade.enabled" },
{ "key": "cmd+enter",             "command": "windsurf.prioritized.cascadeAcceptAllInFile",
                                     "when": "editorTextFocus && windsurf.canAcceptOrRejectAllCascadeEditsInFile" },
{ "key": "cmd+backspace",         "command": "windsurf.prioritized.cascadeRejectAllInFile",
                                     "when": "editorTextFocus && windsurf.canAcceptOrRejectAllCascadeEditsInFile" },
{ "key": "alt+j",                 "command": "windsurf.prioritized.cascadeFocusNextHunk",
                                     "when": "editorTextFocus && windsurf.canAcceptOrRejectAllCascadeEditsInFile" },
{ "key": "alt+k",                 "command": "windsurf.prioritized.cascadeFocusPreviousHunk",
                                     "when": "editorTextFocus && windsurf.canAcceptOrRejectAllCascadeEditsInFile" },
{ "key": "alt+enter",             "command": "windsurf.prioritized.cascadeAcceptFocusedHunk",
                                     "when": "editorTextFocus && windsurf.canAcceptOrRejectFocusedHunk" },
{ "key": "shift+alt+backspace",   "command": "windsurf.prioritized.cascadeRejectFocusedHunk",
                                     "when": "editorTextFocus && windsurf.canAcceptOrRejectFocusedHunk" },
{ "key": "alt+\\",                "command": "editor.action.inlineSuggest.trigger",
                                     "when": "editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible" },
{ "key": "tab",                   "command": "windsurf.prioritized.supercompleteAccept",
                                     "when": "editorTextFocus && windsurf.richGhostTextShown && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || editorTextFocus && windsurf.sideHintShown && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || editorTextFocus && windsurf.tabActionShown && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || editorTextFocus && inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || editorTextFocus && inlineSuggestionVisible && neovim.init && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' || editorTextFocus && inlineSuggestionVisible && vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && vim.mode == 'Normal'" },
{ "key": "escape",                "command": "windsurf.prioritized.supercompleteEscape",
                                     "when": "inlineSuggestionVisible && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.postApplyDecorationShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.richGhostTextShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.sideHintShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.tabActionShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || inlineSuggestionVisible && !editorTextFocus && !neovim.init && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || inlineSuggestionVisible && !editorTextFocus && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || inlineSuggestionVisible && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' || inlineSuggestionVisible && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && vim.mode == 'Normal' || inlineSuggestionVisible && !neovim.init && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || inlineSuggestionVisible && !neovim.init && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && vim.mode == 'Normal' || inlineSuggestionVisible && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' || inlineSuggestionVisible && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' && vim.mode == 'Normal' || windsurf.postApplyDecorationShown && !editorTextFocus && !neovim.init && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.postApplyDecorationShown && !editorTextFocus && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.postApplyDecorationShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' || windsurf.postApplyDecorationShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && vim.mode == 'Normal' || windsurf.postApplyDecorationShown && !neovim.init && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.postApplyDecorationShown && !neovim.init && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && vim.mode == 'Normal' || windsurf.postApplyDecorationShown && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' || windsurf.postApplyDecorationShown && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' && vim.mode == 'Normal' || windsurf.richGhostTextShown && !editorTextFocus && !neovim.init && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.richGhostTextShown && !editorTextFocus && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.richGhostTextShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' || windsurf.richGhostTextShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && vim.mode == 'Normal' || windsurf.richGhostTextShown && !neovim.init && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.richGhostTextShown && !neovim.init && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && vim.mode == 'Normal' || windsurf.richGhostTextShown && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' || windsurf.richGhostTextShown && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' && vim.mode == 'Normal' || windsurf.sideHintShown && !editorTextFocus && !neovim.init && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.sideHintShown && !editorTextFocus && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.sideHintShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' || windsurf.sideHintShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && vim.mode == 'Normal' || windsurf.sideHintShown && !neovim.init && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.sideHintShown && !neovim.init && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && vim.mode == 'Normal' || windsurf.sideHintShown && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' || windsurf.sideHintShown && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' && vim.mode == 'Normal' || windsurf.tabActionShown && !editorTextFocus && !neovim.init && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.tabActionShown && !editorTextFocus && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.tabActionShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' || windsurf.tabActionShown && !editorTextFocus && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && vim.mode == 'Normal' || windsurf.tabActionShown && !neovim.init && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction || windsurf.tabActionShown && !neovim.init && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && vim.mode == 'Normal' || windsurf.tabActionShown && !suggestWidgetVisible && !vim.active && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' || windsurf.tabActionShown && !suggestWidgetVisible && !windsurf.interactiveCascade.isCursorPosInSuggestedAction && neovim.mode == 'normal' && vim.mode == 'Normal'" },
{ "key": "escape",                "command": "extension.vim_escape",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "shift+cmd+l",           "command": "windsurf.prioritized.chat.openNewConversation",
                                     "when": "!terminalFocus" },
{ "key": "alt+\\",                "command": "windsurf.prioritized.interactiveCascade.editCurrentLocation",
                                     "when": "editorTextFocus && windsurf.interactiveCascade.enabled" },
{ "key": "alt+cmd+\\",            "command": "windsurf.prioritized.interactiveCascade.editCurrentLocationWithInstruction",
                                     "when": "editorTextFocus && windsurf.interactiveCascade.enabled" },
{ "key": "alt+cmd+r",             "command": "windsurf.prioritized.interactiveCascade.refresh",
                                     "when": "editorTextFocus && windsurf.interactiveCascade.enabled" },
{ "key": "alt+cmd+c",             "command": "windsurf.prioritized.interactiveCascade.continue",
                                     "when": "editorTextFocus && windsurf.interactiveCascade.enabled" },
{ "key": "alt+o",                 "command": "windsurf.prioritized.interactiveCascade.acceptAllDiffZones",
                                     "when": "editorTextFocus && windsurf.interactiveCascade.enabled" },
{ "key": "alt+p",                 "command": "windsurf.prioritized.interactiveCascade.toggleMostRecentInactive",
                                     "when": "windsurf.interactiveCascade.enabled" },
{ "key": "alt+l",                 "command": "windsurf.prioritized.interactiveCascade.toggleMostRecentActive",
                                     "when": "windsurf.interactiveCascade.enabled" },
{ "key": "alt+d",                 "command": "windsurf.prioritized.interactiveCascade.debug",
                                     "when": "windsurf.interactiveCascade.enabled" },
{ "key": "alt+cmd+d",             "command": "windsurf.prioritized.interactiveCascade.reset",
                                     "when": "windsurf.interactiveCascade.enabled" },
{ "key": "alt+enter",             "command": "windsurf.cascade.acceptTerminalCommand",
                                     "when": "!editorTextFocus" },
{ "key": "shift+alt+backspace",   "command": "windsurf.cascade.rejectTerminalCommand",
                                     "when": "!editorTextFocus" },
{ "key": "alt+l",                 "command": "windsurf.prioritized.cascadeFocusNextFile",
                                     "when": "editorTextFocus && windsurf.cascadeBarVisible" },
{ "key": "alt+h",                 "command": "windsurf.prioritized.cascadeFocusPreviousFile",
                                     "when": "editorTextFocus && windsurf.cascadeBarVisible" },
{ "key": "alt+cmd+k",             "command": "bookmarks.toggle",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+alt+c i",          "command": "calva.debug.instrument",
                                     "when": "calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "cmd+c",                 "command": "clipboard.copy",
                                     "when": "editorTextFocus" },
{ "key": "alt+x",                 "command": "comment-divider.makeSubHeader",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+space ctrl+shift+space", "command": "cpt.showCommands" },
{ "key": "alt+c p",               "command": "extension.colorHelper.pick",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+/",          "command": "extension.handlebarsWrapComment",
                                     "when": "editorTextFocus" },
{ "key": "alt+h",                 "command": "git.viewFileHistory" },
{ "key": "ctrl+k h",              "command": "handlebars.preview",
                                     "when": "!terminalFocus" },
{ "key": "ctrl+alt+j space",      "command": "joyride.runCode" },
{ "key": "shift+alt+p",           "command": "openapi.preview",
                                     "when": "editorTextFocus && !openapiErrors" },
{ "key": "alt+cmd+p",             "command": "projectManager.listProjects" },
{ "key": "left",                  "command": "restoreEditors.key.left",
                                     "when": "restoreEditors:key:left" },
{ "key": "cmd+i",                 "command": "workbench.action.terminal.chat.start",
                                     "when": "chatIsEnabled && terminalChatAgentRegistered && terminalFocusInAny && terminalHasBeenCreated || chatIsEnabled && terminalChatAgentRegistered && terminalFocusInAny && terminalProcessSupported" },
{ "key": "up",                    "command": "",
                                     "when": "notebookOutputFocused" },
{ "key": "cmd+l",                 "command": "better-line-select.downward",
                                     "when": "editorTextFocus" },
{ "key": "cmd+[",                 "command": "betterOpenEditors.openFileOfCurrentPackage" },
{ "key": "cmd+'",                 "command": "cline.addToChat",
                                     "when": "editorHasSelection" },
{ "key": "shift+cmd+f17",         "command": "command-server.runCommand",
                                     "args": "other" },
{ "key": "shift+cmd+v",           "command": "excel.preview",
                                     "when": "editorLangId == 'excel'" },
{ "key": "alt+,",                 "command": "gitlens.key.alt+,",
                                     "when": "gitlens:key:," },
{ "key": "ctrl+shift+space",      "command": "issue.suggestRefresh",
                                     "when": "suggestWidgetVisible" },
{ "key": "cmd+l cmd+l",           "command": "l13Diff.action.panel.open",
                                     "when": "!textInputFocus" },
{ "key": "ctrl+shift+l",          "command": "lntoggle.toggle" },
{ "key": "cmd+1",                 "command": "openInDefaultBrowser.openInDefaultBrowser",
                                     "when": "resourceExtname == '.pdf' || resourceLangId == 'html' || resourceLangId == 'xml'" },
{ "key": "backspace",             "command": "owlbear.backwardDelete",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "alt+d",                 "command": "plantuml.preview" },
{ "key": "shift+enter",           "command": "python.execSelectionInTerminal",
                                     "when": "editorTextFocus && !findInputFocussed && !isCompositeNotebook && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
{ "key": "alt+q",                 "command": "rewrap.rewrapComment",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+t",           "command": "theme-by-language.setThemeForCurrentFileLanguage" },
{ "key": "ctrl+alt+j",            "command": "vscode-dynamic-layouts.focusNextGroup" },
{ "key": "tab",                   "command": "whichkey.triggerKey",
                                     "when": "whichkeyVisible",
                                     "args": "\t" },
{ "key": "ctrl+enter",            "command": "workbench.action.chat.applyInEditor",
                                     "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput" },
{ "key": "ctrl+enter",            "command": "workbench.action.chat.insertCodeBlock",
                                     "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput" },
{ "key": "alt+cmd+l",             "command": "bookmarks.jumpToNext",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+alt+c ctrl+alt+j", "command": "calva.jackIn",
                                     "when": "calva:keybindingsEnabled && workspaceFolderCount > 0" },
{ "key": "ctrl+enter",            "command": "chat.inlineResourceAnchor.openToSide",
                                     "when": "chatAttachmentResource" },
{ "key": "cmd+x",                 "command": "clipboard.cut",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+space ctrl+a", "command": "cpt.showCommands",
                                     "args": "Clay" },
{ "key": "alt+c c",               "command": "extension.colorHelper.convert",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+alt+p",            "command": "extension.createPartial",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+alt+j enter",      "command": "joyride.evaluateSelection" },
{ "key": "alt+left",              "command": "restoreEditors.key.alt+left",
                                     "when": "restoreEditors:key:alt+left" },
{ "key": "cmd+i",                 "command": "workbench.action.terminal.suggestToggleDetails",
                                     "when": "simpleSuggestWidgetHasFocusedSuggestion && terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || simpleSuggestWidgetHasFocusedSuggestion && terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "ctrl+space",            "command": "workbench.action.terminal.suggestToggleDetails",
                                     "when": "simpleSuggestWidgetHasFocusedSuggestion && terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || simpleSuggestWidgetHasFocusedSuggestion && terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "shift+up",              "command": "",
                                     "when": "notebookOutputFocused" },
{ "key": "shift+cmd+l",           "command": "better-line-select.upward",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+cmd+p",       "command": "command-server.runCommand",
                                     "args": "other" },
{ "key": "shift+alt+x",           "command": "comment-divider.makeMainHeader",
                                     "when": "editorTextFocus" },
{ "key": "shift+cmd+v",           "command": "csv.preview",
                                     "when": "editorLangId == 'csv'" },
{ "key": "alt+.",                 "command": "gitlens.key.alt+.",
                                     "when": "gitlens:key:." },
{ "key": "cmd+s",                 "command": "issue.createIssueFromFile",
                                     "when": "!issues.creatingFromFile && resourceScheme == 'newIssue' && config.files.autoSave != 'off'" },
{ "key": "cmd+d",                 "command": "l13Diff.action.panel.addToFavorites",
                                     "when": "l13DiffFocus" },
{ "key": "alt+left",              "command": "owlbear.backwardMove",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "shift+enter",           "command": "python.execInREPL",
                                     "when": "config.python.REPL.sendToNativeREPL && editorTextFocus && !isCompositeNotebook && !jupyter.ownsSelection && !notebookEditorFocused && editorLangId == 'python'" },
{ "key": "ctrl+alt+k",            "command": "vscode-dynamic-layouts.focusPreviousGroup" },
{ "key": "ctrl+h",                "command": "whichkey.searchBindings",
                                     "when": "whichkeyVisible" },
{ "key": "alt+cmd+j",             "command": "bookmarks.jumpToPrevious",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+alt+c ctrl+alt+c", "command": "calva.connect",
                                     "when": "calva:keybindingsEnabled && workspaceFolderCount > 0" },
{ "key": "shift+cmd+v",           "command": "clipboard.pasteFromClipboard",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+space a f",  "command": "cpt.clay.makeFile",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+alt+j u",          "command": "joyride.runUserScript" },
{ "key": "cmd+left",              "command": "restoreEditors.key.ctrl+left",
                                     "when": "restoreEditors:key:ctrl+left" },
{ "key": "down",                  "command": "",
                                     "when": "notebookOutputFocused" },
{ "key": "cmd+'",                 "command": "cline.focusChatInput",
                                     "when": "!editorHasSelection" },
{ "key": "shift+cmd+f17",         "command": "command-server.runCommand",
                                     "when": "editorTextFocus",
                                     "args": "textEditor" },
{ "key": "alt+y",                 "command": "comment-divider.insertSolidLine",
                                     "when": "editorTextFocus" },
{ "key": "shift+cmd+v",           "command": "csv.preview",
                                     "when": "editorLangId == 'tsv'" },
{ "key": "alt+enter",             "command": "gitlens.key.alt+enter",
                                     "when": "gitlens:key:alt+enter" },
{ "key": "cmd+enter",             "command": "issue.createIssueFromFile",
                                     "when": "!issues.creatingFromFile && resourceScheme == 'newIssue'" },
{ "key": "ctrl+alt+c",            "command": "owlbear.copy",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "enter",                 "command": "python.execInREPLEnter",
                                     "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !inlineChatFocused && !notebookCellListFocused && activeEditor == 'workbench.editor.repl'" },
{ "key": "ctrl+shift+j",          "command": "vscode-dynamic-layouts.swapNextGroup" },
{ "key": "cmd+l cmd+f",           "command": "workbench.view.extension.l13Diff",
                                     "when": "viewContainer.workbench.view.extension.l13Diff.enabled && !textInputFocus" },
{ "key": "shift+alt+k",           "command": "bookmarks.shrinkSelection",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+alt+c ctrl+alt+r", "command": "calva.showReplMenu" },
{ "key": "ctrl+shift+space a q f", "command": "cpt.clay.makeFileQuarto",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+alt+j w",          "command": "joyride.runWorkspaceScript" },
{ "key": "right",                 "command": "restoreEditors.key.right",
                                     "when": "restoreEditors:key:right" },
{ "key": "shift+down",            "command": "",
                                     "when": "notebookOutputFocused" },
{ "key": "shift+alt+cmd+p",       "command": "command-server.runCommand",
                                     "when": "editorTextFocus",
                                     "args": "textEditor" },
{ "key": "shift+cmd+v",           "command": "csv.preview",
                                     "when": "editorLangId == 'csv (semicolon)'" },
{ "key": "alt+left",              "command": "gitlens.key.alt+left",
                                     "when": "gitlens:key:alt+left" },
{ "key": "cmd+l cmd+o",           "command": "l13Diff.action.output.show",
                                     "when": "l13DiffFocus" },
{ "key": "ctrl+alt+x",            "command": "owlbear.cut",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "cmd+k m",               "command": "pr.makeSuggestion",
                                     "when": "commentEditorFocused" },
{ "key": "enter",                 "command": "python.execInInteractiveWindowEnter",
                                     "when": "isCompositeNotebook && !config.interactiveWindow.executeWithShiftEnter && !inlineChatFocused && !notebookCellListFocused && activeEditor == 'workbench.editor.interactive'" },
{ "key": "ctrl+shift+k",          "command": "vscode-dynamic-layouts.swapPreviousGroup" },
{ "key": "shift+alt+l",           "command": "bookmarks.expandSelectionToNext",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+alt+c alt+c",      "command": "calva.connectNonProjectREPL",
                                     "when": "calva:keybindingsEnabled" },
{ "key": "ctrl+shift+space a r f", "command": "cpt.clay.makeFileRevealJs",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+right",             "command": "restoreEditors.key.alt+right",
                                     "when": "restoreEditors:key:alt+right" },
{ "key": "enter",                 "command": "",
                                     "when": "notebookOutputFocused" },
{ "key": "shift+cmd+f17",         "command": "command-server.runCommand",
                                     "when": "terminalFocus",
                                     "args": "terminal" },
{ "key": "shift+cmd+v",           "command": "csv.preview",
                                     "when": "editorLangId == 'csv (pipe)'" },
{ "key": "alt+right",             "command": "gitlens.key.alt+right",
                                     "when": "gitlens:key:alt+right" },
{ "key": "cmd+c",                 "command": "l13Diff.action.panel.compare",
                                     "when": "l13DiffFocus && !inputFocus && !l13DiffInputFocus && !l13DiffSearchFocus" },
{ "key": "ctrl+down",             "command": "owlbear.downwardMove",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "ctrl+alt+p",            "command": "vscode-dynamic-layouts.dynamicQuickOpen" },
{ "key": "shift+alt+j",           "command": "bookmarks.expandSelectionToPrevious",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+alt+c ctrl+alt+s", "command": "calva.toggleCLJCSession",
                                     "when": "calva:connected && calva:keybindingsEnabled" },
{ "key": "ctrl+shift+space a c",  "command": "cpt.clay.makeCurrentForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "cmd+right",             "command": "restoreEditors.key.ctrl+right",
                                     "when": "restoreEditors:key:ctrl+right" },
{ "key": "ctrl+enter",            "command": "",
                                     "when": "notebookOutputFocused" },
{ "key": "shift+alt+cmd+p",       "command": "command-server.runCommand",
                                     "when": "terminalFocus",
                                     "args": "terminal" },
{ "key": "ctrl+enter",            "command": "gitlens.key.ctrl+enter",
                                     "when": "gitlens:key:ctrl+enter" },
{ "key": "alt+cmd+c",             "command": "l13Diff.action.panel.compareAll",
                                     "when": "l13DiffFocus && !inputFocus && !l13DiffInputFocus && !l13DiffSearchFocus" },
{ "key": "alt+backspace",         "command": "owlbear.forceBackwardDelete",
                                     "when": "editorTextFocus && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "ctrl+alt+q",            "command": "vscode-dynamic-layouts.closeGroup" },
{ "key": "ctrl+alt+c ctrl+alt+b", "command": "calva.switchCljsBuild",
                                     "when": "calva:connected && calva:keybindingsEnabled" },
{ "key": "ctrl+shift+space a q c", "command": "cpt.clay.makeCurrentFormQuarto",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+enter",             "command": "restoreEditors.key.alt+enter",
                                     "when": "restoreEditors:key:alt+enter" },
{ "key": "m",                     "command": "",
                                     "when": "notebookOutputFocused" },
{ "key": "cmd+left",              "command": "gitlens.key.ctrl+left",
                                     "when": "gitlens:key:ctrl+left" },
{ "key": "cmd+backspace",         "command": "l13Diff.action.list.delete",
                                     "when": "l13DiffFocus && l13DiffListFocus" },
{ "key": "alt+delete",            "command": "owlbear.forceForwardDelete",
                                     "when": "editorTextFocus && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "ctrl+alt+c ctrl+s",     "command": "calva.selectCurrentForm",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space ctrl+shift+a", "command": "cpt.clay.makeTopLevelForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "cmd+right",             "command": "gitlens.key.ctrl+right",
                                     "when": "gitlens:key:ctrl+right" },
{ "key": "cmd+f",                 "command": "l13Diff.action.search.open",
                                     "when": "l13DiffFocus" },
{ "key": "ctrl+alt+left",         "command": "owlbear.forwardBarf",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "ctrl+enter",            "command": "restoreEditors.key.ctrl+enter",
                                     "when": "restoreEditors:key:ctrl+enter" },
{ "key": "escape",                "command": "calva.clearInlineResults",
                                     "when": "calva:hasInlineResults && calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorHasSelection && !editorReadOnly && !hasOtherSuggestions && !inlineSuggestionVisible && !parameterHintsVisible && !selectionAnchorSet && !suggestWidgetVisible && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space a a",  "command": "cpt.clay.makeTopLevelForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "cmd+a",                 "command": "l13Diff.action.actions.selectAllEntries",
                                     "when": "l13DiffFocus && !inputFocus && !l13DiffInputFocus && !l13DiffSearchFocus" },
{ "key": "delete",                "command": "owlbear.forwardDelete",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "escape",                "command": "restoreEditors.key.escape",
                                     "when": "editorTextFocus && restoreEditors:key:escape && !findWidgetVisible && !isInEmbeddedEditor && !quickFixWidgetVisible && !renameInputVisible && !suggestWidgetVisible" },
{ "key": "ctrl+shift+g",          "command": "workbench.view.scm",
                                     "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+enter",            "command": "calva.evaluateSelection",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !suggestWidgetVisible && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space a q a", "command": "cpt.clay.makeTopLevelFormQuarto",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "escape",                "command": "gitlens.key.escape",
                                     "when": "editorTextFocus && gitlens:key:escape && !codeActionMenuVisible && !findWidgetVisible && !isInEmbeddedEditor && !parameterHintsVisible && !quickFixWidgetVisible && !referenceSearchVisible && !renameInputVisible && !suggestWidgetVisible" },
{ "key": "cmd+s",                 "command": "l13Diff.action.inputs.swap",
                                     "when": "l13DiffFocus" },
{ "key": "alt+right",             "command": "owlbear.forwardMove",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "ctrl+shift+enter",      "command": "calva.evaluateEnclosingForm",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space a b",  "command": "cpt.clay.browse",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "left",                  "command": "gitlens.key.left",
                                     "when": "gitlens:key:left" },
{ "key": "alt+cmd+s",             "command": "l13Diff.action.inputs.swapAll",
                                     "when": "l13DiffFocus" },
{ "key": "ctrl+alt+right",        "command": "owlbear.forwardSlurp",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "ctrl+alt+enter",        "command": "calva.evaluateToCursor",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasSelection && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space a w",  "command": "cpt.clay.watch",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "right",                 "command": "gitlens.key.right",
                                     "when": "gitlens:key:right" },
{ "key": "escape",                "command": "l13Diff.action.list.unselect",
                                     "when": "l13DiffFocus && l13DiffListFocus" },
{ "key": "ctrl+k",                "command": "owlbear.kill",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "ctrl+alt+enter",        "command": "calva.evaluateSelectionToSelectionEnd",
                                     "when": "calva:keybindingsEnabled && editorHasSelection && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space a d",  "command": "clay.loadClayDependency",
                                     "when": "false" },
{ "key": "alt+cmd+g shift+,",     "command": "gitlens.diffLineWithPrevious",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'" },
{ "key": "escape",                "command": "l13Diff.action.menu.close",
                                     "when": "l13DiffFocus && l13DiffInputFocus" },
{ "key": "ctrl+alt+p ctrl+alt+r", "command": "owlbear.raise",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "shift+alt+enter",       "command": "calva.evaluateTopLevelFormToCursor",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space ctrl+shift+d", "command": "cpt.showCommands",
                                     "args": "tools-deps" },
{ "key": "shift+alt+,",           "command": "gitlens.diffLineWithPrevious",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && resource in 'gitlens:tabs:tracked'" },
{ "key": "escape",                "command": "l13Diff.action.search.close",
                                     "when": "l13DiffFocus && l13DiffSearchFocus" },
{ "key": "ctrl+alt+c ctrl+s",     "command": "owlbear.select",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "ctrl+shift+alt+enter",  "command": "calva.evaluateStartOfFileToCursor",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space d d",  "command": "cpt.deps.loadDependencies",
                                     "when": "calva:activated" },
{ "key": "alt+.",                 "command": "gitlens.diffWithNext",
                                     "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'alternate' && resourceScheme =~ /^(gitlens|git|pr)$/" },
{ "key": "alt+cmd+c",             "command": "l13Diff.action.search.toggleFindCaseSensitive",
                                     "when": "l13DiffFocus && l13DiffSearchFocus" },
{ "key": "ctrl+alt+s",            "command": "owlbear.splice",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "ctrl+shift+t t",        "command": "calva.tapSelection",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space d ctrl+s", "command": "cpt.deps.loadSelectedDependencies",
                                     "when": "calva:activated && editorHasSelection" },
{ "key": "alt+cmd+g .",           "command": "gitlens.diffWithNext",
                                     "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/" },
{ "key": "alt+cmd+x",             "command": "l13Diff.action.search.toggleFindConflicts",
                                     "when": "l13DiffFocus" },
{ "key": "ctrl+up",               "command": "owlbear.upwardMove",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId in 'owlbear:supportedLanguages'" },
{ "key": "ctrl+shift+t space",    "command": "calva.tapCurrentTopLevelForm",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space d s",  "command": "cpt.deps.syncDeps",
                                     "when": "calva:activated" },
{ "key": "alt+,",                 "command": "gitlens.diffWithPrevious",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && resource in 'gitlens:tabs:tracked'" },
{ "key": "alt+cmd+f",             "command": "l13Diff.action.search.toggleFindFiles",
                                     "when": "l13DiffFocus" },
{ "key": "ctrl+alt+c ctrl+alt+d", "command": "calva.interruptAllEvaluations",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space ctrl+shift+s", "command": "cpt.showCommands",
                                     "args": "Snitch" },
{ "key": "alt+cmd+g ,",           "command": "gitlens.diffWithPrevious",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'" },
{ "key": "alt+cmd+d",             "command": "l13Diff.action.search.toggleFindFolders",
                                     "when": "l13DiffFocus" },
{ "key": "alt+enter",             "command": "calva.evaluateCurrentTopLevelForm",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space s l",  "command": "cpt.snitch.loadSnitchDependency",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+cmd+g shift+.",     "command": "gitlens.diffWithWorking",
                                     "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/" },
{ "key": "alt+cmd+o",             "command": "l13Diff.action.search.toggleFindOthers",
                                     "when": "l13DiffFocus" },
{ "key": "enter",                 "command": "calva.evaluateReplWindowForm",
                                     "when": "calva:keybindingsEnabled && calva:outputWindowActive && calva:replWindowSubmitOnEnter && editorTextFocus && !suggestWidgetVisible" },
{ "key": "ctrl+shift+space s t",  "command": "cpt.snitch.instrumentTopLevelForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "shift+alt+.",           "command": "gitlens.diffWithWorking",
                                     "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'alternate' && resourceScheme =~ /^(gitlens|git|pr)$/" },
{ "key": "alt+cmd+r",             "command": "l13Diff.action.search.toggleFindRegularExpression",
                                     "when": "l13DiffFocus && l13DiffSearchFocus" },
{ "key": "ctrl+alt+c r",          "command": "calva.evaluateSelectionReplace",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space s f",  "command": "cpt.snitch.instrumentCurrentForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+/",                 "command": "gitlens.gitCommands",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "alt+cmd+l",             "command": "l13Diff.action.search.toggleFindSymbolicLinks",
                                     "when": "l13DiffFocus" },
{ "key": "ctrl+alt+c c",          "command": "calva.evaluateSelectionAsComment",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space s r",  "command": "cpt.snitch.getSnitchedDefnResults",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+cmd+g /",           "command": "gitlens.gitCommands",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "alt+cmd+4",             "command": "l13Diff.action.views.toggleShowAllCreated",
                                     "when": "l13DiffFocus && l13DiffListFocus" },
{ "key": "ctrl+alt+c ctrl+space", "command": "calva.evaluateTopLevelFormAsComment",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space s c",  "command": "cpt.snitch.reconstructLastDefnCallToClipboard",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+c",                 "command": "gitlens.showQuickCommitFileDetails",
                                     "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "alt+cmd+2",             "command": "l13Diff.action.views.toggleShowAllDeleted",
                                     "when": "l13DiffFocus && l13DiffListFocus" },
{ "key": "ctrl+alt+c ctrl+alt+p", "command": "calva.printLastStacktrace",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space ctrl+shift+p", "command": "cpt.showCommands",
                                     "args": "Performance" },
{ "key": "alt+cmd+g c",           "command": "gitlens.showQuickCommitFileDetails",
                                     "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "alt+cmd+5",             "command": "l13Diff.action.views.toggleShowAllIgnored",
                                     "when": "l13DiffFocus && l13DiffListFocus" },
{ "key": "ctrl+alt+c ctrl+c",     "command": "calva.copyLastResults",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space p d l", "command": "cpt.performance.loadDecompilerDependency",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+h",                 "command": "gitlens.showQuickFileHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "alt+cmd+3",             "command": "l13Diff.action.views.toggleShowAllModified",
                                     "when": "l13DiffFocus && l13DiffListFocus" },
{ "key": "ctrl+alt+c enter",      "command": "calva.loadFile",
                                     "when": "calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space p d t", "command": "cpt.performance.decompileTopLevelForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+cmd+g h",           "command": "gitlens.showQuickFileHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "alt+cmd+1",             "command": "l13Diff.action.views.toggleShowAllUnchanged",
                                     "when": "l13DiffFocus && l13DiffListFocus" },
{ "key": "ctrl+alt+c p",          "command": "calva.togglePrettyPrint",
                                     "when": "calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space p d u", "command": "cpt.performance.decompileTopLevelFormWithUncheckedMath",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+cmd+g shift+h",     "command": "gitlens.showQuickRepoHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+alt+o s",          "command": "calva.toggleEvaluationSendCodeToOutputWindow",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space p d s", "command": "cpt.performance.decompileSelection",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "shift+alt+h",           "command": "gitlens.showQuickRepoHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+alt+c ctrl+u",     "command": "calva.requireREPLUtilities",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space p d a", "command": "cpt.performance.disassembleTopLevelForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+s",                 "command": "gitlens.showQuickRepoStatus",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+alt+c t",          "command": "calva.runNamespaceTests",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space p c l", "command": "cpt.performance.loadCriteriumDependency",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+cmd+g s",           "command": "gitlens.showQuickRepoStatus",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+alt+c shift+t",    "command": "calva.runAllTests",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space p c t", "command": "cpt.performance.quickBenchTopLevelForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+cmd+g shift+b",     "command": "gitlens.toggleCodeLens",
                                     "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+alt+c ctrl+t",     "command": "calva.rerunTests",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space p c c", "command": "cpt.performance.quickBenchCurrentForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "shift+alt+b",           "command": "gitlens.toggleCodeLens",
                                     "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+alt+c ctrl+alt+t", "command": "calva.runTestUnderCursor",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "ctrl+shift+space p t t", "command": "cpt.performance.timeTopLevelForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+b",                 "command": "gitlens.toggleFileBlame",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && resource in 'gitlens:tabs:blameable'" },
{ "key": "ctrl+shift+space p t c", "command": "cpt.performance.timeCurrentForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "alt+cmd+g b",           "command": "gitlens.toggleFileBlame",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:blameable'" },
{ "key": "ctrl+alt+p ctrl+alt+m", "command": "paredit.togglemode",
                                     "when": "calva:keybindingsEnabled && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space p p l", "command": "cpt.performance.loadProfilerDependency",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "cmd+c",                 "command": "gitlens.views.branches.copy",
                                     "when": "focusedView == 'gitlens.views.branches'" },
{ "key": "ctrl+left",             "command": "paredit.backwardSexp",
                                     "when": "calva:cursorBeforeComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space p p t", "command": "cpt.performance.profileTopLevelForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "cmd+c",                 "command": "gitlens.views.commits.copy",
                                     "when": "focusedView == 'gitlens.views.commits'" },
{ "key": "alt+left",              "command": "paredit.backwardSexp",
                                     "when": "calva:cursorBeforeComment && editorLangId == 'clojure' || calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space p p c", "command": "cpt.performance.profileCurrentForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "cmd+c",                 "command": "gitlens.views.contributors.copy",
                                     "when": "focusedView == 'gitlens.views.contributors'" },
{ "key": "ctrl+right",            "command": "paredit.forwardSexp",
                                     "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space p p u", "command": "cpt.performance.startProfilerUI",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "cmd+c",                 "command": "gitlens.views.drafts.copy",
                                     "when": "focusedView == 'gitlens.views.drafts'" },
{ "key": "alt+right",             "command": "paredit.forwardSexp",
                                     "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space ctrl+shift+x", "command": "cpt.showCommands",
                                     "args": "Dataspex" },
{ "key": "cmd+c",                 "command": "gitlens.views.fileHistory.copy",
                                     "when": "focusedView == 'gitlens.views.fileHistory'" },
{ "key": "ctrl+down",             "command": "paredit.forwardDownSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space x l",  "command": "cpt.dataspex.loadDataspexDependency",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "cmd+c",                 "command": "gitlens.views.lineHistory.copy",
                                     "when": "focusedView == 'gitlens.views.lineHistory'" },
{ "key": "ctrl+alt+up",           "command": "paredit.backwardDownSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space x t",  "command": "cpt.dataspex.inspectTopLevelForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "cmd+c",                 "command": "gitlens.views.pullRequest.copy",
                                     "when": "focusedView == 'gitlens.views.pullRequest'" },
{ "key": "ctrl+alt+down",         "command": "paredit.forwardUpSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space x c",  "command": "cpt.dataspex.inspectCurrentForm",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "cmd+c",                 "command": "gitlens.views.remotes.copy",
                                     "when": "focusedView == 'gitlens.views.remotes'" },
{ "key": "ctrl+up",               "command": "paredit.backwardUpSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space x e",  "command": "cpt.dataspex.openInspectorInEditorView",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "cmd+c",                 "command": "gitlens.views.repositories.copy",
                                     "when": "focusedView == 'gitlens.views.repositories'" },
{ "key": "ctrl+end",              "command": "paredit.closeList",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space x i",  "command": "cpt.dataspex.openInspectorPanelView",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "3",                     "command": "gitlens.views.scm.grouped.branches",
                                     "when": "config.gitlens.views.scm.grouped.views.branches && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'" },
{ "key": "ctrl+home",             "command": "paredit.openList",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space x b",  "command": "cpt.dataspex.connectRemoteInspector",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "1",                     "command": "gitlens.views.scm.grouped.commits",
                                     "when": "config.gitlens.views.scm.grouped.views.commits && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'" },
{ "key": "shift+alt+right",       "command": "paredit.selectForwardSexp",
                                     "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorAfterComment && !calva:cursorBeforeComment && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+space x s",  "command": "cpt.dataspex.inspectRemote",
                                     "when": "editorTextFocus && editorLangId == 'clojure'" },
{ "key": "7",                     "command": "gitlens.views.scm.grouped.contributors",
                                     "when": "config.gitlens.views.scm.grouped.views.contributors && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'" },
{ "key": "ctrl+shift+k",          "command": "paredit.selectRight",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !selectionAnchorSet && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "8",                     "command": "gitlens.views.scm.grouped.fileHistory",
                                     "when": "config.gitlens.views.scm.grouped.views.fileHistory && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'" },
{ "key": "shift+alt+left",        "command": "paredit.selectBackwardSexp",
                                     "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorAfterComment && !calva:cursorBeforeComment && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "9",                     "command": "gitlens.views.scm.grouped.launchpad",
                                     "when": "config.gitlens.views.scm.grouped.views.launchpad && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'" },
{ "key": "ctrl+shift+down",       "command": "paredit.selectForwardDownSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "4",                     "command": "gitlens.views.scm.grouped.remotes",
                                     "when": "config.gitlens.views.scm.grouped.views.remotes && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'" },
{ "key": "ctrl+shift+alt+up",     "command": "paredit.selectBackwardDownSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "0",                     "command": "gitlens.views.scm.grouped.searchAndCompare",
                                     "when": "config.gitlens.views.scm.grouped.views.searchAndCompare && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'" },
{ "key": "ctrl+shift+alt+down",   "command": "paredit.selectForwardUpSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "5",                     "command": "gitlens.views.scm.grouped.stashes",
                                     "when": "config.gitlens.views.scm.grouped.views.stashes && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'" },
{ "key": "ctrl+shift+up",         "command": "paredit.selectBackwardUpSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "6",                     "command": "gitlens.views.scm.grouped.tags",
                                     "when": "config.gitlens.views.scm.grouped.views.tags && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'" },
{ "key": "ctrl+shift+end",        "command": "paredit.selectCloseList",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "2",                     "command": "gitlens.views.scm.grouped.worktrees",
                                     "when": "config.gitlens.views.scm.grouped.views.worktrees && !gitlens:views:scm:grouped:welcome && focusedView == 'gitlens.views.scm.grouped'" },
{ "key": "ctrl+shift+home",       "command": "paredit.selectOpenList",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "cmd+c",                 "command": "gitlens.views.searchAndCompare.copy",
                                     "when": "focusedView == 'gitlens.views.searchAndCompare'" },
{ "key": "ctrl+alt+w space",      "command": "paredit.rangeForDefun",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "cmd+c",                 "command": "gitlens.views.stashes.copy",
                                     "when": "focusedView == 'gitlens.views.stashes'" },
{ "key": "ctrl+w",                "command": "paredit.sexpRangeExpansion",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "cmd+c",                 "command": "gitlens.views.tags.copy",
                                     "when": "focusedView == 'gitlens.views.tags'" },
{ "key": "ctrl+shift+w",          "command": "paredit.sexpRangeContraction",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "cmd+c",                 "command": "gitlens.views.workspaces.copy",
                                     "when": "focusedView == 'gitlens.views.workspaces'" },
{ "key": "ctrl+alt+right",        "command": "paredit.slurpSexpForward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "cmd+c",                 "command": "gitlens.views.worktrees.copy",
                                     "when": "focusedView == 'gitlens.views.worktrees'" },
{ "key": "ctrl+shift+alt+left",   "command": "paredit.slurpSexpBackward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+alt+left",         "command": "paredit.barfSexpForward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+right",  "command": "paredit.barfSexpBackward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+alt+s",            "command": "paredit.spliceSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+s",          "command": "paredit.splitSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+j",          "command": "paredit.joinSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+alt+p ctrl+alt+r", "command": "paredit.raiseSexp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+alt+t",            "command": "paredit.transpose",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+b",      "command": "paredit.dragSexprBackward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+f",      "command": "paredit.dragSexprForward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "alt+up",                "command": "paredit.dragSexprBackward",
                                     "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "alt+down",              "command": "paredit.dragSexprForward",
                                     "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+u",      "command": "paredit.dragSexprBackwardUp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+d",      "command": "paredit.dragSexprForwardDown",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+k",      "command": "paredit.dragSexprForwardUp",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+j",      "command": "paredit.dragSexprBackwardDown",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+c",          "command": "paredit.convolute",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+k",                "command": "paredit.killRight",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !selectionAnchorSet && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "cmd+backspace",         "command": "paredit.killLeft",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !selectionAnchorSet && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+delete",     "command": "paredit.killSexpForward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+alt+backspace",    "command": "paredit.killSexpBackward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+delete",           "command": "paredit.killListForward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+backspace",        "command": "paredit.killListBackward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+delete", "command": "paredit.spliceSexpKillForward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+backspace", "command": "paredit.spliceSexpKillBackward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+p",      "command": "paredit.wrapAroundParens",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+s",      "command": "paredit.wrapAroundSquare",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+c",      "command": "paredit.wrapAroundCurly",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+shift+alt+q",      "command": "paredit.wrapAroundQuote",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+alt+r ctrl+alt+p", "command": "paredit.rewrapParens",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+alt+r ctrl+alt+s", "command": "paredit.rewrapSquare",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+alt+r ctrl+alt+c", "command": "paredit.rewrapCurly",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+alt+r ctrl+alt+h", "command": "paredit.rewrapSet",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "ctrl+alt+r ctrl+alt+q", "command": "paredit.rewrapQuote",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/" },
{ "key": "delete",                "command": "paredit.deleteForward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'" },
{ "key": "backspace",             "command": "paredit.deleteBackward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'" },
{ "key": "alt+delete",            "command": "paredit.forceDeleteForward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'" },
{ "key": "alt+backspace",         "command": "paredit.forceDeleteBackward",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'" },
{ "key": "tab",                   "command": "calva-fmt.formatCurrentForm",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !inSnippetMode && !inlineSuggestionVisible && !suggestWidgetVisible && editorLangId == 'clojure'" },
{ "key": "ctrl+alt+l",            "command": "calva-fmt.alignCurrentForm",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'" },
{ "key": "ctrl+alt+p i",          "command": "calva-fmt.inferParens",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'" },
{ "key": "ctrl+i",                "command": "calva-fmt.tabIndent",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'" },
{ "key": "shift+tab",             "command": "calva-fmt.tabDedent",
                                     "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'" },
{ "key": "ctrl+alt+c f",          "command": "calva.openFiddleForSourceFile",
                                     "when": "calva:keybindingsEnabled && !calva:activeEditorIsFiddle" },
{ "key": "ctrl+alt+c ctrl+alt+f", "command": "calva.evaluateFiddleForSourceFile",
                                     "when": "calva:connected && calva:keybindingsEnabled && !calva:activeEditorIsFiddle" },
{ "key": "ctrl+alt+c f",          "command": "calva.openSourceFileForFiddle",
                                     "when": "calva:activeEditorIsFiddle && calva:keybindingsEnabled" },
{ "key": "ctrl+alt+o o",          "command": "calva.showResultOutputDestination",
                                     "when": "calva:keybindingsEnabled" },
{ "key": "ctrl+alt+o c",          "command": "calva.showOutputChannel",
                                     "when": "calva:keybindingsEnabled" },
{ "key": "ctrl+alt+o t",          "command": "calva.showOutputTerminal",
                                     "when": "calva:keybindingsEnabled" },
{ "key": "ctrl+alt+o r",          "command": "calva.showReplWindow",
                                     "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive" },
{ "key": "ctrl+alt+o v",          "command": "calva.showReplOutputView",
                                     "when": "calva:keybindingsEnabled" },
{ "key": "ctrl+alt+o r",          "command": "calva.showFileForOutputWindowNS",
                                     "when": "calva:connected && calva:keybindingsEnabled && calva:outputWindowActive" },
{ "key": "ctrl+alt+o i",          "command": "calva.revealInspector",
                                     "when": "calva:keybindingsEnabled" },
{ "key": "ctrl+alt+c n",          "command": "calva.setOutputWindowNamespace",
                                     "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive && editorLangId == 'clojure'" },
{ "key": "ctrl+alt+c ctrl+alt+e", "command": "calva.sendCurrentFormToOutputWindow",
                                     "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive && editorLangId == 'clojure'" },
{ "key": "ctrl+alt+c ctrl+alt+space", "command": "calva.sendCurrentTopLevelFormToOutputWindow",
                                     "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive && editorLangId == 'clojure'" },
{ "key": "alt+up",                "command": "calva.showPreviousReplHistoryEntry",
                                     "when": "calva:connected && calva:keybindingsEnabled && calva:outputWindowActive && calva:replHistoryCommandsActive && editorLangId == 'clojure'" },
{ "key": "alt+down",              "command": "calva.showNextReplHistoryEntry",
                                     "when": "calva:connected && calva:keybindingsEnabled && calva:outputWindowActive && calva:replHistoryCommandsActive && editorLangId == 'clojure'" },
{ "key": "ctrl+alt+o d",          "command": "calva.printClojureDocsToOutputWindow",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "ctrl+alt+r d",          "command": "calva.printClojureDocsToRichComment",
                                     "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "ctrl+alt+space enter",  "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "enter" },
{ "key": "ctrl+alt+space ,",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "," },
{ "key": "ctrl+alt+space .",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "." },
{ "key": "ctrl+alt+space -",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "-" },
{ "key": "ctrl+alt+space backspace", "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "backspace" },
{ "key": "ctrl+alt+space left",   "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "left" },
{ "key": "ctrl+alt+space right",  "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "right" },
{ "key": "ctrl+alt+space up",     "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "up" },
{ "key": "ctrl+alt+space down",   "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "down" },
{ "key": "ctrl+alt+space tab",    "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "tab" },
{ "key": "ctrl+alt+space 0",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "0" },
{ "key": "ctrl+alt+space 1",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "1" },
{ "key": "ctrl+alt+space 2",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "2" },
{ "key": "ctrl+alt+space 3",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "3" },
{ "key": "ctrl+alt+space 4",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "4" },
{ "key": "ctrl+alt+space 5",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "5" },
{ "key": "ctrl+alt+space 6",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "6" },
{ "key": "ctrl+alt+space 7",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "7" },
{ "key": "ctrl+alt+space 8",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "8" },
{ "key": "ctrl+alt+space 9",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "9" },
{ "key": "ctrl+alt+space a",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "a" },
{ "key": "ctrl+alt+space b",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "b" },
{ "key": "ctrl+alt+space c",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "c" },
{ "key": "ctrl+alt+space d",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "d" },
{ "key": "ctrl+alt+space e",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "e" },
{ "key": "ctrl+alt+space f",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "f" },
{ "key": "ctrl+alt+space g",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "g" },
{ "key": "ctrl+alt+space h",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "h" },
{ "key": "ctrl+alt+space i",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "i" },
{ "key": "ctrl+alt+space j",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "j" },
{ "key": "ctrl+alt+space k",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "k" },
{ "key": "ctrl+alt+space l",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "l" },
{ "key": "ctrl+alt+space m",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "m" },
{ "key": "ctrl+alt+space n",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "n" },
{ "key": "ctrl+alt+space o",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "o" },
{ "key": "ctrl+alt+space p",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "p" },
{ "key": "ctrl+alt+space q",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "q" },
{ "key": "ctrl+alt+space r",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "r" },
{ "key": "ctrl+alt+space s",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "s" },
{ "key": "ctrl+alt+space t",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "t" },
{ "key": "ctrl+alt+space u",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "u" },
{ "key": "ctrl+alt+space v",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "v" },
{ "key": "ctrl+alt+space w",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "w" },
{ "key": "ctrl+alt+space x",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "x" },
{ "key": "ctrl+alt+space y",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "y" },
{ "key": "ctrl+alt+space z",      "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled",
                                     "args": "z" },
{ "key": "ctrl+alt+space space",  "command": "calva.runCustomREPLCommand",
                                     "when": "calva:connected && calva:keybindingsEnabled" },
{ "key": "ctrl+alt+r c",          "command": "paredit.addRichComment",
                                     "when": "calva:keybindingsEnabled && editorLangId == 'clojure'" },
{ "key": "tab",                   "command": "windsurf.interactiveCascade.acceptSuggestedAction",
                                     "when": "editorTextFocus && windsurf.interactiveCascade.isCursorPosInSuggestedAction" },
{ "key": "escape",                "command": "windsurf.interactiveCascade.rejectSuggestedAction",
                                     "when": "editorTextFocus && windsurf.interactiveCascade.isCursorPosInSuggestedAction" },
{ "key": "shift+cmd+i",           "command": "windsurf.interactiveCascade.focusEditInstruction",
                                     "when": "windsurf.interactiveCascade.enabled && !editorReadonly" },
{ "key": "cmd+.",                 "command": "acceptSelectedCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "enter",                 "command": "acceptSelectedCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "shift+escape",          "command": "hideCodeActionWidget",
                                     "when": "codeActionMenuVisible" },
{ "key": "escape",                "command": "hideCodeActionWidget",
                                     "when": "codeActionMenuVisible" },
{ "key": "cmd+enter",             "command": "previewSelectedCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "ctrl+n",                "command": "selectNextCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "cmd+down",              "command": "selectNextCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "down",                  "command": "selectNextCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "ctrl+p",                "command": "selectPrevCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "cmd+up",                "command": "selectPrevCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "up",                    "command": "selectPrevCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "cmd+,",                 "command": "workbench.action.openWindsurfSettings" },
{ "key": "escape",                "command": "diffEditor.exitCompareMove",
                                     "when": "comparingMovedCode" }
]


// Here are other available commands: 
// - acceptSelectedSuggestionOnEnter
// - acceptSnippet
// - accessibility.announcement.help
// - add-import-to-namespace
// - add-missing-import
// - add-missing-libspec
// - add-require-suggestion
// - addRootFolder
// - andreas.copyFilename
// - andreas.decrement
// - andreas.duplicateFile
// - andreas.executeCommands
// - andreas.focusTab
// - andreas.formatAllComments
// - andreas.formatComments
// - andreas.formatSelectedFiles
// - andreas.formatWorkspaceFiles
// - andreas.generateRange
// - andreas.getClassName
// - andreas.getDictationContext
// - andreas.getDocumentText
// - andreas.getFilename
// - andreas.getGitFileURL
// - andreas.getGitIssuesURL
// - andreas.getGitNewIssueURL
// - andreas.getGitPullRequestsURL
// - andreas.getGitRepoURL
// - andreas.getOpenTagName
// - andreas.getSelectedText
// - andreas.getSetting
// - andreas.getWorkspaceFolders
// - andreas.gitCheckout
// - andreas.goToLine
// - andreas.increment
// - andreas.lineMiddle
// - andreas.moveFile
// - andreas.newFile
// - andreas.openEditorAtIndex
// - andreas.printCommands
// - andreas.removeFile
// - andreas.renameFile
// - andreas.selectTo
// - andreas.setSetting
// - andreas.tabs.focus
// - andreas.tabs.removeView
// - andreas.tabs.resetViewLocation
// - andreas.tabs.toggleVisibility
// - betterOpenEditors.closeFolder
// - betterOpenEditors.closeTab
// - betterOpenEditors.collapseAll
// - betterOpenEditors.copyPath
// - betterOpenEditors.copyRelativePath
// - betterOpenEditors.focus
// - betterOpenEditors.openExtensionSettings
// - betterOpenEditors.openInIntegratedTerminal
// - betterOpenEditors.openPackageFile
// - betterOpenEditors.pinTab
// - betterOpenEditors.refreshTree
// - betterOpenEditors.removeView
// - betterOpenEditors.resetViewLocation
// - betterOpenEditors.revealFileInOS
// - betterOpenEditors.saveAll
// - betterOpenEditors.showTab
// - betterOpenEditors.showUnknownFileInfo
// - betterOpenEditors.toggleVisibility
// - betterOpenEditors.unpinTab
// - black-formatter.restart
// - black-formatter.showLogs
// - bookmarks.clear
// - bookmarks.clearFromAllFiles
// - bookmarks.list
// - bookmarks.listFromAllFiles
// - bookmarks.openSettings
// - bookmarks.refresh
// - bookmarks.selectLines
// - bookmarks.supportBookmarks
// - bookmarks.toggleLabeled
// - bookmarks.whatsNew
// - bookmarksExplorer.focus
// - bookmarksExplorer.removeView
// - bookmarksExplorer.resetViewLocation
// - bookmarksExplorer.toggleVisibility
// - bookmarksHelpAndFeedback.focus
// - bookmarksHelpAndFeedback.openHelpLink
// - bookmarksHelpAndFeedback.removeView
// - bookmarksHelpAndFeedback.resetViewLocation
// - bookmarksHelpAndFeedback.toggleVisibility
// - breadcrumbs.toggle
// - breadcrumbs.toggleFromEditorTitle
// - callStack.collapse
// - callStackWidget.goToFile
// - calva-backseat-driver.openLogFile
// - calva-backseat-driver.startMcpServer
// - calva-backseat-driver.stopMcpServer
// - calva-fmt.trimCurrentFormWhiteSpace
// - calva.activateCalva
// - calva.addToInspector
// - calva.clearInspector
// - calva.clearInspectorItem
// - calva.clearReplHistory
// - calva.clearReplOutputView
// - calva.clojureLsp.download
// - calva.clojureLsp.manage
// - calva.clojureLsp.restart
// - calva.clojureLsp.showClojureLspMenu
// - calva.clojureLsp.start
// - calva.clojureLsp.stop
// - calva.continueComment
// - calva.convertDart2Clj
// - calva.convertHtml2Hiccup
// - calva.convertJs2Cljs
// - calva.copyAnnotationHoverText
// - calva.copyHtmlAsHiccup
// - calva.copyInspectorItem
// - calva.copyJackInCommandToClipboard
// - calva.createAndOpenProjectFromDram
// - calva.createMinimalProject
// - calva.diagnostics.clojureLspServerInfo
// - calva.diagnostics.createDocumentFromTextNotation
// - calva.diagnostics.openClojureLspLogFile
// - calva.diagnostics.printTextNotationFromDocument
// - calva.diagnostics.showLspTraceLevelSettings
// - calva.diagnostics.toggleNreplLoggingEnabled
// - calva.disconnect
// - calva.evaluateUser
// - calva.flare.focus
// - calva.flare.removeView
// - calva.flare.resetViewLocation
// - calva.flare.toggleVisibility
// - calva.inspectItem
// - calva.inspector.focus
// - calva.inspector.removeView
// - calva.inspector.resetViewLocation
// - calva.inspector.toggleVisibility
// - calva.jackOut
// - calva.linting.resolveMacroAs
// - calva.loadTestFileForCurrentNamespace
// - calva.openCalvaDocs
// - calva.openUserConfigEdn
// - calva.pasteAsInspectorItem
// - calva.pasteHtmlAsHiccup
// - calva.prettyPrintReplaceCurrentForm
// - calva.printTextToOutputCommand
// - calva.printTextToRichCommentCommand
// - calva.refresh
// - calva.refreshAll
// - calva.rereadUserConfigEdn
// - calva.revealJackInTerminal
// - calva.showOutputWindow
// - calva.startJoyrideReplAndConnect
// - calva.startOrConnectRepl
// - calva.startStandaloneHelloRepl
// - calva.toggleBetweenImplAndTest
// - calva.toggleKeybindingsEnabled
// - change-coll
// - changeEditorIndentation1
// - chat.inlineResourceAnchor.addFileToChat
// - chat.inlineSymbolAnchor.goToDefinition
// - chat.inlineSymbolAnchor.goToImplementations
// - chat.inlineSymbolAnchor.goToReferences
// - chat.inlineSymbolAnchor.goToTypeDefinitions
// - chat.openFileSnapshot
// - chat.openFileUpdatedBySnapshot
// - chatEditing.acceptFile
// - chatEditing.clearWorkingSet
// - chatEditing.discardFile
// - chatEditing.multidiff.acceptAllFiles
// - chatEditing.multidiff.discardAllFiles
// - chatEditing.openFileInDiff
// - chatEditing.removeFileFromWorkingSet
// - chatEditing.viewChanges
// - chatEditor.action.reviewChanges
// - claude-dev.SidebarProvider.focus
// - claude-dev.SidebarProvider.removeView
// - claude-dev.SidebarProvider.resetViewLocation
// - claude-dev.SidebarProvider.toggleVisibility
// - clean-ns
// - cleanSearchEditorState
// - cline.accountButtonClicked
// - cline.addTerminalOutputToChat
// - cline.dev.createTestTasks
// - cline.explainCode
// - cline.fixWithCline
// - cline.generateGitCommitMessage
// - cline.historyButtonClicked
// - cline.improveCode
// - cline.mcpButtonClicked
// - cline.openInNewTab
// - cline.openWalkthrough
// - cline.plusButtonClicked
// - cline.popoutButtonClicked
// - cline.settingsButtonClicked
// - clipboard.history.copy
// - clipboard.history.focus
// - clipboard.history.remove
// - clipboard.history.removeView
// - clipboard.history.resetViewLocation
// - clipboard.history.toggleVisibility
// - clipboard.paste
// - clojure-lsp.command
// - clojureLsp.dragBackward
// - clojureLsp.dragForward
// - clojureLsp.dragParamBackward
// - clojureLsp.dragParamForward
// - clojureLsp.refactor.addImportToNamespace
// - clojureLsp.refactor.addMissingImport
// - clojureLsp.refactor.addMissingLibspec
// - clojureLsp.refactor.addRequireSuggestion
// - clojureLsp.refactor.changeColl
// - clojureLsp.refactor.cleanNs
// - clojureLsp.refactor.createFunction
// - clojureLsp.refactor.createTest
// - clojureLsp.refactor.cycleColl
// - clojureLsp.refactor.cycleKeywordAutoResolve
// - clojureLsp.refactor.cyclePrivacy
// - clojureLsp.refactor.demoteFn
// - clojureLsp.refactor.destructureKeys
// - clojureLsp.refactor.dragBackward
// - clojureLsp.refactor.dragForward
// - clojureLsp.refactor.expandLet
// - clojureLsp.refactor.extractFunction
// - clojureLsp.refactor.extractToDef
// - clojureLsp.refactor.getInAll
// - clojureLsp.refactor.getInLess
// - clojureLsp.refactor.getInMore
// - clojureLsp.refactor.getInNone
// - clojureLsp.refactor.inlineSymbol
// - clojureLsp.refactor.introduceLet
// - clojureLsp.refactor.moveCollEntryDown
// - clojureLsp.refactor.moveCollEntryUp
// - clojureLsp.refactor.moveForm
// - clojureLsp.refactor.moveToLet
// - clojureLsp.refactor.promoteFn
// - clojureLsp.refactor.replaceReferAllWithAlias
// - clojureLsp.refactor.replaceReferAllWithRefer
// - clojureLsp.refactor.resolveMacroAs
// - clojureLsp.refactor.restructureKeys
// - clojureLsp.refactor.sortClauses
// - clojureLsp.refactor.sortMap
// - clojureLsp.refactor.suppressDiagnostic
// - clojureLsp.refactor.threadFirst
// - clojureLsp.refactor.threadFirstAll
// - clojureLsp.refactor.threadLast
// - clojureLsp.refactor.threadLastAll
// - clojureLsp.refactor.unwindAll
// - clojureLsp.refactor.unwindThread
// - closeReferenceSearchEditor
// - code-lens-references
// - codelens.showLensesInCurrentLine
// - codemosModern.authenticate
// - codemosModern.configure
// - columnSelect
// - command-server.getFocusedElementType
// - comments.collapse
// - comments.expand
// - comments.reply
// - commitMessageEditor.copyFromSCMInputBox
// - commitMessageEditor.loadTemplate
// - commitMessageEditor.openEditor
// - commitMessageEditor.openSettingsPage
// - commitViewProvider.focus
// - commitViewProvider.resetViewLocation
// - compareCommitViewProvider.focus
// - compareCommitViewProvider.resetViewLocation
// - compareFiles
// - compareSelected
// - compositionEnd
// - compositionStart
// - compositionType
// - copy-current-line-number.helloWorld
// - cpt.clay.loadClayDependency
// - cpt.dataspex.view.focus
// - cpt.dataspex.view.resetViewLocation
// - create-function
// - create-test
// - createCursor
// - csv.clearState
// - csv.refresh
// - cursorRedo
// - cursorWordEndLeft
// - cursorWordEndLeftSelect
// - cursorWordPartStartLeft
// - cursorWordPartStartLeftSelect
// - cursorWordRight
// - cursorWordRightSelect
// - cursorWordStartLeft
// - cursorWordStartLeftSelect
// - cursorWordStartRight
// - cursorWordStartRightSelect
// - cursorless.analyzeCommandHistory
// - cursorless.command
// - cursorless.documentationOpened
// - cursorless.hideScopeVisualizer
// - cursorless.internal.updateCheatsheetDefaults
// - cursorless.keyboard.escape
// - cursorless.keyboard.modal.modeOff
// - cursorless.keyboard.modal.modeOn
// - cursorless.keyboard.modal.modeToggle
// - cursorless.keyboard.redoTarget
// - cursorless.keyboard.targeted.clearTarget
// - cursorless.keyboard.targeted.runActionOnTarget
// - cursorless.keyboard.targeted.targetHat
// - cursorless.keyboard.targeted.targetScope
// - cursorless.keyboard.targeted.targetSelection
// - cursorless.keyboard.undoTarget
// - cursorless.migrateSnippets
// - cursorless.pauseRecording
// - cursorless.private.logQuickActions
// - cursorless.recomputeDecorationStyles
// - cursorless.recordOneTestCaseThenPause
// - cursorless.recordScopeTests.saveActiveDocument
// - cursorless.recordScopeTests.showUnimplementedFacets
// - cursorless.recordTestCase
// - cursorless.repeatPreviousCommand
// - cursorless.resumeRecording
// - cursorless.scopeVisualizer.openUrl
// - cursorless.scopes.focus
// - cursorless.scopes.removeView
// - cursorless.scopes.resetViewLocation
// - cursorless.scopes.toggleVisibility
// - cursorless.showCheatsheet
// - cursorless.showDocumentation
// - cursorless.showInstallationDependencies
// - cursorless.showQuickPick
// - cursorless.showScopeVisualizer
// - cursorless.takeSnapshot
// - cursorless.toggleDecorations
// - cursorless.tutorial.focus
// - cursorless.tutorial.list
// - cursorless.tutorial.next
// - cursorless.tutorial.previous
// - cursorless.tutorial.removeView
// - cursorless.tutorial.resetViewLocation
// - cursorless.tutorial.restart
// - cursorless.tutorial.resume
// - cursorless.tutorial.start
// - cursorless.tutorial.toggleVisibility
// - cut
// - cycle-coll
// - cycle-keyword-auto-resolve
// - cycle-privacy
// - debug.action.openDisassemblyView
// - debug.action.toggleDisassemblyViewSourceCode
// - debug.addConfiguration
// - debug.addToWatchExpressions
// - debug.breakWhenValueChanges
// - debug.breakWhenValueIsAccessed
// - debug.breakWhenValueIsRead
// - debug.collapseRepl
// - debug.copyEvaluatePath
// - debug.copyStackTrace
// - debug.editBreakpoint
// - debug.editBreakpointMode
// - debug.editFunctionBreakpoint
// - debug.editFunctionBreakpointHitCount
// - debug.enableOrDisableBreakpoint
// - debug.installAdditionalDebuggers
// - debug.jumpToCursor
// - debug.replCopy
// - debug.replPaste
// - debug.setWatchExpression
// - debug.startFromConfig
// - debug.toggleReplIgnoreFocus
// - debugpy.SelectAndInsertDebugConfiguration
// - debugpy.clearCacheAndReload
// - debugpy.debugInTerminal
// - debugpy.debugUsingLaunchConfig
// - debugpy.pickArgs
// - debugpy.pickLocalProcess
// - debugpy.reportIssue
// - debugpy.viewOutput
// - default:compositionEnd
// - default:compositionStart
// - default:compositionType
// - default:cut
// - default:paste
// - default:redo
// - default:replacePreviousChar
// - default:type
// - default:undo
// - deleteInsideWord
// - deleteWordEndLeft
// - deleteWordEndRight
// - deleteWordStartLeft
// - deleteWordStartRight
// - demote-fn
// - destructure-keys
// - developer.showCurrentFileAsReleaseNotes
// - diff.file
// - diffEditor.collapseAllUnchangedRegions
// - diffEditor.revert
// - diffEditor.showAllUnchangedRegions
// - diffEditor.switchSide
// - diffEditor.toggleCollapseUnchangedRegions
// - diffEditor.toggleShowMovedCodeBlocks
// - diffEditor.toggleUseInlineViewWhenSpaceIsLimited
// - difflens.difflens
// - drag-backward
// - drag-forward
// - drag-param-backward
// - drag-param-forward
// - editor-layout-helper.distributeEditorsHorizontal
// - editor.action.addCursorsToBottom
// - editor.action.addCursorsToTop
// - editor.action.addSelectionToPreviousFindMatch
// - editor.action.changeTabDisplaySize
// - editor.action.clipboardCopyWithSyntaxHighlightingAction
// - editor.action.debugEditorGpuRenderer
// - editor.action.decreaseHoverVerbosityLevel
// - editor.action.detectIndentation
// - editor.action.diffReview.next
// - editor.action.diffReview.prev
// - editor.action.duplicateSelection
// - editor.action.findReferences
// - editor.action.fixAll
// - editor.action.focusNextCursor
// - editor.action.focusPreviousCursor
// - editor.action.focusStickyScroll
// - editor.action.fontZoomIn
// - editor.action.fontZoomOut
// - editor.action.fontZoomReset
// - editor.action.forceRetokenize
// - editor.action.format
// - editor.action.formatChanges
// - editor.action.formatDocument.multiple
// - editor.action.formatSelection.multiple
// - editor.action.goToDeclaration
// - editor.action.goToMatchFindAction
// - editor.action.goToSelectionAnchor
// - editor.action.goToTypeDefinition
// - editor.action.hideHover
// - editor.action.increaseHoverVerbosityLevel
// - editor.action.indentUsingSpaces
// - editor.action.indentUsingTabs
// - editor.action.indentationToSpaces
// - editor.action.indentationToTabs
// - editor.action.inlineSuggest.acceptNextInlineEditPart
// - editor.action.inlineSuggest.dev.extractRepro
// - editor.action.inlineSuggest.toggleAlwaysShowToolbar
// - editor.action.inlineSuggest.toggleShowCollapsed
// - editor.action.inlineSuggest.triggerInlineEdit
// - editor.action.inlineSuggest.triggerInlineEditExplicit
// - editor.action.insertFinalNewLine
// - editor.action.insertSnippet
// - editor.action.inspectTMScopes
// - editor.action.measureExtHostLatency
// - editor.action.moveCarretLeftAction
// - editor.action.moveCarretRightAction
// - editor.action.moveSelectionToPreviousFindMatch
// - editor.action.openDeclarationToTheSide
// - editor.action.openLink
// - editor.action.pasteAs
// - editor.action.pasteAsText
// - editor.action.peekDeclaration
// - editor.action.peekTypeDefinition
// - editor.action.previewDeclaration
// - editor.action.referenceSearch.trigger
// - editor.action.reindentlines
// - editor.action.reindentselectedlines
// - editor.action.removeDuplicateLines
// - editor.action.resetSuggestSize
// - editor.action.revealDeclaration
// - editor.action.selectToBracket
// - editor.action.showDefinitionPreviewHover
// - editor.action.showOrFocusStandaloneColorPicker
// - editor.action.showReferences
// - editor.action.showSnippets
// - editor.action.smartSelect.grow
// - editor.action.sortLinesAscending
// - editor.action.sortLinesDescending
// - editor.action.sourceAction
// - editor.action.startDebugTextMate
// - editor.action.surroundWithSnippet
// - editor.action.toggleColumnSelection
// - editor.action.toggleMinimap
// - editor.action.toggleRenderControlCharacter
// - editor.action.toggleRenderWhitespace
// - editor.action.toggleStickyScroll
// - editor.action.transformToCamelcase
// - editor.action.transformToKebabcase
// - editor.action.transformToLowercase
// - editor.action.transformToPascalcase
// - editor.action.transformToSnakecase
// - editor.action.transformToTitlecase
// - editor.action.transformToUppercase
// - editor.action.transpose
// - editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters
// - editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters
// - editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters
// - editor.action.unicodeHighlight.showExcludeOptions
// - editor.action.wordHighlight.trigger
// - editor.actions.findWithArgs
// - editor.debug.action.addLogPoint
// - editor.debug.action.conditionalBreakpoint
// - editor.debug.action.editBreakpoint
// - editor.debug.action.goToNextBreakpoint
// - editor.debug.action.goToPreviousBreakpoint
// - editor.debug.action.runToCursor
// - editor.debug.action.selectionToRepl
// - editor.debug.action.selectionToWatch
// - editor.debug.action.stepIntoTargets
// - editor.debug.action.triggerByBreakpoint
// - editor.emmet.action.balanceIn
// - editor.emmet.action.balanceOut
// - editor.emmet.action.decrementNumberByOne
// - editor.emmet.action.decrementNumberByOneTenth
// - editor.emmet.action.decrementNumberByTen
// - editor.emmet.action.evaluateMathExpression
// - editor.emmet.action.incrementNumberByOne
// - editor.emmet.action.incrementNumberByOneTenth
// - editor.emmet.action.incrementNumberByTen
// - editor.emmet.action.matchTag
// - editor.emmet.action.mergeLines
// - editor.emmet.action.nextEditPoint
// - editor.emmet.action.prevEditPoint
// - editor.emmet.action.reflectCSSValue
// - editor.emmet.action.removeTag
// - editor.emmet.action.selectNextItem
// - editor.emmet.action.selectPrevItem
// - editor.emmet.action.splitJoinTag
// - editor.emmet.action.toggleComment
// - editor.emmet.action.updateImageSize
// - editor.emmet.action.updateTag
// - editor.emmet.action.wrapWithAbbreviation
// - editor.gotoNextFold
// - editor.gotoParentFold
// - editor.gotoPreviousFold
// - editor.inlayHints.Reset
// - editor.showTypeHierarchy
// - editor.toggleImportFold
// - emmet.expandAbbreviation
// - expand-let
// - explorer.download
// - explorer.newFile
// - explorer.newFolder
// - explorer.openWith
// - explorer.upload
// - extension.bisect.next
// - extension.bisect.start
// - extension.bisect.stop
// - extension.js-debug.addCustomBreakpoints
// - extension.js-debug.addXHRBreakpoints
// - extension.js-debug.callers.add
// - extension.js-debug.callers.goToCaller
// - extension.js-debug.callers.gotToTarget
// - extension.js-debug.callers.remove
// - extension.js-debug.callers.removeAll
// - extension.js-debug.createDebuggerTerminal
// - extension.js-debug.createDiagnostics
// - extension.js-debug.debugLink
// - extension.js-debug.disableSourceMapStepping
// - extension.js-debug.editXHRBreakpoints
// - extension.js-debug.enableSourceMapStepping
// - extension.js-debug.getDiagnosticLogs
// - extension.js-debug.network.clear
// - extension.js-debug.network.copyUri
// - extension.js-debug.network.openBody
// - extension.js-debug.network.openBodyInHex
// - extension.js-debug.network.replayXHR
// - extension.js-debug.network.viewRequest
// - extension.js-debug.npmScript
// - extension.js-debug.openEdgeDevTools
// - extension.js-debug.prettyPrint
// - extension.js-debug.removeAllCustomBreakpoints
// - extension.js-debug.removeXHRBreakpoint
// - extension.js-debug.revealPage
// - extension.js-debug.startProfile
// - extension.js-debug.stopProfile
// - extension.js-debug.toggleSkippingFile
// - extension.jsProfileVisualizer.table.clearCodeLenses
// - extension.linkLine
// - extension.node-debug.toggleAutoAttach
// - extension.open
// - extension.openJsonSelection
// - extension.openLinkedPartial
// - extension.openNativeTerminal
// - extension.openNativeTerminalOnRootFolder
// - extension.partialDiff.diffSelectionWithClipboard
// - extension.partialDiff.diffVisibleEditors
// - extension.partialDiff.markSection1
// - extension.partialDiff.markSection2AndTakeDiff
// - extension.partialDiff.togglePreComparisonTextNormalizationRules
// - extension.portalOpen
// - extension.portalOpenDev
// - extension.pwa-node-debug.attachNodeProcess
// - extension.runTerminalCommand
// - extension.switchFontSize
// - extensions.actions.searchByCategory.AI
// - extensions.actions.searchByCategory.Azure
// - extensions.actions.searchByCategory.Chat
// - extensions.actions.searchByCategory.Data Science
// - extensions.actions.searchByCategory.Debuggers
// - extensions.actions.searchByCategory.Education
// - extensions.actions.searchByCategory.Extension Packs
// - extensions.actions.searchByCategory.Formatters
// - extensions.actions.searchByCategory.Keymaps
// - extensions.actions.searchByCategory.Language Packs
// - extensions.actions.searchByCategory.Linters
// - extensions.actions.searchByCategory.Machine Learning
// - extensions.actions.searchByCategory.Notebooks
// - extensions.actions.searchByCategory.Other
// - extensions.actions.searchByCategory.Programming Languages
// - extensions.actions.searchByCategory.SCM Providers
// - extensions.actions.searchByCategory.Snippets
// - extensions.actions.searchByCategory.Testing
// - extensions.actions.searchByCategory.Themes
// - extensions.actions.searchByCategory.Visualization
// - extensions.filter.featured
// - extensions.recommendedList.focus
// - extensions.recommendedList.resetViewLocation
// - extensions.sort.installs
// - extensions.sort.name
// - extensions.sort.publishedDate
// - extensions.sort.rating
// - extensions.sort.updateDate
// - extract-function
// - extract-to-def
// - favorites-full-view.focus
// - favorites-full-view.removeView
// - favorites-full-view.resetViewLocation
// - favorites-full-view.toggleVisibility
// - favorites.addToFavorites
// - favorites.deleteFavorite
// - favorites.focus
// - favorites.group.changeGroup
// - favorites.group.newGroup
// - favorites.moveDown
// - favorites.moveToBottom
// - favorites.moveToTop
// - favorites.moveUp
// - favorites.nav.refresh
// - favorites.nav.sort
// - favorites.openToSide
// - favorites.removeView
// - favorites.resetViewLocation
// - favorites.revealInOS.mac
// - favorites.revealInOS.other
// - favorites.revealInOS.windows
// - favorites.revealInSideBar
// - favorites.toggleVisibility
// - files.openTimeline
// - files.participants.resetChoice
// - filesExplorer.findInWorkspace
// - filetree.focus
// - filetree.removeView
// - filetree.resetViewLocation
// - filetree.toggleVisibility
// - fileutils.copyFileName
// - fileutils.duplicateFile
// - fileutils.moveFile
// - fileutils.newFile
// - fileutils.newFileAtRoot
// - fileutils.newFolder
// - fileutils.newFolderAtRoot
// - fileutils.removeFile
// - fileutils.renameFile
// - focusAndAcceptSuggestion
// - foldersCompare.chooseFoldersAndCompare
// - foldersCompare.clearRecentCompares
// - foldersCompare.compareFiles
// - foldersCompare.compareFoldersAgainstEachOther
// - foldersCompare.compareFoldersAgainstWorkspace
// - foldersCompare.compareSelectedFolders
// - foldersCompare.copyToCompared
// - foldersCompare.copyToMy
// - foldersCompare.deleteFile
// - foldersCompare.dismissDifference
// - foldersCompare.pickFromRecentCompares
// - foldersCompare.refresh
// - foldersCompare.swap
// - foldersCompare.takeComparedFile
// - foldersCompare.takeMyFile
// - foldersCompare.viewAsList
// - foldersCompare.viewAsTree
// - foldersCompareAppService.focus
// - foldersCompareAppService.removeView
// - foldersCompareAppService.resetViewLocation
// - foldersCompareAppService.toggleVisibility
// - foldersCompareAppServiceIdenticals.focus
// - foldersCompareAppServiceIdenticals.resetViewLocation
// - foldersCompareAppServiceOnlyA.focus
// - foldersCompareAppServiceOnlyA.removeView
// - foldersCompareAppServiceOnlyA.resetViewLocation
// - foldersCompareAppServiceOnlyA.toggleVisibility
// - foldersCompareAppServiceOnlyB.focus
// - foldersCompareAppServiceOnlyB.removeView
// - foldersCompareAppServiceOnlyB.resetViewLocation
// - foldersCompareAppServiceOnlyB.toggleVisibility
// - fuzzySearch.activeTextEditor
// - fuzzySearch.activeTextEditorWithCurrentSelection
// - get-in-all
// - get-in-less
// - get-in-more
// - get-in-none
// - getContextKeyInfo
// - git-autoconfig.getConfig
// - git-autoconfig.ignoreRoot
// - git-autoconfig.setConfig
// - git-autoconfig.unignoreRoot
// - git-base.api.getRemoteSources
// - git-branchless.custom.autoBranch
// - git-branchless.custom.detachHead
// - git-branchless.custom.getCommitMessage
// - git-branchless.custom.moveBranch
// - git-branchless.custom.reset
// - git-branchless.custom.switchToCommit
// - git-branchless.hide
// - git-branchless.move.exact
// - git-branchless.move.source
// - git-branchless.smartlog
// - git-branchless.smartlogRevset
// - git-branchless.submit
// - git-branchless.submitRevset
// - git-graph.addGitRepository
// - git-graph.clearAvatarCache
// - git-graph.endAllWorkspaceCodeReviews
// - git-graph.endSpecificWorkspaceCodeReview
// - git-graph.fetch
// - git-graph.openFile
// - git-graph.removeGitRepository
// - git-graph.resumeWorkspaceCodeReview
// - git-graph.version
// - git-graph.view
// - git._syncAll
// - git.acceptMerge
// - git.addRemote
// - git.api.getRemoteSources
// - git.api.getRepositories
// - git.api.getRepositoryState
// - git.blame.toggleEditorDecoration
// - git.blame.toggleStatusBarItem
// - git.branch
// - git.branchFrom
// - git.checkout
// - git.checkoutDetached
// - git.cherryPick
// - git.cherryPickAbort
// - git.clean
// - git.cleanAll
// - git.cleanAllTracked
// - git.cleanAllUntracked
// - git.clone
// - git.cloneRecursive
// - git.close
// - git.closeAllDiffEditors
// - git.closeAllUnmodifiedEditors
// - git.closeOtherRepositories
// - git.commit
// - git.commit.FileEntry.CompareAgainstPrevious
// - git.commit.FileEntry.CompareAgainstWorkspace
// - git.commit.FileEntry.ViewFileContents
// - git.commit.FileEntry.compare
// - git.commit.FileEntry.selectForComparison
// - git.commit.ViewChangeLog
// - git.commit.cherryPick
// - git.commit.compare
// - git.commit.compare.file.compare
// - git.commit.compare.selectForComparison
// - git.commit.compare.view.hide
// - git.commit.compare.view.show
// - git.commit.compare.view.showFilesOnly
// - git.commit.compare.view.showFolderView
// - git.commit.createBranch
// - git.commit.merge
// - git.commit.rebase
// - git.commit.view.hide
// - git.commit.view.show
// - git.commit.view.showFilesOnly
// - git.commit.view.showFolderView
// - git.commitAll
// - git.commitAllAmend
// - git.commitAllAmendNoVerify
// - git.commitAllNoVerify
// - git.commitAllSigned
// - git.commitAllSignedNoVerify
// - git.commitAmend
// - git.commitAmendNoVerify
// - git.commitEmpty
// - git.commitEmptyNoVerify
// - git.commitMessageAccept
// - git.commitMessageDiscard
// - git.commitNoVerify
// - git.commitSigned
// - git.commitSignedNoVerify
// - git.commitStaged
// - git.commitStagedAmend
// - git.commitStagedAmendNoVerify
// - git.commitStagedNoVerify
// - git.commitStagedSigned
// - git.commitStagedSignedNoVerify
// - git.continueInLocalClone
// - git.copyCommitId
// - git.copyCommitMessage
// - git.copyContentToClipboard
// - git.createTag
// - git.deleteBranch
// - git.deleteRemoteBranch
// - git.deleteRemoteTag
// - git.deleteTag
// - git.diff.stageHunk
// - git.diff.stageSelection
// - git.fetch
// - git.fetchAll
// - git.fetchPrune
// - git.fetchRef
// - git.graph.checkout
// - git.graph.checkoutDetached
// - git.graph.cherryPick
// - git.graph.deleteBranch
// - git.graph.deleteTag
// - git.ignore
// - git.init
// - git.manageUnsafeRepositories
// - git.merge
// - git.mergeAbort
// - git.openAllChanges
// - git.openChange
// - git.openFile
// - git.openFile2
// - git.openHEADFile
// - git.openMergeEditor
// - git.openRepositoriesInParentFolders
// - git.openRepository
// - git.openResource
// - git.publish
// - git.pull
// - git.pullFrom
// - git.pullRebase
// - git.pullRef
// - git.push
// - git.pushForce
// - git.pushRef
// - git.pushTags
// - git.pushTo
// - git.pushToForce
// - git.pushWithTags
// - git.pushWithTagsForce
// - git.rebase
// - git.rebaseAbort
// - git.refresh
// - git.removeRemote
// - git.rename
// - git.renameBranch
// - git.reopenClosedRepositories
// - git.restoreCommitTemplate
// - git.revealFileInOS.linux
// - git.revealFileInOS.mac
// - git.revealFileInOS.windows
// - git.revealInExplorer
// - git.revertChange
// - git.runGitMerge
// - git.runGitMergeDiff3
// - git.showOutput
// - git.stage
// - git.stageAll
// - git.stageAllMerge
// - git.stageAllTracked
// - git.stageAllUntracked
// - git.stageChange
// - git.stageFile
// - git.stash
// - git.stashApply
// - git.stashApplyEditor
// - git.stashApplyLatest
// - git.stashDrop
// - git.stashDropAll
// - git.stashDropEditor
// - git.stashIncludeUntracked
// - git.stashPop
// - git.stashPopEditor
// - git.stashPopLatest
// - git.stashStaged
// - git.stashView
// - git.sync
// - git.syncRebase
// - git.timeline.compareWithSelected
// - git.timeline.copyCommitId
// - git.timeline.copyCommitMessage
// - git.timeline.openDiff
// - git.timeline.selectForCompare
// - git.timeline.viewCommit
// - git.undoCommit
// - git.unstage
// - git.unstageAll
// - git.unstageFile
// - git.viewChanges
// - git.viewCommit
// - git.viewHistory
// - git.viewLineHistory
// - git.viewStagedChanges
// - git.viewUntrackedChanges
// - githd.clearFilesView
// - githd.collapseFolder
// - githd.copyCommitHash
// - githd.diffBranch
// - githd.diffCommitFromTreeView
// - githd.diffFile
// - githd.diffFileFromTreeView
// - githd.diffFolder
// - githd.diffFolderFromTreeView
// - githd.diffUncommittedFile
// - githd.expandFolder
// - githd.files.focus
// - githd.files.removeView
// - githd.files.resetViewLocation
// - githd.files.toggleVisibility
// - githd.goBackFilesView
// - githd.goBackHistoryView
// - githd.goBackNoMore
// - githd.goForwardFilesView
// - githd.goForwardHistoryView
// - githd.goForwardNoMore
// - githd.hideFileStats
// - githd.inputRef
// - githd.nextCommit
// - githd.nextCommitNoMore
// - githd.openCommit
// - githd.openCommitInfo
// - githd.openCommittedFile
// - githd.openFile
// - githd.openLineDiff
// - githd.previousCommit
// - githd.previousCommitNoMore
// - githd.setExpressMode
// - githd.setRepository
// - githd.showFileStats
// - githd.showFilesListView
// - githd.showFilesTreeView
// - githd.showStats
// - githd.stats.focus
// - githd.stats.removeView
// - githd.stats.resetViewLocation
// - githd.stats.toggleVisibility
// - githd.viewAllHistory
// - githd.viewAuthorHistory
// - githd.viewBranchHistory
// - githd.viewFileHistory
// - githd.viewFileHistoryFromTree
// - githd.viewFolderHistory
// - githd.viewFolderHistoryFromTree
// - githd.viewHistory
// - githd.viewLineHistory
// - githd.viewStashes
// - github.api.preloadPullRequest
// - github.copyVscodeDevLink
// - github.copyVscodeDevLinkFile
// - github.copyVscodeDevLinkWithoutRange
// - github.graph.openOnGitHub
// - github.openOnGitHub
// - github.openOnVscodeDev
// - github.publish
// - github.timeline.openOnGitHub
// - github:activePullRequest.focus
// - github:activePullRequest.resetViewLocation
// - github:activePullRequest:welcome.focus
// - github:activePullRequest:welcome.resetViewLocation
// - github:compareChangesCommits.focus
// - github:compareChangesCommits.resetViewLocation
// - github:compareChangesFiles.focus
// - github:compareChangesFiles.resetViewLocation
// - github:conflictResolution.focus
// - github:conflictResolution.resetViewLocation
// - github:createPullRequestWebview.focus
// - github:createPullRequestWebview.resetViewLocation
// - github:login.focus
// - github:login.resetViewLocation
// - gitlens.action.createPullRequest
// - gitlens.action.hover.commands
// - gitlens.action.openPullRequest
// - gitlens.addAuthors
// - gitlens.ai.explainBranch
// - gitlens.ai.explainBranch:graph
// - gitlens.ai.explainBranch:views
// - gitlens.ai.explainCommit
// - gitlens.ai.explainCommit:editor
// - gitlens.ai.explainCommit:graph
// - gitlens.ai.explainCommit:views
// - gitlens.ai.explainStash
// - gitlens.ai.explainStash:graph
// - gitlens.ai.explainStash:views
// - gitlens.ai.explainWip
// - gitlens.ai.explainWip:editor
// - gitlens.ai.explainWip:graph
// - gitlens.ai.explainWip:views
// - gitlens.ai.feedback.helpful
// - gitlens.ai.feedback.helpful.chosen
// - gitlens.ai.feedback.unhelpful
// - gitlens.ai.feedback.unhelpful.chosen
// - gitlens.ai.generateChangelog
// - gitlens.ai.generateChangelog:views
// - gitlens.ai.generateChangelogFrom:graph
// - gitlens.ai.generateChangelogFrom:views
// - gitlens.ai.generateCommitMessage
// - gitlens.ai.generateCommitMessage:graph
// - gitlens.ai.generateCommitMessage:scm
// - gitlens.ai.generateCommits
// - gitlens.ai.generateCommits:graph
// - gitlens.ai.generateCommits:views
// - gitlens.ai.generateRebase
// - gitlens.ai.rebaseOntoCommit:graph
// - gitlens.ai.rebaseOntoCommit:views
// - gitlens.ai.switchProvider
// - gitlens.ai.undoGenerateRebase
// - gitlens.annotations.nextChange
// - gitlens.annotations.previousChange
// - gitlens.applyPatchFromClipboard
// - gitlens.associateIssueWithBranch
// - gitlens.browseRepoAtRevision
// - gitlens.browseRepoAtRevisionInNewWindow
// - gitlens.browseRepoBeforeRevision
// - gitlens.browseRepoBeforeRevisionInNewWindow
// - gitlens.changeBranchMergeTarget
// - gitlens.clearFileAnnotations
// - gitlens.closeUnchangedFiles
// - gitlens.compareHeadWith
// - gitlens.compareWith
// - gitlens.compareWorkingWith
// - gitlens.computingFileAnnotations
// - gitlens.connectRemoteProvider
// - gitlens.copyCurrentBranch
// - gitlens.copyDeepLinkToBranch
// - gitlens.copyDeepLinkToCommit
// - gitlens.copyDeepLinkToComparison
// - gitlens.copyDeepLinkToFile
// - gitlens.copyDeepLinkToFileAtRevision
// - gitlens.copyDeepLinkToLines
// - gitlens.copyDeepLinkToRepo
// - gitlens.copyDeepLinkToTag
// - gitlens.copyDeepLinkToWorkspace
// - gitlens.copyMessageToClipboard
// - gitlens.copyPatchToClipboard
// - gitlens.copyRelativePathToClipboard
// - gitlens.copyRemoteBranchUrl
// - gitlens.copyRemoteBranchesUrl
// - gitlens.copyRemoteCommitUrl
// - gitlens.copyRemoteComparisonUrl
// - gitlens.copyRemoteFileUrlFrom
// - gitlens.copyRemoteFileUrlToClipboard
// - gitlens.copyRemoteFileUrlWithoutRange
// - gitlens.copyRemotePullRequestUrl
// - gitlens.copyRemoteRepositoryUrl
// - gitlens.copyShaToClipboard
// - gitlens.copyWorkingChangesToWorktree
// - gitlens.copyWorkingChangesToWorktree:views
// - gitlens.createCloudPatch
// - gitlens.createPatch
// - gitlens.createPullRequestOnRemote
// - gitlens.diffDirectory
// - gitlens.diffDirectoryWithHead
// - gitlens.diffFolderWithRevision
// - gitlens.diffFolderWithRevisionFrom
// - gitlens.diffHeadWith
// - gitlens.diffLineWithWorking
// - gitlens.diffWith
// - gitlens.diffWithRevision
// - gitlens.diffWithRevisionFrom
// - gitlens.diffWorkingWith
// - gitlens.disableDebugLogging
// - gitlens.disableRebaseEditor
// - gitlens.disconnectRemoteProvider
// - gitlens.enableDebugLogging
// - gitlens.enableRebaseEditor
// - gitlens.externalDiff
// - gitlens.externalDiffAll
// - gitlens.fetchRepositories
// - gitlens.generateCommitMessage
// - gitlens.getStarted
// - gitlens.ghpr.views.openOrCreateWorktree
// - gitlens.gitCommands.branch
// - gitlens.gitCommands.branch.create
// - gitlens.gitCommands.branch.delete
// - gitlens.gitCommands.branch.prune
// - gitlens.gitCommands.branch.rename
// - gitlens.gitCommands.checkout
// - gitlens.gitCommands.cherryPick
// - gitlens.gitCommands.history
// - gitlens.gitCommands.merge
// - gitlens.gitCommands.rebase
// - gitlens.gitCommands.remote
// - gitlens.gitCommands.remote.add
// - gitlens.gitCommands.remote.prune
// - gitlens.gitCommands.remote.remove
// - gitlens.gitCommands.reset
// - gitlens.gitCommands.revert
// - gitlens.gitCommands.show
// - gitlens.gitCommands.stash
// - gitlens.gitCommands.stash.drop
// - gitlens.gitCommands.stash.list
// - gitlens.gitCommands.stash.pop
// - gitlens.gitCommands.stash.push
// - gitlens.gitCommands.stash.rename
// - gitlens.gitCommands.status
// - gitlens.gitCommands.switch
// - gitlens.gitCommands.tag
// - gitlens.gitCommands.tag.create
// - gitlens.gitCommands.tag.delete
// - gitlens.gitCommands.worktree
// - gitlens.gitCommands.worktree.create
// - gitlens.gitCommands.worktree.delete
// - gitlens.gitCommands.worktree.open
// - gitlens.gk.switchOrganization
// - gitlens.graph.addAuthor
// - gitlens.graph.associateIssueWithBranch
// - gitlens.graph.cherryPick
// - gitlens.graph.cherryPick.multi
// - gitlens.graph.columnAuthorOff
// - gitlens.graph.columnAuthorOn
// - gitlens.graph.columnChangesOff
// - gitlens.graph.columnChangesOn
// - gitlens.graph.columnDateTimeOff
// - gitlens.graph.columnDateTimeOn
// - gitlens.graph.columnGraphCompact
// - gitlens.graph.columnGraphDefault
// - gitlens.graph.columnGraphOff
// - gitlens.graph.columnGraphOn
// - gitlens.graph.columnMessageOff
// - gitlens.graph.columnMessageOn
// - gitlens.graph.columnRefOff
// - gitlens.graph.columnRefOn
// - gitlens.graph.columnShaOff
// - gitlens.graph.columnShaOn
// - gitlens.graph.commitViaSCM
// - gitlens.graph.compareAncestryWithWorking
// - gitlens.graph.compareBranchWithHead
// - gitlens.graph.compareSelectedCommits.multi
// - gitlens.graph.compareWithHead
// - gitlens.graph.compareWithMergeBase
// - gitlens.graph.compareWithUpstream
// - gitlens.graph.compareWithWorking
// - gitlens.graph.copy
// - gitlens.graph.copyDeepLinkToBranch
// - gitlens.graph.copyDeepLinkToCommit
// - gitlens.graph.copyDeepLinkToRepo
// - gitlens.graph.copyDeepLinkToTag
// - gitlens.graph.copyMessage
// - gitlens.graph.copyRemoteBranchUrl
// - gitlens.graph.copyRemoteCommitUrl
// - gitlens.graph.copyRemoteCommitUrl.multi
// - gitlens.graph.copySha
// - gitlens.graph.copyWorkingChangesToWorktree
// - gitlens.graph.createBranch
// - gitlens.graph.createCloudPatch
// - gitlens.graph.createPatch
// - gitlens.graph.createPullRequest
// - gitlens.graph.createTag
// - gitlens.graph.createWorktree
// - gitlens.graph.deleteBranch
// - gitlens.graph.deleteTag
// - gitlens.graph.fetch
// - gitlens.graph.hideLocalBranch
// - gitlens.graph.hideRefGroup
// - gitlens.graph.hideRemote
// - gitlens.graph.hideRemoteBranch
// - gitlens.graph.hideTag
// - gitlens.graph.mergeBranchInto
// - gitlens.graph.openBranchOnRemote
// - gitlens.graph.openChangedFileDiffs
// - gitlens.graph.openChangedFileDiffsIndividually
// - gitlens.graph.openChangedFileDiffsWithMergeBase
// - gitlens.graph.openChangedFileDiffsWithWorking
// - gitlens.graph.openChangedFileDiffsWithWorkingIndividually
// - gitlens.graph.openChangedFileRevisions
// - gitlens.graph.openChangedFiles
// - gitlens.graph.openCommitOnRemote
// - gitlens.graph.openCommitOnRemote.multi
// - gitlens.graph.openInWorktree
// - gitlens.graph.openOnlyChangedFiles
// - gitlens.graph.openPullRequest
// - gitlens.graph.openPullRequestChanges
// - gitlens.graph.openPullRequestComparison
// - gitlens.graph.openPullRequestOnRemote
// - gitlens.graph.openWorktree
// - gitlens.graph.openWorktreeInNewWindow
// - gitlens.graph.publishBranch
// - gitlens.graph.pull
// - gitlens.graph.push
// - gitlens.graph.pushWithForce
// - gitlens.graph.rebaseOntoBranch
// - gitlens.graph.rebaseOntoCommit
// - gitlens.graph.rebaseOntoUpstream
// - gitlens.graph.refresh
// - gitlens.graph.renameBranch
// - gitlens.graph.resetColumnsCompact
// - gitlens.graph.resetColumnsDefault
// - gitlens.graph.resetCommit
// - gitlens.graph.resetToCommit
// - gitlens.graph.resetToTag
// - gitlens.graph.resetToTip
// - gitlens.graph.revert
// - gitlens.graph.scrollMarkerLocalBranchOff
// - gitlens.graph.scrollMarkerLocalBranchOn
// - gitlens.graph.scrollMarkerPullRequestOff
// - gitlens.graph.scrollMarkerPullRequestOn
// - gitlens.graph.scrollMarkerRemoteBranchOff
// - gitlens.graph.scrollMarkerRemoteBranchOn
// - gitlens.graph.scrollMarkerStashOff
// - gitlens.graph.scrollMarkerStashOn
// - gitlens.graph.scrollMarkerTagOff
// - gitlens.graph.scrollMarkerTagOn
// - gitlens.graph.shareAsCloudPatch
// - gitlens.graph.showInDetailsView
// - gitlens.graph.split
// - gitlens.graph.switchToAnotherBranch
// - gitlens.graph.switchToBranch
// - gitlens.graph.switchToCommit
// - gitlens.graph.switchToEditorLayout
// - gitlens.graph.switchToPanelLayout
// - gitlens.graph.switchToTag
// - gitlens.graph.undoCommit
// - gitlens.inviteToLiveShare
// - gitlens.launchpad.indicator.action
// - gitlens.launchpad.indicator.toggle
// - gitlens.openAssociatedPullRequestOnRemote
// - gitlens.openBlamePriorToChange
// - gitlens.openBranchInRemote
// - gitlens.openBranchOnRemote
// - gitlens.openBranchesInRemote
// - gitlens.openBranchesOnRemote
// - gitlens.openChangedFiles
// - gitlens.openCloudPatch
// - gitlens.openCommitInRemote
// - gitlens.openCommitOnRemote
// - gitlens.openComparisonOnRemote
// - gitlens.openCurrentBranchOnRemote
// - gitlens.openFileFromRemote
// - gitlens.openFileHistory
// - gitlens.openFileInRemote
// - gitlens.openFileOnRemote
// - gitlens.openFileOnRemoteFrom
// - gitlens.openFileRevision
// - gitlens.openFileRevisionFrom
// - gitlens.openFolderHistory
// - gitlens.openInRemote
// - gitlens.openOnRemote
// - gitlens.openOnlyChangedFiles
// - gitlens.openPatch
// - gitlens.openPullRequestOnRemote
// - gitlens.openRepoInRemote
// - gitlens.openRepoOnRemote
// - gitlens.openRevisionFile
// - gitlens.openRevisionFromRemote
// - gitlens.openWalkthrough
// - gitlens.openWorkingFile
// - gitlens.pastePatchFromClipboard
// - gitlens.plus.aiAllAccess.optIn
// - gitlens.plus.cloudIntegrations.connect
// - gitlens.plus.cloudIntegrations.manage
// - gitlens.plus.continueFeaturePreview
// - gitlens.plus.hide
// - gitlens.plus.login
// - gitlens.plus.logout
// - gitlens.plus.manage
// - gitlens.plus.reactivateProTrial
// - gitlens.plus.referFriend
// - gitlens.plus.refreshRepositoryAccess
// - gitlens.plus.resendVerification
// - gitlens.plus.restore
// - gitlens.plus.showPlans
// - gitlens.plus.signUp
// - gitlens.plus.simulateSubscription
// - gitlens.plus.upgrade
// - gitlens.plus.validate
// - gitlens.pullRepositories
// - gitlens.pushRepositories
// - gitlens.quickOpenFileHistory
// - gitlens.refreshHover
// - gitlens.regenerateMarkdownDocument
// - gitlens.reset
// - gitlens.resetViewsLayout
// - gitlens.revealCommitInView
// - gitlens.scm.ai.generateCommitMessage
// - gitlens.scm.generateCommitMessage
// - gitlens.shareAsCloudPatch
// - gitlens.showAccountView
// - gitlens.showBranchesView
// - gitlens.showCommitDetailsView
// - gitlens.showCommitInView
// - gitlens.showCommitSearch
// - gitlens.showCommitsInView
// - gitlens.showCommitsView
// - gitlens.showContributorsView
// - gitlens.showDraftsView
// - gitlens.showFileHistoryInView
// - gitlens.showFileHistoryView
// - gitlens.showGraph
// - gitlens.showGraphPage
// - gitlens.showGraphView
// - gitlens.showHomeView
// - gitlens.showInCommitGraph
// - gitlens.showInCommitGraphView
// - gitlens.showInDetailsView
// - gitlens.showLastQuickPick
// - gitlens.showLaunchpad
// - gitlens.showLaunchpadView
// - gitlens.showLineCommitInView
// - gitlens.showLineHistoryView
// - gitlens.showPatchDetailsPage
// - gitlens.showQuickBranchHistory
// - gitlens.showQuickCommitDetails
// - gitlens.showQuickRevisionDetails
// - gitlens.showQuickStashList
// - gitlens.showRemotesView
// - gitlens.showRepositoriesView
// - gitlens.showSearchAndCompareView
// - gitlens.showSettingsPage
// - gitlens.showSettingsPage!autolinks
// - gitlens.showSettingsPage!branches-view
// - gitlens.showSettingsPage!commit-graph
// - gitlens.showSettingsPage!commits-view
// - gitlens.showSettingsPage!contributors-view
// - gitlens.showSettingsPage!file-annotations
// - gitlens.showSettingsPage!file-history-view
// - gitlens.showSettingsPage!line-history-view
// - gitlens.showSettingsPage!remotes-view
// - gitlens.showSettingsPage!repositories-view
// - gitlens.showSettingsPage!search-compare-view
// - gitlens.showSettingsPage!stashes-view
// - gitlens.showSettingsPage!tags-view
// - gitlens.showSettingsPage!views
// - gitlens.showSettingsPage!worktrees-view
// - gitlens.showStashesView
// - gitlens.showTagsView
// - gitlens.showTimelinePage
// - gitlens.showTimelineView
// - gitlens.showWorkspacesView
// - gitlens.showWorktreesView
// - gitlens.startWork
// - gitlens.stashApply:graph
// - gitlens.stashApply:views
// - gitlens.stashDelete.multi:views
// - gitlens.stashDelete:graph
// - gitlens.stashDelete:views
// - gitlens.stashRename:graph
// - gitlens.stashRename:views
// - gitlens.stashSave
// - gitlens.stashSave.files:scm
// - gitlens.stashSave.files:views
// - gitlens.stashSave.staged:scm
// - gitlens.stashSave.unstaged:scm
// - gitlens.stashSave:graph
// - gitlens.stashSave:scm
// - gitlens.stashSave:views
// - gitlens.stashesApply
// - gitlens.stashesApply:views
// - gitlens.switchAIModel
// - gitlens.switchMode
// - gitlens.timeline.refresh
// - gitlens.timeline.split
// - gitlens.toggleFileChanges
// - gitlens.toggleFileChangesOnly
// - gitlens.toggleFileHeatmap
// - gitlens.toggleFileHeatmapInDiffLeft
// - gitlens.toggleFileHeatmapInDiffRight
// - gitlens.toggleGraph
// - gitlens.toggleLineBlame
// - gitlens.toggleMaximizedGraph
// - gitlens.toggleReviewMode
// - gitlens.toggleZenMode
// - gitlens.views.abortPausedOperation
// - gitlens.views.addAuthor
// - gitlens.views.addAuthor.multi
// - gitlens.views.addAuthors
// - gitlens.views.addPullRequestRemote
// - gitlens.views.addRemote
// - gitlens.views.applyChanges
// - gitlens.views.associateIssueWithBranch
// - gitlens.views.branches.attach
// - gitlens.views.branches.focus
// - gitlens.views.branches.refresh
// - gitlens.views.branches.removeView
// - gitlens.views.branches.resetViewLocation
// - gitlens.views.branches.setFilesLayoutToAuto
// - gitlens.views.branches.setFilesLayoutToList
// - gitlens.views.branches.setFilesLayoutToTree
// - gitlens.views.branches.setLayoutToList
// - gitlens.views.branches.setLayoutToTree
// - gitlens.views.branches.setShowAvatarsOff
// - gitlens.views.branches.setShowAvatarsOn
// - gitlens.views.branches.setShowBranchComparisonOff
// - gitlens.views.branches.setShowBranchComparisonOn
// - gitlens.views.branches.setShowBranchPullRequestOff
// - gitlens.views.branches.setShowBranchPullRequestOn
// - gitlens.views.branches.setShowRemoteBranchesOff
// - gitlens.views.branches.setShowRemoteBranchesOn
// - gitlens.views.branches.setShowStashesOff
// - gitlens.views.branches.setShowStashesOn
// - gitlens.views.branches.toggleVisibility
// - gitlens.views.branches.viewOptionsTitle
// - gitlens.views.browseRepoAtRevision
// - gitlens.views.browseRepoAtRevisionInNewWindow
// - gitlens.views.browseRepoBeforeRevision
// - gitlens.views.browseRepoBeforeRevisionInNewWindow
// - gitlens.views.cherryPick
// - gitlens.views.cherryPick.multi
// - gitlens.views.clearComparison
// - gitlens.views.clearReviewed
// - gitlens.views.closeRepository
// - gitlens.views.collapseNode
// - gitlens.views.commitDetails.focus
// - gitlens.views.commitDetails.refresh
// - gitlens.views.commitDetails.removeView
// - gitlens.views.commitDetails.resetViewLocation
// - gitlens.views.commitDetails.toggleVisibility
// - gitlens.views.commits.attach
// - gitlens.views.commits.focus
// - gitlens.views.commits.refresh
// - gitlens.views.commits.removeView
// - gitlens.views.commits.resetViewLocation
// - gitlens.views.commits.setCommitsFilterAuthors
// - gitlens.views.commits.setCommitsFilterOff
// - gitlens.views.commits.setFilesLayoutToAuto
// - gitlens.views.commits.setFilesLayoutToList
// - gitlens.views.commits.setFilesLayoutToTree
// - gitlens.views.commits.setShowAvatarsOff
// - gitlens.views.commits.setShowAvatarsOn
// - gitlens.views.commits.setShowBranchComparisonOff
// - gitlens.views.commits.setShowBranchComparisonOn
// - gitlens.views.commits.setShowBranchPullRequestOff
// - gitlens.views.commits.setShowBranchPullRequestOn
// - gitlens.views.commits.setShowMergeCommitsOff
// - gitlens.views.commits.setShowMergeCommitsOn
// - gitlens.views.commits.setShowStashesOff
// - gitlens.views.commits.setShowStashesOn
// - gitlens.views.commits.toggleVisibility
// - gitlens.views.commits.viewOptionsTitle
// - gitlens.views.compareAncestryWithWorking
// - gitlens.views.compareBranchWithHead
// - gitlens.views.compareFileWithSelected
// - gitlens.views.compareWithHead
// - gitlens.views.compareWithMergeBase
// - gitlens.views.compareWithSelected
// - gitlens.views.compareWithUpstream
// - gitlens.views.compareWithWorking
// - gitlens.views.continuePausedOperation
// - gitlens.views.contributors.attach
// - gitlens.views.contributors.focus
// - gitlens.views.contributors.refresh
// - gitlens.views.contributors.resetViewLocation
// - gitlens.views.contributors.setFilesLayoutToAuto
// - gitlens.views.contributors.setFilesLayoutToList
// - gitlens.views.contributors.setFilesLayoutToTree
// - gitlens.views.contributors.setShowAllBranchesOff
// - gitlens.views.contributors.setShowAllBranchesOn
// - gitlens.views.contributors.setShowAvatarsOff
// - gitlens.views.contributors.setShowAvatarsOn
// - gitlens.views.contributors.setShowMergeCommitsOff
// - gitlens.views.contributors.setShowMergeCommitsOn
// - gitlens.views.contributors.setShowStatisticsOff
// - gitlens.views.contributors.setShowStatisticsOn
// - gitlens.views.contributors.viewOptionsTitle
// - gitlens.views.copy
// - gitlens.views.copyAsMarkdown
// - gitlens.views.copyRemoteCommitUrl
// - gitlens.views.copyRemoteCommitUrl.multi
// - gitlens.views.copyUrl
// - gitlens.views.copyUrl.multi
// - gitlens.views.createBranch
// - gitlens.views.createPullRequest
// - gitlens.views.createTag
// - gitlens.views.createWorktree
// - gitlens.views.deleteBranch
// - gitlens.views.deleteBranch.multi
// - gitlens.views.deleteTag
// - gitlens.views.deleteTag.multi
// - gitlens.views.deleteWorktree
// - gitlens.views.deleteWorktree.multi
// - gitlens.views.dismissNode
// - gitlens.views.draft.open
// - gitlens.views.draft.openOnWeb
// - gitlens.views.drafts.create
// - gitlens.views.drafts.delete
// - gitlens.views.drafts.focus
// - gitlens.views.drafts.info
// - gitlens.views.drafts.refresh
// - gitlens.views.drafts.removeView
// - gitlens.views.drafts.resetViewLocation
// - gitlens.views.drafts.setShowAvatarsOff
// - gitlens.views.drafts.setShowAvatarsOn
// - gitlens.views.drafts.toggleVisibility
// - gitlens.views.editNode
// - gitlens.views.expandNode
// - gitlens.views.fetch
// - gitlens.views.fileHistory.attach
// - gitlens.views.fileHistory.changeBase
// - gitlens.views.fileHistory.focus
// - gitlens.views.fileHistory.refresh
// - gitlens.views.fileHistory.removeView
// - gitlens.views.fileHistory.resetViewLocation
// - gitlens.views.fileHistory.setCursorFollowingOff
// - gitlens.views.fileHistory.setCursorFollowingOn
// - gitlens.views.fileHistory.setEditorFollowingOff
// - gitlens.views.fileHistory.setEditorFollowingOn
// - gitlens.views.fileHistory.setModeCommits
// - gitlens.views.fileHistory.setModeContributors
// - gitlens.views.fileHistory.setRenameFollowingOff
// - gitlens.views.fileHistory.setRenameFollowingOn
// - gitlens.views.fileHistory.setShowAllBranchesOff
// - gitlens.views.fileHistory.setShowAllBranchesOn
// - gitlens.views.fileHistory.setShowAvatarsOff
// - gitlens.views.fileHistory.setShowAvatarsOn
// - gitlens.views.fileHistory.setShowMergeCommitsOff
// - gitlens.views.fileHistory.setShowMergeCommitsOn
// - gitlens.views.fileHistory.toggleVisibility
// - gitlens.views.fileHistory.viewOptionsTitle
// - gitlens.views.graph.focus
// - gitlens.views.graph.openInTab
// - gitlens.views.graph.refresh
// - gitlens.views.graph.removeView
// - gitlens.views.graph.resetViewLocation
// - gitlens.views.graph.toggleVisibility
// - gitlens.views.graphDetails.focus
// - gitlens.views.graphDetails.refresh
// - gitlens.views.graphDetails.removeView
// - gitlens.views.graphDetails.resetViewLocation
// - gitlens.views.graphDetails.toggleVisibility
// - gitlens.views.highlightChanges
// - gitlens.views.highlightRevisionChanges
// - gitlens.views.home.disablePreview
// - gitlens.views.home.discussions
// - gitlens.views.home.enablePreview
// - gitlens.views.home.focus
// - gitlens.views.home.help
// - gitlens.views.home.info
// - gitlens.views.home.issues
// - gitlens.views.home.previewFeedback
// - gitlens.views.home.refresh
// - gitlens.views.home.removeView
// - gitlens.views.home.resetViewLocation
// - gitlens.views.home.toggleVisibility
// - gitlens.views.home.whatsNew
// - gitlens.views.launchpad.attach
// - gitlens.views.launchpad.copy
// - gitlens.views.launchpad.focus
// - gitlens.views.launchpad.info
// - gitlens.views.launchpad.refresh
// - gitlens.views.launchpad.resetViewLocation
// - gitlens.views.launchpad.setFilesLayoutToAuto
// - gitlens.views.launchpad.setFilesLayoutToList
// - gitlens.views.launchpad.setFilesLayoutToTree
// - gitlens.views.launchpad.setShowAvatarsOff
// - gitlens.views.launchpad.setShowAvatarsOn
// - gitlens.views.launchpad.viewOptionsTitle
// - gitlens.views.lineHistory.changeBase
// - gitlens.views.lineHistory.focus
// - gitlens.views.lineHistory.refresh
// - gitlens.views.lineHistory.removeView
// - gitlens.views.lineHistory.resetViewLocation
// - gitlens.views.lineHistory.setEditorFollowingOff
// - gitlens.views.lineHistory.setEditorFollowingOn
// - gitlens.views.lineHistory.setShowAvatarsOff
// - gitlens.views.lineHistory.setShowAvatarsOn
// - gitlens.views.lineHistory.toggleVisibility
// - gitlens.views.loadAllChildren
// - gitlens.views.loadMoreChildren
// - gitlens.views.mergeBranchInto
// - gitlens.views.mergeChangesWithWorking
// - gitlens.views.openBranchOnRemote
// - gitlens.views.openBranchOnRemote.multi
// - gitlens.views.openChangedFileDiffs
// - gitlens.views.openChangedFileDiffsIndividually
// - gitlens.views.openChangedFileDiffsWithMergeBase
// - gitlens.views.openChangedFileDiffsWithWorking
// - gitlens.views.openChangedFileDiffsWithWorkingIndividually
// - gitlens.views.openChangedFileRevisions
// - gitlens.views.openChangedFiles
// - gitlens.views.openChanges
// - gitlens.views.openChangesWithMergeBase
// - gitlens.views.openChangesWithWorking
// - gitlens.views.openCommitOnRemote
// - gitlens.views.openCommitOnRemote.multi
// - gitlens.views.openDirectoryDiff
// - gitlens.views.openDirectoryDiffWithWorking
// - gitlens.views.openFile
// - gitlens.views.openFileRevision
// - gitlens.views.openInIntegratedTerminal
// - gitlens.views.openInTerminal
// - gitlens.views.openInWorktree
// - gitlens.views.openOnlyChangedFiles
// - gitlens.views.openPausedOperationInRebaseEditor
// - gitlens.views.openPreviousChangesWithWorking
// - gitlens.views.openPullRequest
// - gitlens.views.openPullRequestChanges
// - gitlens.views.openPullRequestComparison
// - gitlens.views.openUrl
// - gitlens.views.openUrl.multi
// - gitlens.views.openWorktree
// - gitlens.views.openWorktreeInNewWindow
// - gitlens.views.openWorktreeInNewWindow.multi
// - gitlens.views.patchDetails.close
// - gitlens.views.patchDetails.focus
// - gitlens.views.patchDetails.refresh
// - gitlens.views.patchDetails.resetViewLocation
// - gitlens.views.pruneRemote
// - gitlens.views.publishBranch
// - gitlens.views.publishRepository
// - gitlens.views.pull
// - gitlens.views.pullRequest.close
// - gitlens.views.pullRequest.focus
// - gitlens.views.pullRequest.refresh
// - gitlens.views.pullRequest.resetViewLocation
// - gitlens.views.pullRequest.setFilesLayoutToAuto
// - gitlens.views.pullRequest.setFilesLayoutToList
// - gitlens.views.pullRequest.setFilesLayoutToTree
// - gitlens.views.pullRequest.setShowAvatarsOff
// - gitlens.views.pullRequest.setShowAvatarsOn
// - gitlens.views.push
// - gitlens.views.pushToCommit
// - gitlens.views.pushWithForce
// - gitlens.views.rebaseOntoBranch
// - gitlens.views.rebaseOntoCommit
// - gitlens.views.rebaseOntoUpstream
// - gitlens.views.refreshNode
// - gitlens.views.remotes.attach
// - gitlens.views.remotes.focus
// - gitlens.views.remotes.refresh
// - gitlens.views.remotes.removeView
// - gitlens.views.remotes.resetViewLocation
// - gitlens.views.remotes.setFilesLayoutToAuto
// - gitlens.views.remotes.setFilesLayoutToList
// - gitlens.views.remotes.setFilesLayoutToTree
// - gitlens.views.remotes.setLayoutToList
// - gitlens.views.remotes.setLayoutToTree
// - gitlens.views.remotes.setShowAvatarsOff
// - gitlens.views.remotes.setShowAvatarsOn
// - gitlens.views.remotes.setShowBranchPullRequestOff
// - gitlens.views.remotes.setShowBranchPullRequestOn
// - gitlens.views.remotes.toggleVisibility
// - gitlens.views.remotes.viewOptionsTitle
// - gitlens.views.removeRemote
// - gitlens.views.renameBranch
// - gitlens.views.repositories.attach
// - gitlens.views.repositories.focus
// - gitlens.views.repositories.refresh
// - gitlens.views.repositories.removeView
// - gitlens.views.repositories.resetViewLocation
// - gitlens.views.repositories.setAutoRefreshToOff
// - gitlens.views.repositories.setAutoRefreshToOn
// - gitlens.views.repositories.setBranchesLayoutToList
// - gitlens.views.repositories.setBranchesLayoutToTree
// - gitlens.views.repositories.setBranchesShowBranchComparisonOff
// - gitlens.views.repositories.setBranchesShowBranchComparisonOn
// - gitlens.views.repositories.setBranchesShowStashesOff
// - gitlens.views.repositories.setBranchesShowStashesOn
// - gitlens.views.repositories.setFilesLayoutToAuto
// - gitlens.views.repositories.setFilesLayoutToList
// - gitlens.views.repositories.setFilesLayoutToTree
// - gitlens.views.repositories.setShowAvatarsOff
// - gitlens.views.repositories.setShowAvatarsOn
// - gitlens.views.repositories.setShowSectionBranchComparisonOff
// - gitlens.views.repositories.setShowSectionBranchComparisonOn
// - gitlens.views.repositories.setShowSectionBranchesOff
// - gitlens.views.repositories.setShowSectionBranchesOn
// - gitlens.views.repositories.setShowSectionCommitsOff
// - gitlens.views.repositories.setShowSectionCommitsOn
// - gitlens.views.repositories.setShowSectionContributorsOff
// - gitlens.views.repositories.setShowSectionContributorsOn
// - gitlens.views.repositories.setShowSectionOff
// - gitlens.views.repositories.setShowSectionRemotesOff
// - gitlens.views.repositories.setShowSectionRemotesOn
// - gitlens.views.repositories.setShowSectionStashesOff
// - gitlens.views.repositories.setShowSectionStashesOn
// - gitlens.views.repositories.setShowSectionTagsOff
// - gitlens.views.repositories.setShowSectionTagsOn
// - gitlens.views.repositories.setShowSectionUpstreamStatusOff
// - gitlens.views.repositories.setShowSectionUpstreamStatusOn
// - gitlens.views.repositories.setShowSectionWorktreesOff
// - gitlens.views.repositories.setShowSectionWorktreesOn
// - gitlens.views.repositories.toggleVisibility
// - gitlens.views.repositories.viewOptionsTitle
// - gitlens.views.resetCommit
// - gitlens.views.resetToCommit
// - gitlens.views.resetToTip
// - gitlens.views.restore
// - gitlens.views.revealRepositoryInExplorer
// - gitlens.views.revealWorktreeInExplorer
// - gitlens.views.revert
// - gitlens.views.scm.grouped.attachAll
// - gitlens.views.scm.grouped.branches.attach
// - gitlens.views.scm.grouped.branches.detach
// - gitlens.views.scm.grouped.branches.setAsDefault
// - gitlens.views.scm.grouped.branches.visibility.hide
// - gitlens.views.scm.grouped.branches.visibility.show
// - gitlens.views.scm.grouped.commits.attach
// - gitlens.views.scm.grouped.commits.detach
// - gitlens.views.scm.grouped.commits.setAsDefault
// - gitlens.views.scm.grouped.commits.visibility.hide
// - gitlens.views.scm.grouped.commits.visibility.show
// - gitlens.views.scm.grouped.contributors.attach
// - gitlens.views.scm.grouped.contributors.detach
// - gitlens.views.scm.grouped.contributors.setAsDefault
// - gitlens.views.scm.grouped.contributors.visibility.hide
// - gitlens.views.scm.grouped.contributors.visibility.show
// - gitlens.views.scm.grouped.detachAll
// - gitlens.views.scm.grouped.fileHistory.attach
// - gitlens.views.scm.grouped.fileHistory.detach
// - gitlens.views.scm.grouped.fileHistory.setAsDefault
// - gitlens.views.scm.grouped.fileHistory.visibility.hide
// - gitlens.views.scm.grouped.fileHistory.visibility.show
// - gitlens.views.scm.grouped.focus
// - gitlens.views.scm.grouped.launchpad.attach
// - gitlens.views.scm.grouped.launchpad.detach
// - gitlens.views.scm.grouped.launchpad.setAsDefault
// - gitlens.views.scm.grouped.launchpad.visibility.hide
// - gitlens.views.scm.grouped.launchpad.visibility.show
// - gitlens.views.scm.grouped.refresh
// - gitlens.views.scm.grouped.remotes.attach
// - gitlens.views.scm.grouped.remotes.detach
// - gitlens.views.scm.grouped.remotes.setAsDefault
// - gitlens.views.scm.grouped.remotes.visibility.hide
// - gitlens.views.scm.grouped.remotes.visibility.show
// - gitlens.views.scm.grouped.removeView
// - gitlens.views.scm.grouped.repositories
// - gitlens.views.scm.grouped.repositories.attach
// - gitlens.views.scm.grouped.repositories.detach
// - gitlens.views.scm.grouped.repositories.setAsDefault
// - gitlens.views.scm.grouped.repositories.visibility.hide
// - gitlens.views.scm.grouped.repositories.visibility.show
// - gitlens.views.scm.grouped.resetAll
// - gitlens.views.scm.grouped.resetViewLocation
// - gitlens.views.scm.grouped.searchAndCompare.attach
// - gitlens.views.scm.grouped.searchAndCompare.detach
// - gitlens.views.scm.grouped.searchAndCompare.setAsDefault
// - gitlens.views.scm.grouped.searchAndCompare.visibility.hide
// - gitlens.views.scm.grouped.searchAndCompare.visibility.show
// - gitlens.views.scm.grouped.stashes.attach
// - gitlens.views.scm.grouped.stashes.detach
// - gitlens.views.scm.grouped.stashes.setAsDefault
// - gitlens.views.scm.grouped.stashes.visibility.hide
// - gitlens.views.scm.grouped.stashes.visibility.show
// - gitlens.views.scm.grouped.tags.attach
// - gitlens.views.scm.grouped.tags.detach
// - gitlens.views.scm.grouped.tags.setAsDefault
// - gitlens.views.scm.grouped.tags.visibility.hide
// - gitlens.views.scm.grouped.tags.visibility.show
// - gitlens.views.scm.grouped.toggleVisibility
// - gitlens.views.scm.grouped.welcome.dismiss
// - gitlens.views.scm.grouped.welcome.restore
// - gitlens.views.scm.grouped.worktrees.attach
// - gitlens.views.scm.grouped.worktrees.detach
// - gitlens.views.scm.grouped.worktrees.setAsDefault
// - gitlens.views.scm.grouped.worktrees.visibility.hide
// - gitlens.views.scm.grouped.worktrees.visibility.show
// - gitlens.views.searchAndCompare.attach
// - gitlens.views.searchAndCompare.clear
// - gitlens.views.searchAndCompare.focus
// - gitlens.views.searchAndCompare.refresh
// - gitlens.views.searchAndCompare.resetViewLocation
// - gitlens.views.searchAndCompare.searchCommits
// - gitlens.views.searchAndCompare.selectForCompare
// - gitlens.views.searchAndCompare.setFilesLayoutToAuto
// - gitlens.views.searchAndCompare.setFilesLayoutToList
// - gitlens.views.searchAndCompare.setFilesLayoutToTree
// - gitlens.views.searchAndCompare.setShowAvatarsOff
// - gitlens.views.searchAndCompare.setShowAvatarsOn
// - gitlens.views.searchAndCompare.swapComparison
// - gitlens.views.searchAndCompare.viewOptionsTitle
// - gitlens.views.selectFileForCompare
// - gitlens.views.selectForCompare
// - gitlens.views.setAsDefault
// - gitlens.views.setBranchComparisonToBranch
// - gitlens.views.setBranchComparisonToWorking
// - gitlens.views.setContributorsStatisticsOff
// - gitlens.views.setContributorsStatisticsOn
// - gitlens.views.setResultsCommitsFilterAuthors
// - gitlens.views.setResultsCommitsFilterOff
// - gitlens.views.setResultsFilesFilterOff
// - gitlens.views.setResultsFilesFilterOnLeft
// - gitlens.views.setResultsFilesFilterOnRight
// - gitlens.views.setShowRelativeDateMarkersOff
// - gitlens.views.setShowRelativeDateMarkersOn
// - gitlens.views.skipPausedOperation
// - gitlens.views.stageDirectory
// - gitlens.views.stageFile
// - gitlens.views.star
// - gitlens.views.star.multi
// - gitlens.views.stashes.attach
// - gitlens.views.stashes.focus
// - gitlens.views.stashes.refresh
// - gitlens.views.stashes.resetViewLocation
// - gitlens.views.stashes.setFilesLayoutToAuto
// - gitlens.views.stashes.setFilesLayoutToList
// - gitlens.views.stashes.setFilesLayoutToTree
// - gitlens.views.stashes.viewOptionsTitle
// - gitlens.views.switchToAnotherBranch
// - gitlens.views.switchToBranch
// - gitlens.views.switchToCommit
// - gitlens.views.switchToTag
// - gitlens.views.tags.attach
// - gitlens.views.tags.focus
// - gitlens.views.tags.refresh
// - gitlens.views.tags.resetViewLocation
// - gitlens.views.tags.setFilesLayoutToAuto
// - gitlens.views.tags.setFilesLayoutToList
// - gitlens.views.tags.setFilesLayoutToTree
// - gitlens.views.tags.setLayoutToList
// - gitlens.views.tags.setLayoutToTree
// - gitlens.views.tags.setShowAvatarsOff
// - gitlens.views.tags.setShowAvatarsOn
// - gitlens.views.tags.viewOptionsTitle
// - gitlens.views.timeline.focus
// - gitlens.views.timeline.refresh
// - gitlens.views.timeline.removeView
// - gitlens.views.timeline.resetViewLocation
// - gitlens.views.timeline.toggleVisibility
// - gitlens.views.title.createBranch
// - gitlens.views.title.createTag
// - gitlens.views.title.createWorktree
// - gitlens.views.undoCommit
// - gitlens.views.unsetAsDefault
// - gitlens.views.unstageDirectory
// - gitlens.views.unstageFile
// - gitlens.views.unstar
// - gitlens.views.unstar.multi
// - gitlens.views.workspaces.addRepos
// - gitlens.views.workspaces.addReposFromLinked
// - gitlens.views.workspaces.changeAutoAddSetting
// - gitlens.views.workspaces.convert
// - gitlens.views.workspaces.create
// - gitlens.views.workspaces.createLocal
// - gitlens.views.workspaces.delete
// - gitlens.views.workspaces.focus
// - gitlens.views.workspaces.info
// - gitlens.views.workspaces.locateAllRepos
// - gitlens.views.workspaces.openLocal
// - gitlens.views.workspaces.openLocalNewWindow
// - gitlens.views.workspaces.refresh
// - gitlens.views.workspaces.removeView
// - gitlens.views.workspaces.repo.addToWindow
// - gitlens.views.workspaces.repo.locate
// - gitlens.views.workspaces.repo.open
// - gitlens.views.workspaces.repo.openInNewWindow
// - gitlens.views.workspaces.repo.remove
// - gitlens.views.workspaces.resetViewLocation
// - gitlens.views.workspaces.toggleVisibility
// - gitlens.views.worktrees.attach
// - gitlens.views.worktrees.focus
// - gitlens.views.worktrees.refresh
// - gitlens.views.worktrees.resetViewLocation
// - gitlens.views.worktrees.setFilesLayoutToAuto
// - gitlens.views.worktrees.setFilesLayoutToList
// - gitlens.views.worktrees.setFilesLayoutToTree
// - gitlens.views.worktrees.setLayoutToList
// - gitlens.views.worktrees.setLayoutToTree
// - gitlens.views.worktrees.setShowAvatarsOff
// - gitlens.views.worktrees.setShowAvatarsOn
// - gitlens.views.worktrees.setShowBranchComparisonOff
// - gitlens.views.worktrees.setShowBranchComparisonOn
// - gitlens.views.worktrees.setShowBranchPullRequestOff
// - gitlens.views.worktrees.setShowBranchPullRequestOn
// - gitlens.views.worktrees.setShowStashesOff
// - gitlens.views.worktrees.setShowStashesOn
// - gitlens.views.worktrees.viewOptionsTitle
// - gitlens.visualizeHistory
// - gitlens.visualizeHistory.file
// - gitlens.visualizeHistory.file:editor
// - gitlens.visualizeHistory.file:explorer
// - gitlens.visualizeHistory.file:scm
// - gitlens.visualizeHistory.file:views
// - gitlens.visualizeHistory.folder:explorer
// - gitlens.visualizeHistory.folder:scm
// - gitlens.walkthrough.connectIntegrations
// - gitlens.walkthrough.enableAiSetting
// - gitlens.walkthrough.gitlensInspect
// - gitlens.walkthrough.openAcceleratePrReviews
// - gitlens.walkthrough.openAiCustomInstructionsSettings
// - gitlens.walkthrough.openAiSettings
// - gitlens.walkthrough.openCommunityVsPro
// - gitlens.walkthrough.openDevExPlatform
// - gitlens.walkthrough.openHelpCenter
// - gitlens.walkthrough.openHomeViewVideo
// - gitlens.walkthrough.openInteractiveCodeHistory
// - gitlens.walkthrough.openLearnAboutAiFeatures
// - gitlens.walkthrough.openStartIntegrations
// - gitlens.walkthrough.openStreamlineCollaboration
// - gitlens.walkthrough.openWalkthrough
// - gitlens.walkthrough.plus.reactivate
// - gitlens.walkthrough.plus.signUp
// - gitlens.walkthrough.plus.upgrade
// - gitlens.walkthrough.showAutolinks
// - gitlens.walkthrough.showDraftsView
// - gitlens.walkthrough.showGraph
// - gitlens.walkthrough.showHomeView
// - gitlens.walkthrough.showLaunchpad
// - gitlens.walkthrough.switchAIProvider
// - gitlens.walkthrough.worktree.create
// - goToNextReferenceFromEmbeddedEditor
// - goToPreviousReferenceFromEmbeddedEditor
// - hideCustomTitleBar
// - hideCustomTitleBarInFullScreen
// - imagePreview.copyImage
// - imagePreview.zoomIn
// - imagePreview.zoomOut
// - inlayHints.startReadingLineWithHint
// - inline-symbol
// - inlineBookmarks.debug.state.reset
// - inlineBookmarks.jumpToNext
// - inlineBookmarks.jumpToPrevious
// - inlineBookmarks.jumpToRange
// - inlineBookmarks.listBookmarks
// - inlineBookmarks.listVisibleBookmarks
// - inlineBookmarks.refresh
// - inlineBookmarks.scanWorkspace
// - inlineBookmarks.setTreeViewFilterWords
// - inlineBookmarks.showSelectBookmark
// - inlineBookmarks.showSelectVisibleBookmark
// - inlineBookmarks.toggleShowVisibleFilesOnly
// - inlineBookmarks.toggleViewKeepFilesExpanded
// - inlineBookmarksExplorer.focus
// - inlineBookmarksExplorer.removeView
// - inlineBookmarksExplorer.resetViewLocation
// - inlineBookmarksExplorer.toggleVisibility
// - inlineChat.configure
// - inlineChat.showHint
// - inlineChat.toggleDiff
// - interactive.acceptChanges
// - interactive.input.clear
// - interactive.input.focus
// - interactiveCascade.resolveSuggestedAction
// - interactiveEditor.start
// - introduce-let
// - ipynb.cleanInvalidImageAttachment
// - ipynb.newUntitledIpynb
// - ipynb.openIpynbInNotebookEditor
// - issue.chatSuggestFix
// - issue.chatSummarizeIssue
// - issue.continueWorking
// - issue.copyGithubDevLink
// - issue.copyGithubDevLinkFile
// - issue.copyGithubDevLinkWithoutRange
// - issue.copyGithubHeadLink
// - issue.copyGithubHeadLinkWithoutRange
// - issue.copyGithubPermalink
// - issue.copyGithubPermalinkWithoutRange
// - issue.copyIssueNumber
// - issue.copyIssueUrl
// - issue.copyMarkdownGithubPermalink
// - issue.copyMarkdownGithubPermalinkWithoutRange
// - issue.createIssue
// - issue.createIssueFromClipboard
// - issue.createIssueFromSelection
// - issue.editQuery
// - issue.getCurrent
// - issue.goToLinkedCode
// - issue.issueCompletion
// - issue.openGithubPermalink
// - issue.openIssue
// - issue.refresh
// - issue.signinAndRefreshList
// - issue.startWorking
// - issue.startWorkingBranchDescriptiveTitle
// - issue.startWorkingBranchPrompt
// - issue.statusBar
// - issue.stopWorking
// - issue.stopWorkingBranchDescriptiveTitle
// - issue.userCompletion
// - issues.openIssuesWebsite
// - issues:github.focus
// - issues:github.removeView
// - issues:github.resetViewLocation
// - issues:github.toggleVisibility
// - javascript.goToProjectConfig
// - javascript.reloadProjects
// - javascript.removeUnusedImports
// - javascript.sortImports
// - joyride.createUserActivateScript
// - joyride.createUserHelloScript
// - joyride.createUserScript
// - joyride.createUserSourceFile
// - joyride.createWorkspaceActivateScript
// - joyride.createWorkspaceHelloScript
// - joyride.disableNReplMessageLogging
// - joyride.enableNReplMessageLogging
// - joyride.openUserDirectory
// - joyride.openUserScript
// - joyride.openWorkspaceScript
// - joyride.startNReplServer
// - joyride.stopNReplServer
// - jsBrowserBreakpoints.focus
// - jsBrowserBreakpoints.resetViewLocation
// - jsDebugNetworkTree.focus
// - jsDebugNetworkTree.resetViewLocation
// - jsExcludedCallers.focus
// - jsExcludedCallers.resetViewLocation
// - json.clearCache
// - json.sort
// - json.validate
// - jsonOutline.focus
// - jsonOutline.refresh
// - jsonOutline.refreshNode
// - jsonOutline.removeView
// - jsonOutline.renameNode
// - jsonOutline.resetViewLocation
// - jsonOutline.toggleVisibility
// - jumpToSchema
// - keybindings.editor.clearSearchHistory
// - keybindings.editor.copyCommandKeybindingEntry
// - keybindings.editor.copyCommandTitle
// - keybindings.editor.resetKeybinding
// - keybindings.editor.showConflicts
// - keybindings.editor.showDefaultKeybindings
// - keybindings.editor.showExtensionKeybindings
// - keybindings.editor.showUserKeybindings
// - keywordActivation.status.command
// - l13Diff.action.actions.copyToLeftFolder
// - l13Diff.action.actions.copyToRightFolder
// - l13Diff.action.actions.selectCreatedEntries
// - l13Diff.action.actions.selectDeletedEntries
// - l13Diff.action.actions.selectModifiedEntries
// - l13Diff.action.developer.backup
// - l13Diff.action.developer.clear
// - l13Diff.action.developer.remove
// - l13Diff.action.developer.restore
// - l13Diff.action.developer.reveal
// - l13Diff.action.explorer.compareSelected
// - l13Diff.action.explorer.compareWithSelected
// - l13Diff.action.explorer.selectForCompare
// - l13Diff.action.favorite.addToGroup
// - l13Diff.action.favorite.compare
// - l13Diff.action.favorite.compareInCurrentPanel
// - l13Diff.action.favorite.compareInNewPanel
// - l13Diff.action.favorite.copyLeftPath
// - l13Diff.action.favorite.copyRightPath
// - l13Diff.action.favorite.remove
// - l13Diff.action.favorite.removeFromGroup
// - l13Diff.action.favorite.rename
// - l13Diff.action.favoriteGroups.add
// - l13Diff.action.favoriteGroups.compareAll
// - l13Diff.action.favoriteGroups.compareAllSideBySide
// - l13Diff.action.favoriteGroups.remove
// - l13Diff.action.favoriteGroups.rename
// - l13Diff.action.favorites.clear
// - l13Diff.action.favorites.export
// - l13Diff.action.favorites.import
// - l13Diff.action.history.addToFavorites
// - l13Diff.action.history.clear
// - l13Diff.action.history.compare
// - l13Diff.action.history.compareInCurrentPanel
// - l13Diff.action.history.compareInNewPanel
// - l13Diff.action.history.copyLeftPath
// - l13Diff.action.history.copyRightPath
// - l13Diff.action.history.remove
// - l13Diff.action.input.pickLeftFile
// - l13Diff.action.input.pickLeftFolder
// - l13Diff.action.input.pickRightFile
// - l13Diff.action.input.pickRightFolder
// - l13Diff.action.projects.compareWithSelected
// - l13Diff.action.projects.compareWithWorkspace
// - l13Diff.action.projects.open
// - l13Diff.action.projects.selectForCompare
// - l13Diff.action.settings.compareEndOfLine
// - l13Diff.action.settings.compareWhitespace
// - l13Diff.action.settings.ignoreCaseSensitive
// - l13Diff.action.settings.ignoreEndOfLine
// - l13Diff.action.settings.ignoreWhitespace
// - l13Diff.action.settings.useCaseSensitive
// - l13DiffFavorites.focus
// - l13DiffFavorites.removeView
// - l13DiffFavorites.resetViewLocation
// - l13DiffFavorites.toggleVisibility
// - l13DiffHistory.focus
// - l13DiffHistory.removeView
// - l13DiffHistory.resetViewLocation
// - l13DiffHistory.toggleVisibility
// - lastCursorLineSelect
// - lastCursorLineSelectDrag
// - lastCursorWordSelect
// - layoutEditorGroups
// - list.collapseAllToFocus
// - list.focusParent
// - list.resizeColumn
// - list.scrollLeft
// - list.scrollRight
// - list.selectAndPreserveFocus
// - list.toggleFilterOnType
// - list.toggleFindMatchType
// - list.toggleFindMode
// - list.toggleKeyboardNavigation
// - list.triggerTypeNavigation
// - lntoggle.hide
// - lntoggle.show
// - loadedScripts.collapse
// - markdown.editor.insertImageFromWorkspace
// - markdown.editor.insertLinkFromWorkspace
// - markdown.findAllFileReferences
// - markdown.preview.refresh
// - markdown.preview.toggleLock
// - markdown.showLockedPreviewToSide
// - markdown.showPreviewSecuritySelector
// - markdown.showSource
// - meld-diff.diffCurrentToOther
// - meld-diff.diffCurrentToOtherOpen
// - meld-diff.diffFromFileList
// - meld-diff.diffFromFileListMultiple
// - meld-diff.diffFromFileListSelect
// - meld-diff.diffSavedVersion
// - meld-diff.diffScm
// - meld-diff.diffVisible
// - meld-diff.diffWithClipboard
// - meld-diff.openFromDiffView
// - menu.resetHiddenStates
// - merge-conflict.accept.all-both
// - merge-conflict.accept.all-current
// - merge-conflict.accept.all-incoming
// - merge-conflict.accept.both
// - merge-conflict.accept.current
// - merge-conflict.accept.incoming
// - merge-conflict.accept.selection
// - merge-conflict.compare
// - merge-conflict.next
// - merge-conflict.previous
// - merge.acceptAllInput1
// - merge.acceptAllInput2
// - merge.columnLayout
// - merge.dev.copyContentsJson
// - merge.dev.loadContentsFromFolder
// - merge.dev.openContentsJson
// - merge.dev.openSelectionInTemporaryMergeEditor
// - merge.dev.saveContentsToFolder
// - merge.goToNextUnhandledConflict
// - merge.goToPreviousUnhandledConflict
// - merge.mixedLayout
// - merge.openBaseEditor
// - merge.openResult
// - merge.showBase
// - merge.showBaseCenter
// - merge.showBaseTop
// - merge.showNonConflictingChanges
// - merge.toggleActiveConflictInput1
// - merge.toggleActiveConflictInput2
// - mergeEditor.acceptMerge
// - mergeEditor.compareInput1WithBase
// - mergeEditor.compareInput2WithBase
// - mergeEditor.resetCloseWithConflictsChoice
// - mergeEditor.resetResultToBaseAndAutoMerge
// - move-coll-entry-down
// - move-coll-entry-up
// - move-form
// - move-to-let
// - multiDiffEditor.collapseAll
// - multiDiffEditor.expandAll
// - multiDiffEditor.goToFile
// - noop
// - notebook.action.changeTabDisplaySize
// - notebook.action.convertIndentationToSpaces
// - notebook.action.convertIndentationToTabs
// - notebook.action.indentUsingSpaces
// - notebook.action.indentUsingTabs
// - notebook.action.toggleNotebookStickyScroll
// - notebook.cancelExecution
// - notebook.cell.cancelExecution
// - notebook.cell.chat.close
// - notebook.cell.chat.explainError
// - notebook.cell.chat.fixError
// - notebook.cell.chat.restore
// - notebook.cell.chat.startAtTop
// - notebook.cell.chat.stop
// - notebook.cell.collapseAllCellInputs
// - notebook.cell.collapseAllCellOutputs
// - notebook.cell.copy
// - notebook.cell.cut
// - notebook.cell.executeAndFocusContainer
// - notebook.cell.executeCellAndBelow
// - notebook.cell.executeCellsAbove
// - notebook.cell.expandAllCellInputs
// - notebook.cell.expandAllCellOutputs
// - notebook.cell.insertCodeCellAboveAndFocusContainer
// - notebook.cell.insertCodeCellAtTop
// - notebook.cell.insertCodeCellBelowAndFocusContainer
// - notebook.cell.insertMarkdownCellAbove
// - notebook.cell.insertMarkdownCellAtTop
// - notebook.cell.insertMarkdownCellBelow
// - notebook.cell.joinSelected
// - notebook.cell.paste
// - notebook.cell.toggleLineNumbers
// - notebook.cell.toggleOutputs
// - notebook.cellOuput.showEmptyOutputs
// - notebook.cellOutput.addToChat
// - notebook.cellOutput.copy
// - notebook.cellOutput.openInTextEditor
// - notebook.chat.selectAndInsertKernelVariable
// - notebook.clearAllCellsOutputs
// - notebook.clearAllInlineValues
// - notebook.clearNotebookEdtitorTypeCache
// - notebook.clearNotebookKernelsMRUCache
// - notebook.developer.addCellOverlays
// - notebook.developer.addViewZones
// - notebook.diff.cell.revertInput
// - notebook.diff.cell.revertMetadata
// - notebook.diff.cell.revertOutputs
// - notebook.diff.cell.switchOutputRenderingStyleToText
// - notebook.diff.cell.toggleCollapseUnchangedRegions
// - notebook.diff.inline.toggle
// - notebook.diff.openFile
// - notebook.diff.revertMetadata
// - notebook.diff.showMetadata
// - notebook.diff.showOutputs
// - notebook.diff.switchToText
// - notebook.diffEditor.2.cell.revertInput
// - notebook.diffEditor.2.cell.revertMetadata
// - notebook.diffEditor.2.cell.revertOutputs
// - notebook.diffEditor.2.goToCell
// - notebook.diffEditor.hideUnchangedCells
// - notebook.diffEditor.showUnchangedCells
// - notebook.execute
// - notebook.inlineChat.acceptChangesAndRun
// - notebook.inspectLayout
// - notebook.interruptExecution
// - notebook.openVariablesView
// - notebook.outline.toggleCodeCellSymbols
// - notebook.outline.toggleCodeCells
// - notebook.outline.toggleShowMarkdownHeadersOnly
// - notebook.renderAllMarkdownCells
// - notebook.revealLastFailedCell
// - notebook.revealRunningCell
// - notebook.saveMimeTypeOrder
// - notebook.section.expandSection
// - notebook.section.foldSection
// - notebook.section.runCells
// - notebook.section.runSingleCell
// - notebook.selectIndentation
// - notebook.setProfile
// - notebook.toggle.diff.cell.ignoreTrimWhitespace
// - notebook.toggleCellToolbarPosition
// - notebook.toggleCellToolbarPositionFromEditorTitle
// - notebook.toggleLayoutTroubleshoot
// - notebook.toggleLineNumbers
// - notebook.toggleLineNumbersFromEditorTitle
// - notification.chatSummarizeNotification
// - notification.markAsDone
// - notification.markAsRead
// - notification.openOnGitHub
// - notifications.clearAll
// - notifications.focusToasts
// - notifications.loadMore
// - notifications.refresh
// - notifications.sortByPriority
// - notifications.sortByTimestamp
// - notifications.toggleDoNotDisturbMode
// - notifications.toggleDoNotDisturbModeBySource
// - notifications.toggleList
// - notifications:github.focus
// - notifications:github.resetViewLocation
// - npm.debugScript
// - npm.debugScriptFromHover
// - npm.focus
// - npm.openScript
// - npm.packageManager
// - npm.refresh
// - npm.removeView
// - npm.resetViewLocation
// - npm.runInstall
// - npm.runScript
// - npm.runScriptFromFolder
// - npm.runScriptFromHover
// - npm.runSelectedScript
// - npm.scriptRunner
// - npm.toggleVisibility
// - oneDarkPro.cancelBold
// - oneDarkPro.cancelItalic
// - oneDarkPro.cancelVivid
// - oneDarkPro.setBold
// - oneDarkPro.setItalic
// - oneDarkPro.setVivid
// - oneDarkPro.showChangelog
// - open-terminal.open
// - open-terminal.run
// - open-terminal.stop
// - open-terminal.toggle
// - openEditors.closeAll
// - openEditors.newUntitledFile
// - openInIntegratedTerminal
// - openInTerminal
// - openReference
// - openapi.addApprovedHost
// - openapi.addBasePath
// - openapi.addDefinitionObject
// - openapi.addHost
// - openapi.addInfo
// - openapi.addOperation
// - openapi.addParameterBody
// - openapi.addParameterOther
// - openapi.addParameterPath
// - openapi.addPath
// - openapi.addResponse
// - openapi.addSecurity
// - openapi.addSecurityDefinitionApiKey
// - openapi.addSecurityDefinitionBasic
// - openapi.addSecurityDefinitionOauth2Access
// - openapi.copyJsonReference
// - openapi.copyNodeJsonReference
// - openapi.createNewThree
// - openapi.createNewThreeOne
// - openapi.createNewThreeOneYaml
// - openapi.createNewThreeYaml
// - openapi.createNewTwo
// - openapi.createNewTwoYaml
// - openapi.deleteOperation
// - openapi.deletePath
// - openapi.editorSingleOperationAudit
// - openapi.exportAuditReport
// - openapi.focusSecurityAudit
// - openapi.focusSecurityAuditById
// - openapi.generateSchemaQuickFix
// - openapi.goToLine
// - openapi.outline.resetSearch
// - openapi.outlineSingleOperationAudit
// - openapi.outlineSingleOperationScan
// - openapi.outlineTryOperation
// - openapi.platform.apiRename
// - openapi.platform.apisFilter
// - openapi.platform.apisFilterReset
// - openapi.platform.browseDataDictionaries
// - openapi.platform.collectionAddToFavorite
// - openapi.platform.collectionRemoveFromFavorite
// - openapi.platform.collectionRename
// - openapi.platform.collectionsFilter
// - openapi.platform.collectionsFilterReset
// - openapi.platform.copyToClipboard
// - openapi.platform.createApi
// - openapi.platform.createApiFromUrl
// - openapi.platform.createCollection
// - openapi.platform.dataDictionaryPreAuditBulkUpdateProperties
// - openapi.platform.deleteApi
// - openapi.platform.deleteCollection
// - openapi.platform.editApi
// - openapi.platform.editorDataDictionaryBulkUpdateProperties
// - openapi.platform.editorDataDictionaryUpdateAllProperties
// - openapi.platform.editorDataDictionaryUpdateProperty
// - openapi.platform.editorOpenScanconfig
// - openapi.platform.editorReloadApiFromUrl
// - openapi.platform.editorRunFirstOperationScan
// - openapi.platform.editorRunSingleOperationScan
// - openapi.platform.exportScanReport
// - openapi.platform.favoriteApisFilter
// - openapi.platform.favoriteApisFilterReset
// - openapi.platform.focusApi
// - openapi.platform.focusCollection
// - openapi.platform.loadAuditReportFromFile
// - openapi.platform.loadMoreApis
// - openapi.platform.loadMoreCollections
// - openapi.platform.loadMoreFavoriteApis
// - openapi.platform.openAuditReport
// - openapi.platform.openFile
// - openapi.platform.openInWebUI
// - openapi.platform.openSignUp
// - openapi.platform.refreshCollections
// - openapi.platform.setTags
// - openapi.previewRedoc
// - openapi.previewSwaggerUI
// - openapi.searchOutline
// - openapi.securityAudit
// - openapi.securityGqlAudit
// - openapi.showConfiguration
// - openapi.showEnvironment
// - openapi.showSettings
// - openapi.simpleQuickFix
// - openapi.tryOperation
// - openapi.tryOperationWithExample
// - openapi.v3addComponentsParameter
// - openapi.v3addComponentsResponse
// - openapi.v3addComponentsSchema
// - openapi.v3addInfo
// - openapi.v3addSecuritySchemeApiKey
// - openapi.v3addSecuritySchemeBasic
// - openapi.v3addSecuritySchemeJWT
// - openapi.v3addSecuritySchemeOauth2Access
// - openapi.v3addServer
// - openapiNotSelectedOutline.focus
// - openapiNotSelectedOutline.removeView
// - openapiNotSelectedOutline.resetViewLocation
// - openapiNotSelectedOutline.toggleVisibility
// - openapiOutline.focus
// - openapiOutline.resetViewLocation
// - opened-editors.copyFileName
// - opened-editors.copyFileNameWithExtension
// - opened-editors.copyFolderName
// - opened-editors.copyPath
// - opened-editors.fileTreeGenerator
// - opened-editors.fold
// - opened-editors.formatDocument
// - opened-editors.openedEditors
// - opened-editors.revealSidebar
// - opened-editors.unfold
// - outline.collapse
// - outline.expand
// - outline.filterOnType
// - outline.focus
// - outline.followCursor
// - outline.removeView
// - outline.resetViewLocation
// - outline.sortByKind
// - outline.sortByName
// - outline.sortByPosition
// - outline.toggleVisibility
// - owlbear.toggleAutoformat
// - owlbear.toggleParedit
// - paredit.backwardSexpOrUp
// - paredit.forwardSexpOrUp
// - paredit.insertSemiColon
// - paredit.selectBackwardSexpOrUp
// - paredit.selectForwardSexpOrUp
// - paste
// - perf.event.profiling
// - perf.insta.printAsyncCycles
// - perf.insta.printTraces
// - perfview.show
// - plantuml.URLCurrent
// - plantuml.URLDocument
// - plantuml.exportCurrent
// - plantuml.exportDocument
// - plantuml.exportWorkspace
// - plantuml.extractSource
// - platformExplorer.focus
// - platformExplorer.resetViewLocation
// - pr.acceptMerge
// - pr.addAssigneesToNewPr
// - pr.addFileComment
// - pr.addLabelsToNewPr
// - pr.addMilestoneToNewPr
// - pr.addProjectsToNewPr
// - pr.addReviewersToNewPr
// - pr.applySuggestion
// - pr.applySuggestionWithCopilot
// - pr.cancelEditComment
// - pr.checkoutByNumber
// - pr.checkoutFromReadonlyFile
// - pr.close
// - pr.closeRelatedEditors
// - pr.collapseAllComments
// - pr.configurePRViewlet
// - pr.configureRemotes
// - pr.copyCommentLink
// - pr.copyCommitHash
// - pr.copyVscodeDevPrLink
// - pr.create
// - pr.createComment
// - pr.createPrMenuCreate
// - pr.createPrMenuDraft
// - pr.createPrMenuMerge
// - pr.createPrMenuMergeWhenReady
// - pr.createPrMenuRebase
// - pr.createPrMenuSquash
// - pr.createSingleComment
// - pr.deleteComment
// - pr.deleteLocalBranch
// - pr.deleteLocalBranchesNRemotes
// - pr.diffOutdatedCommentWithHead
// - pr.dismissNotification
// - pr.editComment
// - pr.editQuery
// - pr.exit
// - pr.focusDescriptionInput
// - pr.goToNextDiffInPr
// - pr.goToPreviousDiffInPr
// - pr.loadMore
// - pr.markFileAsViewed
// - pr.merge
// - pr.openAllDiffs
// - pr.openChanges
// - pr.openDescription
// - pr.openDescriptionToTheSide
// - pr.openDiffView
// - pr.openDiffViewFromEditor
// - pr.openFileOnGitHub
// - pr.openModifiedFile
// - pr.openOriginalFile
// - pr.openPullRequestOnGitHub
// - pr.openPullsWebsite
// - pr.openReview
// - pr.pick
// - pr.pickOnVscodeDev
// - pr.preReview
// - pr.pushAndCreate
// - pr.readyForReview
// - pr.refreshActivePullRequest
// - pr.refreshChanges
// - pr.refreshComments
// - pr.refreshDescription
// - pr.refreshList
// - pr.refreshPullRequest
// - pr.resetViewedFiles
// - pr.resolveConflict
// - pr.resolveReviewThread
// - pr.saveComment
// - pr.setFileListLayoutAsFlat
// - pr.setFileListLayoutAsTree
// - pr.showDiffAll
// - pr.showDiffSinceLastReview
// - pr.signin
// - pr.signinAndRefreshList
// - pr.signinNoEnterprise
// - pr.signinenterprise
// - pr.startReview
// - pr.toggleEditorCommentingOff
// - pr.toggleEditorCommentingOn
// - pr.unmarkFileAsViewed
// - pr.unresolveReviewThread
// - pr.unresolveReviewThreadFromView
// - pr:github.focus
// - pr:github.removeView
// - pr:github.resetViewLocation
// - pr:github.toggleVisibility
// - prStatus:github.focus
// - prStatus:github.resetViewLocation
// - print.registerDocumentRenderer
// - problems.action.copyMessage
// - problems.action.copyRelatedInformationMessage
// - problems.action.showMultilineMessage
// - problems.action.showSinglelineMessage
// - projectManager.addToFavorites
// - projectManager.addToWorkspace
// - projectManager.addToWorkspace#sideBar
// - projectManager.editProjects
// - projectManager.filterProjectsByTag
// - projectManager.filterProjectsByTag#sideBar
// - projectManager.hideGitWelcome
// - projectManager.listAnyProjects#sideBarAny
// - projectManager.listFavoriteProjects#sideBarFavorites
// - projectManager.listGitProjects#sideBarGit
// - projectManager.listMercurialProjects#sideBarMercurial
// - projectManager.listProjectsNewWindow
// - projectManager.listSVNProjects#sideBarSVN
// - projectManager.listVSCodeProjects#sideBarVSCode
// - projectManager.openSettings#sideBarAny
// - projectManager.openSettings#sideBarFavorites
// - projectManager.openSettings#sideBarGit
// - projectManager.openSettings#sideBarMercurial
// - projectManager.openSettings#sideBarSVN
// - projectManager.openSettings#sideBarVSCode
// - projectManager.refreshAnyProjects
// - projectManager.refreshGitProjects
// - projectManager.refreshMercurialProjects
// - projectManager.refreshProjects
// - projectManager.refreshSVNProjects
// - projectManager.refreshVSCodeProjects
// - projectManager.saveProject
// - projectManager.showGitWelcome
// - projectManager.supportProjectManager
// - projectManager.whatsNew
// - projectManagerHelpAndFeedback.focus
// - projectManagerHelpAndFeedback.openHelpLink
// - projectManagerHelpAndFeedback.removeView
// - projectManagerHelpAndFeedback.resetViewLocation
// - projectManagerHelpAndFeedback.toggleVisibility
// - projectTree.focus
// - projectTree.openNode
// - projectTree.removeView
// - projectTree.resetViewLocation
// - projectTree.toggleVisibility
// - projectsExplorerAny.focus
// - projectsExplorerAny.resetViewLocation
// - projectsExplorerFavorites.focus
// - projectsExplorerFavorites.removeView
// - projectsExplorerFavorites.resetViewLocation
// - projectsExplorerFavorites.toggleVisibility
// - projectsExplorerGit.focus
// - projectsExplorerGit.removeView
// - projectsExplorerGit.resetViewLocation
// - projectsExplorerGit.toggleVisibility
// - projectsExplorerMercurial.focus
// - projectsExplorerMercurial.resetViewLocation
// - projectsExplorerSVN.focus
// - projectsExplorerSVN.resetViewLocation
// - projectsExplorerVSCode.focus
// - projectsExplorerVSCode.resetViewLocation
// - promote-fn
// - python._loadLanguageServerExtension
// - python.analysis.restartLanguageServer
// - python.clearCacheAndReload
// - python.clearWorkspaceInterpreter
// - python.configureTests
// - python.copilotSetupTests
// - python.createEnvironment
// - python.createEnvironment-button
// - python.createEnvironmentCheck
// - python.createNewFile
// - python.createTerminal
// - python.debugInTerminal
// - python.execInDedicatedTerminal
// - python.execInTerminal
// - python.execInTerminal-icon
// - python.execSelectionInDjangoShell
// - python.getRecommendedEnvironment
// - python.installJupyter
// - python.installPython
// - python.installPythonOnLinux
// - python.installPythonOnMac
// - python.interpreterPath
// - python.pickLocalProcess
// - python.reloadVSCode
// - python.reportIssue
// - python.setInterpreter
// - python.startNativeREPL
// - python.startREPL
// - python.triggerEnvSelection
// - python.viewLanguageServerOutput
// - python.viewOutput
// - rainbow-csv.Align
// - rainbow-csv.CSVLint
// - rainbow-csv.ColumnEditAfter
// - rainbow-csv.ColumnEditBefore
// - rainbow-csv.ColumnEditSelect
// - rainbow-csv.CopyBack
// - rainbow-csv.ExcelCopy
// - rainbow-csv.InternalTest
// - rainbow-csv.RBQL
// - rainbow-csv.RainbowSeparator
// - rainbow-csv.RainbowSeparatorOff
// - rainbow-csv.RainbowSeparatorOn
// - rainbow-csv.SampleHead
// - rainbow-csv.SampleTail
// - rainbow-csv.SetCommentPrefix
// - rainbow-csv.SetHeaderLine
// - rainbow-csv.SetJoinTableName
// - rainbow-csv.SetVirtualHeader
// - rainbow-csv.Shrink
// - rainbow-csv.ToggleColumnTracking
// - rainbow-csv.ToggleRowBackground
// - rainbow-csv.VirtualAlign
// - rainbow-csv.VirtualShrink
// - refactorPreview
// - refactorPreview.discard
// - refactorPreview.focus
// - refactorPreview.groupByFile
// - refactorPreview.groupByType
// - refactorPreview.resetViewContainerLocation
// - refactorPreview.resetViewLocation
// - refactorPreview.toggleGrouping
// - references-view.clear
// - references-view.clearHistory
// - references-view.copy
// - references-view.copyAll
// - references-view.copyPath
// - references-view.findImplementations
// - references-view.pickFromHistory
// - references-view.refind
// - references-view.refresh
// - references-view.removeCallItem
// - references-view.removeReferenceItem
// - references-view.removeTypeItem
// - references-view.showIncomingCalls
// - references-view.showOutgoingCalls
// - references-view.showSubtypes
// - references-view.showSupertypes
// - references-view.showTypeHierarchy
// - references-view.tree.focus
// - references-view.tree.resetViewLocation
// - remote.tunnel.changeLocalPort
// - remote.tunnel.closeCommandPalette
// - remote.tunnel.copyAddressCommandPalette
// - remote.tunnel.forwardCommandPalette
// - remote.tunnel.forwardInline
// - remote.tunnel.open
// - remote.tunnel.openCommandPalette
// - remote.tunnel.openPreview
// - remote.tunnel.setProtocolHttp
// - remote.tunnel.setProtocolHttps
// - remoteHub.addRepositoryToWorkspace
// - remoteHub.applyPatch
// - remoteHub.clone
// - remoteHub.commit
// - remoteHub.commitEmpty
// - remoteHub.configureIndexingAllowedRepos
// - remoteHub.continueEditSession.openOnWeb
// - remoteHub.continueOn
// - remoteHub.continueOn.addRepositoryToWorkspace
// - remoteHub.continueOn.openRepository
// - remoteHub.copyVscodeDevLink
// - remoteHub.copyVscodeDevLinkFile
// - remoteHub.copyVscodeDevLinkWithoutRange
// - remoteHub.createBranch
// - remoteHub.createBranchFrom
// - remoteHub.createDraftPullRequest
// - remoteHub.createPullRequest
// - remoteHub.deleteAllLocalRepositoryData
// - remoteHub.deleteLocalRepositoryData
// - remoteHub.disableIndexingForSession
// - remoteHub.discardAllChanges
// - remoteHub.discardChanges
// - remoteHub.enableIndexing
// - remoteHub.exportDebugInfo
// - remoteHub.exportPatch
// - remoteHub.fetch
// - remoteHub.goToRepository
// - remoteHub.keepChanges
// - remoteHub.notebook.continueOn
// - remoteHub.openChanges
// - remoteHub.openFile
// - remoteHub.openOnDesktop
// - remoteHub.openOnRemote
// - remoteHub.openOnWeb
// - remoteHub.openRepository
// - remoteHub.pull
// - remoteHub.refresh
// - remoteHub.remoteHelp.getStarted
// - remoteHub.stageAllChanges
// - remoteHub.stageChanges
// - remoteHub.switchToBranch
// - remoteHub.sync
// - remoteHub.timeline.compareWithSelected
// - remoteHub.timeline.copyCommitId
// - remoteHub.timeline.copyCommitMessage
// - remoteHub.timeline.openDiff
// - remoteHub.timeline.openOnAzureRepos
// - remoteHub.timeline.openOnGitHub
// - remoteHub.timeline.selectForCompare
// - remoteHub.unstageAllChanges
// - remoteHub.unstageChanges
// - remoteHub.views.workspaceRepositories.applyAllChanges
// - remoteHub.views.workspaceRepositories.applyChanges
// - remoteHub.views.workspaceRepositories.focus
// - remoteHub.views.workspaceRepositories.open
// - remoteHub.views.workspaceRepositories.openChanges
// - remoteHub.views.workspaceRepositories.openFile
// - remoteHub.views.workspaceRepositories.openInNewWindow
// - remoteHub.views.workspaceRepositories.refresh
// - remoteHub.views.workspaceRepositories.remove
// - remoteHub.views.workspaceRepositories.resetViewLocation
// - removeRootFolder
// - repl.action.copyAll
// - replace-refer-all-with-alias
// - replace-refer-all-with-refer
// - replacePreviousChar
// - resetGettingStartedProgress
// - resolve-macro-as
// - restore-terminals.restoreTerminals
// - restoreEditors.delete
// - restoreEditors.rename
// - restoreEditors.replace
// - restoreEditors.restore
// - restoreEditors.save
// - restoreEditors.views.layouts.focus
// - restoreEditors.views.layouts.layout.delete
// - restoreEditors.views.layouts.layout.rename
// - restoreEditors.views.layouts.layout.replace
// - restoreEditors.views.layouts.layout.restore
// - restoreEditors.views.layouts.refresh
// - restoreEditors.views.layouts.removeView
// - restoreEditors.views.layouts.resetViewLocation
// - restoreEditors.views.layouts.save
// - restoreEditors.views.layouts.tab.delete
// - restoreEditors.views.layouts.tab.preview
// - restoreEditors.views.layouts.tab.restore
// - restoreEditors.views.layouts.toggleVisibility
// - restructure-keys
// - revealInExplorer
// - review.approve
// - review.approveDescription
// - review.approveOnDotCom
// - review.approveOnDotComDescription
// - review.comment
// - review.commentDescription
// - review.copyPrLink
// - review.createSuggestionFromChange
// - review.createSuggestionsFromChanges
// - review.diffLocalWithPrHead
// - review.diffWithPrHead
// - review.openFile
// - review.openLocalFile
// - review.requestChanges
// - review.requestChangesDescription
// - review.requestChangesOnDotCom
// - review.requestChangesOnDotComDescription
// - review.suggestDiff
// - rewrap.rewrapCommentAt
// - rewrap.toggleAutoWrap
// - scm.openInIntegratedTerminal
// - scm.openInTerminal
// - scm.setActiveProvider
// - scrollEditorBottom
// - scrollEditorTop
// - scrollLeft
// - scrollRight
// - search.action.clearHistory
// - search.action.clearSearchResults
// - search.action.collapseSearchResults
// - search.action.copyAll
// - search.action.excludeFromSearch
// - search.action.expandRecursively
// - search.action.expandSearchResults
// - search.action.focusFilesToExclude
// - search.action.focusFilesToInclude
// - search.action.focusSearchList
// - search.action.getSearchResults
// - search.action.openEditor
// - search.action.openNewEditor
// - search.action.openNewEditorFromView
// - search.action.openNewEditorToSide
// - search.action.refreshSearchResults
// - search.action.revealInSideBar
// - search.action.viewAsList
// - search.action.viewAsTree
// - selectFirstSuggestion
// - selectForCompare
// - selectLastSuggestion
// - semantic-movement.jumpToContainingClass
// - semantic-movement.jumpToContainingFunction
// - semantic-movement.jumpToContainingNamedFunction
// - semantic-movement.jumpToContainingSymbol
// - semantic-movement.selectContainingClass
// - semantic-movement.selectContainingFunction
// - semantic-movement.selectContainingNamedFunction
// - semantic-movement.selectContainingSymbol
// - setRootFolder
// - setSelection
// - settings.filterByOnline
// - settings.filterByTelemetry
// - settings.filterUntrusted
// - settings.switchToJSON
// - showCustomTitleBar
// - showEditorScreenReaderNotification
// - signals.sounds.help
// - simpleBrowser.show
// - sort-clauses
// - sort-map
// - suppress-diagnostic
// - terminal-keeper.abort-all
// - terminal-keeper.active
// - terminal-keeper.active-session-activity
// - terminal-keeper.clear-all
// - terminal-keeper.collapse-all-activity
// - terminal-keeper.copy-command-activity
// - terminal-keeper.generate
// - terminal-keeper.help-and-feedback-activity
// - terminal-keeper.import-from-ant
// - terminal-keeper.import-from-composer
// - terminal-keeper.import-from-gradle
// - terminal-keeper.import-from-grunt
// - terminal-keeper.import-from-gulp
// - terminal-keeper.import-from-make
// - terminal-keeper.import-from-npm
// - terminal-keeper.import-from-pipenv
// - terminal-keeper.kill-all
// - terminal-keeper.migrate
// - terminal-keeper.navigate-activity
// - terminal-keeper.open
// - terminal-keeper.refresh-activity
// - terminal-keeper.remove
// - terminal-keeper.save
// - terminal-keeper.send-to-current-terminal-activity
// - terminal-keeper.send-to-new-terminal-activity
// - terminal.focus
// - terminal.removeView
// - terminal.resetViewContainerLocation
// - terminal.resetViewLocation
// - terminal.toggleVisibility
// - terminalFontSize.decrease
// - terminalFontSize.increase
// - terminalFontSize.openQuickPick
// - terminalKeeperActivityView.focus
// - terminalKeeperActivityView.removeView
// - terminalKeeperActivityView.resetViewLocation
// - terminalKeeperActivityView.toggleVisibility
// - testing.callStack.debug
// - testing.callStack.run
// - testing.cancelTestRefresh
// - testing.clearTestResults
// - testing.collapseAll
// - testing.collapsePeekStack
// - testing.configureProfile
// - testing.continuousRunUsingForTest
// - testing.coverage
// - testing.coverage.close
// - testing.coverage.uri
// - testing.coverageFilterToTest
// - testing.coverageFilterToTestInEditor
// - testing.coverageSelected
// - testing.coverageToggleToolbar
// - testing.coverageViewChangeSorting
// - testing.debug
// - testing.debug.uri
// - testing.debugSelected
// - testing.getSelectedProfiles
// - testing.goToRelatedCode
// - testing.goToRelatedTest
// - testing.hideTest
// - testing.openCoverage
// - testing.openMessageInEditor
// - testing.peekRelatedCode
// - testing.peekRelatedTest
// - testing.run
// - testing.run.uri
// - testing.runSelected
// - testing.runUsing
// - testing.searchForTestExtension
// - testing.selectDefaultTestProfiles
// - testing.sortByDuration
// - testing.sortByLocation
// - testing.sortByStatus
// - testing.startContinuousRun
// - testing.startContinuousRunFromExtension
// - testing.stopContinuousRun
// - testing.stopContinuousRunFromExtension
// - testing.toggleContinuousRunForTest
// - testing.unhideAllTests
// - testing.unhideTest
// - testing.viewAsList
// - testing.viewAsTree
// - theme-by-language.clearCustomThemesForFileLanguage
// - theme-by-language.setDefaultTheme
// - theme-by-language.useDefaultThemeForCurrentFileLanguage
// - thread-first
// - thread-first-all
// - thread-last
// - thread-last-all
// - timeline.focus
// - timeline.removeView
// - timeline.resetViewLocation
// - timeline.toggleVisibility
// - toggle.diff.ignoreTrimWhitespace
// - toggle.diff.renderSideBySide
// - toggle.toggleCustomTitleBar
// - toggle.window.commandCenter
// - toggle.window.customTitleBarVisibility
// - toggle.window.customTitleBarVisibility.windowed
// - toggle.workbench.editor.editorActionsLocation
// - toggle.workbench.experimental.share.enabled
// - toggle.workbench.layoutControl.enabled
// - toggle.workbench.navigationControl.enabled
// - tree.toggleStickyScroll
// - tunnel-forwarding.restart
// - tunnel-forwarding.showLog
// - typescript.findAllFileReferences
// - typescript.goToProjectConfig
// - typescript.goToSourceDefinition
// - typescript.openTsServerLog
// - typescript.reloadProjects
// - typescript.removeUnusedImports
// - typescript.restartTsServer
// - typescript.selectTypeScriptVersion
// - typescript.sortImports
// - typescript.tsserverRequest
// - unwind-all
// - unwind-thread
// - update.check
// - update.checkForUpdate
// - update.checking
// - update.downloadNow
// - update.downloadUpdate
// - update.downloading
// - update.install
// - update.installUpdate
// - update.restart
// - update.restartToUpdate
// - update.showCurrentReleaseNotes
// - update.updating
// - variables.collapse
// - vsc-print.dumpCommands
// - vsc-print.dumpProperties
// - vsc-print.gc
// - vsc-print.help
// - vsc-print.openLog
// - vsc-print.preview
// - vsc-print.print
// - vsc-print.setAlternateBrowser
// - vsc-print.test.sessionCount
// - vsc-print.whatsnew
// - vscode-dynamic-layouts.setLayout
// - vscode-json-editor.start
// - vscode-open-project.changeCurrentFolder
// - vscode-open-project.changeProject
// - vscode-open-project.codeCommandNotFound
// - vscode-open-project.openCurrentFileInNewWindow
// - vscode-open-project.openProject
// - vscode-open-project.openProjectConfiguration
// - vscode-speech.openSettings
// - walkthroughs.selectStep
// - watch.collapse
// - welcome.markStepComplete
// - welcome.markStepIncomplete
// - welcome.showAllWalkthroughs
// - whichkey.show
// - windsurf-dev-containers.attachToRunningContainer
// - windsurf-dev-containers.openInContainer
// - windsurf-dev-containers.reopenFolderLocally
// - windsurf-dev-containers.reopenInContainer
// - windsurf-dev-containers.showLog
// - windsurf-remote-openssh.closeSSHProcess
// - windsurf-remote-openssh.currentWindow
// - windsurf-remote-openssh.explorer.add
// - windsurf-remote-openssh.explorer.configure
// - windsurf-remote-openssh.explorer.deleteFolderHistoryItem
// - windsurf-remote-openssh.explorer.emptyWindowInCurrentWindow
// - windsurf-remote-openssh.explorer.emptyWindowInNewWindow
// - windsurf-remote-openssh.explorer.refresh
// - windsurf-remote-openssh.explorer.reopenFolderInCurrentWindow
// - windsurf-remote-openssh.explorer.reopenFolderInNewWindow
// - windsurf-remote-openssh.newWindow
// - windsurf-remote-openssh.showLog
// - windsurf.acceptCompletion
// - windsurf.cancelGenerateCommitMessage
// - windsurf.cancelLogin
// - windsurf.cancelSnoozeAutocomplete
// - windsurf.cascadePanel.focus
// - windsurf.cascadePanel.removeView
// - windsurf.cascadePanel.resetViewLocation
// - windsurf.cascadePanel.toggleVisibility
// - windsurf.cascadeViewContainerId
// - windsurf.cascadeViewContainerId.resetViewContainerLocation
// - windsurf.closeAllDiffZones
// - windsurf.command.noPopup
// - windsurf.copyApiKey
// - windsurf.createRule
// - windsurf.createWorkflow
// - windsurf.customizeAppIcon
// - windsurf.downloadDiagnostics
// - windsurf.executeCascadeAction
// - windsurf.explain
// - windsurf.explainProblem
// - windsurf.fileAtMention
// - windsurf.fireProductAnalyticsEvent
// - windsurf.generateCommitMessage
// - windsurf.generateFunctionDocstring
// - windsurf.getBrowserInstallationStatus
// - windsurf.getCascadePluginTemplate
// - windsurf.getDiagnosticInfo
// - windsurf.getMcpServerTemplates
// - windsurf.getUserSettingsMainThreadProtoJsonString
// - windsurf.importCursorExtensions
// - windsurf.importCursorSettings
// - windsurf.importRulesFromCursor
// - windsurf.importVSCodeExtensions
// - windsurf.importVSCodeSettings
// - windsurf.importWindsurfExtensions
// - windsurf.importWindsurfSettings
// - windsurf.initializeCascade
// - windsurf.interactiveCascade.updateDisabled
// - windsurf.login
// - windsurf.loginWithAuthToken
// - windsurf.onShellCommandCompletion
// - windsurf.onboarding.reset
// - windsurf.openAutoRefillPage
// - windsurf.openBillingPage
// - windsurf.openBrowser
// - windsurf.openBrowserForRemote
// - windsurf.openCascade
// - windsurf.openChangeLog
// - windsurf.openCommunity
// - windsurf.openConfigurePluginsPage
// - windsurf.openCustomizationsTab
// - windsurf.openDiffZones
// - windsurf.openDocs
// - windsurf.openFeatureRequest
// - windsurf.openFeedbackPanel
// - windsurf.openGenericUrl
// - windsurf.openGlobalRules
// - windsurf.openMcpConfigFile
// - windsurf.openMcpConfigurationPanel
// - windsurf.openMcpDocsPage
// - windsurf.openPluginPage
// - windsurf.openPricingPage
// - windsurf.openProfile
// - windsurf.openQuickSettingsPanel
// - windsurf.openReferralLink
// - windsurf.openRulesEducationalLink
// - windsurf.playAudio
// - windsurf.playNote
// - windsurf.prioritized.chat.openFromProblemsPanel
// - windsurf.prioritized.chat.openFromProblemsPanelForSingleFile
// - windsurf.prioritized.interactiveCascade.acceptSuggestedAction
// - windsurf.prioritized.interactiveCascade.editIntent
// - windsurf.prioritized.terminalSuggestion.accept
// - windsurf.provideAuthTokenToAuthProvider
// - windsurf.refactorFunction
// - windsurf.refreshMcpServers
// - windsurf.resetProductEducation
// - windsurf.restartLanguageServer
// - windsurf.sendChatActionMessage
// - windsurf.sendTextToChat
// - windsurf.setDiffZonesState
// - windsurf.snoozeAutocomplete
// - windsurf.tabReporting
// - windsurf.triggerAutoCascade
// - windsurf.updateAutocompleteSpeed
// - windsurf.updateConversationSummaries
// - windsurf.updateDebugInfoWidget
// - windsurf.updatePlanInfo
// - windsurf.updatePluginInstallationCount
// - windsurf.updateUserSetting
// - windsurfDevContainers.focus
// - windsurfDevContainers.resetViewLocation
// - windsurfPyright.createtypestub
// - windsurfPyright.dumpCachedTypes
// - windsurfPyright.dumpCodeFlowGraph
// - windsurfPyright.dumpNodes
// - windsurfPyright.dumpTokens
// - windsurfPyright.dumpTypes
// - windsurfPyright.organizeimports
// - windsurfPyright.restartserver
// - windsurfPyright.writeBaseline
// - windsurfSSHHosts.focus
// - windsurfSSHHosts.resetViewLocation
// - windsurfWslTargets.focus
// - windsurfWslTargets.resetViewLocation
// - windsurfremotewsl.connect
// - windsurfremotewsl.connectInNewWindow
// - windsurfremotewsl.connectUsingDistro
// - windsurfremotewsl.connectUsingDistroInNewWindow
// - windsurfremotewsl.explorer.addDistro
// - windsurfremotewsl.explorer.deleteDistro
// - windsurfremotewsl.explorer.deleteFolderHistoryItem
// - windsurfremotewsl.explorer.emptyWindowInCurrentWindow
// - windsurfremotewsl.explorer.emptyWindowInNewWindow
// - windsurfremotewsl.explorer.refresh
// - windsurfremotewsl.explorer.reopenFolderInCurrentWindow
// - windsurfremotewsl.explorer.reopenFolderInNewWindow
// - windsurfremotewsl.explorer.setDefaultDistro
// - windsurfremotewsl.showLog
// - workbench.action.acceptSelectedQuickOpenItem
// - workbench.action.activityBarLocation.bottom
// - workbench.action.activityBarLocation.default
// - workbench.action.activityBarLocation.hide
// - workbench.action.activityBarLocation.top
// - workbench.action.addRootFolder
// - workbench.action.addToGitignore
// - workbench.action.alignPanelCenter
// - workbench.action.alignPanelJustify
// - workbench.action.alignPanelLeft
// - workbench.action.alignPanelRight
// - workbench.action.alignQuickInputCenter
// - workbench.action.alignQuickInputTop
// - workbench.action.alternativeAcceptSelectedQuickOpenItem
// - workbench.action.auxiliaryActivityBarLocation.bottom
// - workbench.action.auxiliaryActivityBarLocation.default
// - workbench.action.auxiliaryActivityBarLocation.hide
// - workbench.action.auxiliaryActivityBarLocation.top
// - workbench.action.blur
// - workbench.action.browseColorThemesInMarketplace
// - workbench.action.chat.addDynamicVariable
// - workbench.action.chat.addParticipant
// - workbench.action.chat.addSelectedFilesToWorkingSet
// - workbench.action.chat.addToChatAction
// - workbench.action.chat.applyCompareEdits
// - workbench.action.chat.assignSelectedAgent
// - workbench.action.chat.attach.prompt
// - workbench.action.chat.attachFile
// - workbench.action.chat.attachFolder
// - workbench.action.chat.attachSelection
// - workbench.action.chat.clearHistory
// - workbench.action.chat.clearInputHistory
// - workbench.action.chat.configureCodeCompletions
// - workbench.action.chat.copyAll
// - workbench.action.chat.copyCodeBlock
// - workbench.action.chat.copyItem
// - workbench.action.chat.copyLink
// - workbench.action.chat.discardCompareEdits
// - workbench.action.chat.done
// - workbench.action.chat.export
// - workbench.action.chat.history
// - workbench.action.chat.import
// - workbench.action.chat.inlineVoiceChat
// - workbench.action.chat.insertIntoNewFile
// - workbench.action.chat.insertIntoNotebook
// - workbench.action.chat.insertSearchResults
// - workbench.action.chat.installProviderForVoiceChat
// - workbench.action.chat.logChatIndex
// - workbench.action.chat.logInputHistory
// - workbench.action.chat.manageSettings
// - workbench.action.chat.markHelpful
// - workbench.action.chat.markUnhelpful
// - workbench.action.chat.openInEditor
// - workbench.action.chat.openInNewWindow
// - workbench.action.chat.openInSidebar
// - workbench.action.chat.openQuotaExceededDialog
// - workbench.action.chat.openStorageFolder
// - workbench.action.chat.quickVoiceChat
// - workbench.action.chat.readChatResponseAloud
// - workbench.action.chat.redoEdit
// - workbench.action.chat.reportIssueForBug
// - workbench.action.chat.resetTrustedTools
// - workbench.action.chat.retry
// - workbench.action.chat.selectAndInsertFile
// - workbench.action.chat.selectAndInsertFolder
// - workbench.action.chat.selectAndInsertProblems
// - workbench.action.chat.selectAndInsertSym
// - workbench.action.chat.showExtensionsUsingCopilot
// - workbench.action.chat.startEditing
// - workbench.action.chat.toggle
// - workbench.action.chat.toggleRequestPaused
// - workbench.action.chat.undoEdit
// - workbench.action.chat.voiceChatInChatView
// - workbench.action.chatEditor.newChat
// - workbench.action.clearCommandHistory
// - workbench.action.clearEditorHistory
// - workbench.action.clearLocalePreference
// - workbench.action.clearRecentFiles
// - workbench.action.closeActivePinnedEditor
// - workbench.action.closeAuxiliaryBar
// - workbench.action.closeEditorInAllGroups
// - workbench.action.closeEditorsAndGroup
// - workbench.action.closeEditorsInOtherGroups
// - workbench.action.closeEditorsToTheLeft
// - workbench.action.closeEditorsToTheRight
// - workbench.action.closePanel
// - workbench.action.closeSidebar
// - workbench.action.collapseAllComments
// - workbench.action.compareEditor.focusOtherSide
// - workbench.action.compareEditor.focusPrimarySide
// - workbench.action.compareEditor.focusSecondarySide
// - workbench.action.compareEditor.swapSides
// - workbench.action.configureEditor
// - workbench.action.configureEditorTabs
// - workbench.action.configureLanguageBasedSettings
// - workbench.action.configureLocale
// - workbench.action.configureRuntimeArguments
// - workbench.action.continueOn.extensions
// - workbench.action.copyEditorGroupToNewWindow
// - workbench.action.createTerminalEditor
// - workbench.action.createTerminalEditorSameGroup
// - workbench.action.createTerminalEditorSide
// - workbench.action.customizeLayout
// - workbench.action.debug.callStackBottom
// - workbench.action.debug.callStackDown
// - workbench.action.debug.callStackTop
// - workbench.action.debug.callStackUp
// - workbench.action.debug.configure
// - workbench.action.debug.disconnectAndSuspend
// - workbench.action.debug.focusProcess
// - workbench.action.debug.restartFrame
// - workbench.action.debug.reverseContinue
// - workbench.action.debug.selectDebugConsole
// - workbench.action.debug.selectDebugSession
// - workbench.action.debug.selectRepl
// - workbench.action.debug.selectandstart
// - workbench.action.debug.showLoadedScripts
// - workbench.action.debug.stepBack
// - workbench.action.debug.terminateThread
// - workbench.action.decreaseViewHeight
// - workbench.action.decreaseViewSize
// - workbench.action.decreaseViewWidth
// - workbench.action.download
// - workbench.action.duplicateActiveEditorGroupDown
// - workbench.action.duplicateActiveEditorGroupLeft
// - workbench.action.duplicateActiveEditorGroupRight
// - workbench.action.duplicateActiveEditorGroupUp
// - workbench.action.duplicateWorkspaceInNewWindow
// - workbench.action.editor.changeEOL
// - workbench.action.editor.changeEncoding
// - workbench.action.editorActionsDefault
// - workbench.action.editorActionsTitleBar
// - workbench.action.editorLayoutSingle
// - workbench.action.editorLayoutThreeColumns
// - workbench.action.editorLayoutThreeRows
// - workbench.action.editorLayoutTwoByTwoGrid
// - workbench.action.editorLayoutTwoColumns
// - workbench.action.editorLayoutTwoColumnsBottom
// - workbench.action.editorLayoutTwoRows
// - workbench.action.editorLayoutTwoRowsRight
// - workbench.action.edits.addFilesFromReferences
// - workbench.action.edits.attachFile
// - workbench.action.edits.attachFolder
// - workbench.action.edits.attachSelection
// - workbench.action.evenEditorWidths
// - workbench.action.expandAllComments
// - workbench.action.expandUnresolvedComments
// - workbench.action.exportLogs
// - workbench.action.extensionHostProfiler.stop
// - workbench.action.files.newFile
// - workbench.action.files.openFileFolderInNewWindow
// - workbench.action.files.openFileInNewWindow
// - workbench.action.files.openFolder
// - workbench.action.files.openFolderInNewWindow
// - workbench.action.files.resetActiveEditorReadonlyInSession
// - workbench.action.files.revert
// - workbench.action.files.saveAll
// - workbench.action.files.saveFiles
// - workbench.action.files.setActiveEditorReadonlyInSession
// - workbench.action.files.setActiveEditorWriteableInSession
// - workbench.action.files.showOpenedFileInNewWindow
// - workbench.action.files.toggleActiveEditorReadonlyInSession
// - workbench.action.firstEditorInGroup
// - workbench.action.focusAboveGroupWithoutWrap
// - workbench.action.focusActiveEditorGroup
// - workbench.action.focusActivityBar
// - workbench.action.focusAuxiliaryBar
// - workbench.action.focusBanner
// - workbench.action.focusBelowGroupWithoutWrap
// - workbench.action.focusCommentOnCurrentLine
// - workbench.action.focusFirstSideEditor
// - workbench.action.focusLastEditorGroup
// - workbench.action.focusLeftGroupWithoutWrap
// - workbench.action.focusNextGroup
// - workbench.action.focusOtherSideEditor
// - workbench.action.focusPanel
// - workbench.action.focusPreviousGroup
// - workbench.action.focusQuickOpen
// - workbench.action.focusRightGroupWithoutWrap
// - workbench.action.focusSecondSideEditor
// - workbench.action.focusStatusBar
// - workbench.action.focusTitleBar
// - workbench.action.generateColorTheme
// - workbench.action.getStartedWithAccessibilityFeatures
// - workbench.action.getWindsurfExtensionLogs
// - workbench.action.hideEditorActions
// - workbench.action.hideEditorTabs
// - workbench.action.holdLockedScrolling
// - workbench.action.importLog
// - workbench.action.increaseViewHeight
// - workbench.action.increaseViewSize
// - workbench.action.increaseViewWidth
// - workbench.action.inspectContextKeys
// - workbench.action.inspectKeyMappings
// - workbench.action.inspectKeyMappingsJSON
// - workbench.action.installCommandLine
// - workbench.action.isWindsurfSnoozed
// - workbench.action.joinAllGroups
// - workbench.action.joinTwoGroups
// - workbench.action.localHistory.compareWithFile
// - workbench.action.localHistory.compareWithPrevious
// - workbench.action.localHistory.compareWithSelected
// - workbench.action.localHistory.create
// - workbench.action.localHistory.delete
// - workbench.action.localHistory.deleteAll
// - workbench.action.localHistory.open
// - workbench.action.localHistory.rename
// - workbench.action.localHistory.restore
// - workbench.action.localHistory.restoreViaEditor
// - workbench.action.localHistory.restoreViaPicker
// - workbench.action.localHistory.revealInOS
// - workbench.action.localHistory.selectForCompare
// - workbench.action.lockEditorGroup
// - workbench.action.logStorage
// - workbench.action.logWorkingCopies
// - workbench.action.manageTrustedDomain
// - workbench.action.maximizeEditorHideSidebar
// - workbench.action.mergeAllWindowTabs
// - workbench.action.minimizeOtherEditors
// - workbench.action.minimizeOtherEditorsHideSidebar
// - workbench.action.moveEditorGroupToNewWindow
// - workbench.action.moveEditorToAboveGroup
// - workbench.action.moveEditorToBelowGroup
// - workbench.action.moveEditorToLeftGroup
// - workbench.action.moveEditorToNewWindow
// - workbench.action.moveEditorToRightGroup
// - workbench.action.moveFocusedView
// - workbench.action.movePanelToSecondarySideBar
// - workbench.action.movePanelToSidePanel
// - workbench.action.moveSecondarySideBarToPanel
// - workbench.action.moveSideBarLeft
// - workbench.action.moveSideBarRight
// - workbench.action.moveSidePanelToPanel
// - workbench.action.moveView
// - workbench.action.moveWindowTabToNewWindow
// - workbench.action.navigateBackInEditLocations
// - workbench.action.navigateBackInNavigationLocations
// - workbench.action.navigateDown
// - workbench.action.navigateEditorGroups
// - workbench.action.navigateForwardInEditLocations
// - workbench.action.navigateForwardInNavigationLocations
// - workbench.action.navigateLast
// - workbench.action.navigateLeft
// - workbench.action.navigatePreviousInEditLocations
// - workbench.action.navigatePreviousInNavigationLocations
// - workbench.action.navigateRight
// - workbench.action.navigateToLastNavigationLocation
// - workbench.action.navigateUp
// - workbench.action.newEmptyEditorWindow
// - workbench.action.newGroupAbove
// - workbench.action.newGroupBelow
// - workbench.action.newGroupLeft
// - workbench.action.newGroupRight
// - workbench.action.newWindowTab
// - workbench.action.nextAuxiliaryBarView
// - workbench.action.nextPanelView
// - workbench.action.nextSideBarView
// - workbench.action.openAccessibilitySettings
// - workbench.action.openActiveLogOutputFile
// - workbench.action.openActiveLogOutputFileInNewWindow
// - workbench.action.openApplicationSettingsJson
// - workbench.action.openChat
// - workbench.action.openDefaultKeybindingsFile
// - workbench.action.openEditorAtIndex
// - workbench.action.openExtensionLogsFolder
// - workbench.action.openFolderSettings
// - workbench.action.openFolderSettingsFile
// - workbench.action.openGlobalKeybindingsFile
// - workbench.action.openGlobalSettings
// - workbench.action.openLicenseUrl
// - workbench.action.openLogFile
// - workbench.action.openLogsFolder
// - workbench.action.openNextRecentlyUsedEditor
// - workbench.action.openNextRecentlyUsedEditorInGroup
// - workbench.action.openPreviousEditorFromHistory
// - workbench.action.openPreviousRecentlyUsedEditor
// - workbench.action.openPreviousRecentlyUsedEditorInGroup
// - workbench.action.openProcessExplorer
// - workbench.action.openProfile.Default
// - workbench.action.openQuickChat
// - workbench.action.openRawDefaultSettings
// - workbench.action.openRemoteSettings
// - workbench.action.openRemoteSettingsFile
// - workbench.action.openSettings2
// - workbench.action.openSettingsJson
// - workbench.action.openSnippets
// - workbench.action.openView
// - workbench.action.openWalkthrough
// - workbench.action.openWindsurfLogsFile
// - workbench.action.openWindsurfSettingsWithId
// - workbench.action.openWorkspace
// - workbench.action.openWorkspaceConfigFile
// - workbench.action.openWorkspaceFromEditor
// - workbench.action.openWorkspaceInNewWindow
// - workbench.action.openWorkspaceSettings
// - workbench.action.openWorkspaceSettingsFile
// - workbench.action.output.activeOutputLogLevel.0
// - workbench.action.output.activeOutputLogLevel.1
// - workbench.action.output.activeOutputLogLevel.2
// - workbench.action.output.activeOutputLogLevel.3
// - workbench.action.output.activeOutputLogLevel.4
// - workbench.action.output.activeOutputLogLevel.5
// - workbench.action.output.activeOutputLogLevelDefault
// - workbench.action.output.addCompoundLog
// - workbench.action.output.remove
// - workbench.action.output.show.42Crunch.vscode-openapi.OpenAPI (Swagger) Editor
// - workbench.action.output.show.GitHub.vscode-pull-request-github.GitHub Pull Request
// - workbench.action.output.show.codeium.windsurf.Windsurf
// - workbench.action.output.show.eamodio.gitlens.GitLens
// - workbench.action.output.show.eamodio.gitlens.GitLens (Git)
// - workbench.action.output.show.extension-output-Codeium.windsurf-dev-containers-#1-Remote - Dev Containers (Windsurf)
// - workbench.action.output.show.extension-output-Codeium.windsurfPyright-#1-Windsurf Pyright
// - workbench.action.output.show.extension-output-Gxl.git-graph-3-#1-Git Graph
// - workbench.action.output.show.extension-output-betterthantomorrow.calva-#1-Calva says
// - workbench.action.output.show.extension-output-betterthantomorrow.calva-#2-Calva Connection Log
// - workbench.action.output.show.extension-output-betterthantomorrow.calva-#3-Clojure Language Client
// - workbench.action.output.show.extension-output-betterthantomorrow.joyride-#1-Joyride
// - workbench.action.output.show.extension-output-formulahendry.auto-rename-tag-#1-Auto Rename Tag
// - workbench.action.output.show.extension-output-moshfeu.compare-folders-#1-Compare Folders
// - workbench.action.output.show.extension-output-redhat.vscode-yaml-#1-YAML Support
// - workbench.action.output.show.extension-output-saoudrizwan.claude-dev-#1-Cline
// - workbench.action.output.show.extension-output-whatwewant.open-terminal-#1-OpenTerminal
// - workbench.action.output.show.exthost
// - workbench.action.output.show.main
// - workbench.action.output.show.mechatroner.rainbow-csv.rainbow_csv_debug_channel
// - workbench.action.output.show.ms-python.black-formatter.Black Formatter
// - workbench.action.output.show.ms-python.debugpy.Python Debugger
// - workbench.action.output.show.ms-python.python.Python
// - workbench.action.output.show.ptyhost
// - workbench.action.output.show.remoteTunnelService
// - workbench.action.output.show.rendererLog
// - workbench.action.output.show.shared
// - workbench.action.output.show.tasks
// - workbench.action.output.show.terminal
// - workbench.action.output.show.userDataSync
// - workbench.action.output.show.vscode.git.Git
// - workbench.action.output.show.vscode.github-authentication.GitHub Authentication
// - workbench.action.output.show.vscode.github.GitHub
// - workbench.action.output.show.vscode.json-language-features.JSON Language Server
// - workbench.action.output.show.workerexthost
// - workbench.action.pauseSocketWriting
// - workbench.action.populateFileFromSnippet
// - workbench.action.positionPanelBottom
// - workbench.action.positionPanelLeft
// - workbench.action.positionPanelRight
// - workbench.action.positionPanelTop
// - workbench.action.previewColorTheme
// - workbench.action.previousAuxiliaryBarView
// - workbench.action.previousPanelView
// - workbench.action.previousSideBarView
// - workbench.action.problems.focus
// - workbench.action.quickOpenLeastRecentlyUsedEditor
// - workbench.action.quickOpenNavigateNext
// - workbench.action.quickOpenNavigateNextInTerminalPicker
// - workbench.action.quickOpenNavigatePrevious
// - workbench.action.quickOpenNavigatePreviousInTerminalPicker
// - workbench.action.quickOpenPreviousEditor
// - workbench.action.quickOpenPreviousRecentlyUsedEditor
// - workbench.action.quickOpenRecent
// - workbench.action.quickOpenTerm
// - workbench.action.quickOpenWithModes
// - workbench.action.quickPickManyToggle
// - workbench.action.quickSwitchWindow
// - workbench.action.quickTextSearch
// - workbench.action.quickchat.close
// - workbench.action.quickchat.openInChatView
// - workbench.action.registerPlanInfoPosition
// - workbench.action.registerWindsurfStatusBarItemPosition
// - workbench.action.reloadWindowWithExtensionsDisabled
// - workbench.action.remote.close
// - workbench.action.remote.extensions
// - workbench.action.removeLargeStorageDatabaseEntries
// - workbench.action.removeRootFolder
// - workbench.action.reopenTextEditor
// - workbench.action.reopenWithEditor
// - workbench.action.reportPerformanceIssueUsingReporter
// - workbench.action.resetFocusedViewLocation
// - workbench.action.resetViewLocations
// - workbench.action.restartExtensionHost
// - workbench.action.restoreEditorsToMainWindow
// - workbench.action.revealUserDataFolder
// - workbench.action.revertAndCloseActiveEditor
// - workbench.action.saveActiveLogOutputAs
// - workbench.action.saveWorkspaceAs
// - workbench.action.selectIconTheme
// - workbench.action.selectProductIconTheme
// - workbench.action.setDefaultLogLevel
// - workbench.action.setLogLevel
// - workbench.action.showAboutDialog
// - workbench.action.showAllEditorsByMostRecentlyUsed
// - workbench.action.showEditorActions
// - workbench.action.showEditorTab
// - workbench.action.showEditorsInActiveGroup
// - workbench.action.showEditorsInGroup
// - workbench.action.showEmmetCommands
// - workbench.action.showErrorsWarnings
// - workbench.action.showGPUInfo
// - workbench.action.showInteractivePlayground
// - workbench.action.showLogs
// - workbench.action.showMultipleEditorTabs
// - workbench.action.showNextWindowTab
// - workbench.action.showOutputChannels
// - workbench.action.showPreviousWindowTab
// - workbench.action.showRuntimeExtensions
// - workbench.action.showTelemetry
// - workbench.action.showWindowLog
// - workbench.action.showWindsurfStatusBarSettings
// - workbench.action.splitEditorToAboveGroup
// - workbench.action.splitEditorToBelowGroup
// - workbench.action.splitEditorToFirstGroup
// - workbench.action.splitEditorToLastGroup
// - workbench.action.splitEditorToLeftGroup
// - workbench.action.splitEditorToNextGroup
// - workbench.action.splitEditorToPreviousGroup
// - workbench.action.splitEditorToRightGroup
// - workbench.action.stopTracing
// - workbench.action.tasks.configureDefaultBuildTask
// - workbench.action.tasks.configureDefaultTestTask
// - workbench.action.tasks.configureTaskRunner
// - workbench.action.tasks.manageAutomaticRunning
// - workbench.action.tasks.openUserTasks
// - workbench.action.tasks.openWorkspaceFileTasks
// - workbench.action.tasks.reRunTask
// - workbench.action.tasks.restartTask
// - workbench.action.tasks.runTask
// - workbench.action.tasks.showLog
// - workbench.action.tasks.showTasks
// - workbench.action.tasks.terminate
// - workbench.action.tasks.test
// - workbench.action.tasks.toggleProblems
// - workbench.action.terminal.attachToSession
// - workbench.action.terminal.changeColor
// - workbench.action.terminal.changeColorActiveTab
// - workbench.action.terminal.changeIcon
// - workbench.action.terminal.changeIconActiveTab
// - workbench.action.terminal.chat.viewInChat
// - workbench.action.terminal.clearPreviousSessionHistory
// - workbench.action.terminal.copyAndClearSelection
// - workbench.action.terminal.copyLastCommand
// - workbench.action.terminal.copyLastCommandAndLastCommandOutput
// - workbench.action.terminal.copyLastCommandOutput
// - workbench.action.terminal.copySelectionAsHtml
// - workbench.action.terminal.detachSession
// - workbench.action.terminal.focusAtIndex1
// - workbench.action.terminal.focusAtIndex2
// - workbench.action.terminal.focusAtIndex3
// - workbench.action.terminal.focusAtIndex4
// - workbench.action.terminal.focusAtIndex5
// - workbench.action.terminal.focusAtIndex6
// - workbench.action.terminal.focusAtIndex7
// - workbench.action.terminal.focusAtIndex8
// - workbench.action.terminal.focusAtIndex9
// - workbench.action.terminal.fontZoomIn
// - workbench.action.terminal.fontZoomOut
// - workbench.action.terminal.fontZoomReset
// - workbench.action.terminal.join
// - workbench.action.terminal.joinActiveTab
// - workbench.action.terminal.kill
// - workbench.action.terminal.killAll
// - workbench.action.terminal.killViewOrEditor
// - workbench.action.terminal.maybeCopySelection
// - workbench.action.terminal.moveIntoNewWindow
// - workbench.action.terminal.moveToEditor
// - workbench.action.terminal.moveToTerminalPanel
// - workbench.action.terminal.newInActiveWorkspace
// - workbench.action.terminal.newWithCwd
// - workbench.action.terminal.newWithProfile
// - workbench.action.terminal.openFileLink
// - workbench.action.terminal.openSettings
// - workbench.action.terminal.openUrlLink
// - workbench.action.terminal.recordSession
// - workbench.action.terminal.relaunch
// - workbench.action.terminal.rename
// - workbench.action.terminal.renameWithArg
// - workbench.action.terminal.resetSuggestWidgetSize
// - workbench.action.terminal.restartPtyHost
// - workbench.action.terminal.runActiveFile
// - workbench.action.terminal.runSelectedText
// - workbench.action.terminal.selectDefaultShell
// - workbench.action.terminal.selectToNextLine
// - workbench.action.terminal.selectToPreviousLine
// - workbench.action.terminal.setDimensions
// - workbench.action.terminal.showEnvironmentContributions
// - workbench.action.terminal.showTextureAtlas
// - workbench.action.terminal.splitInActiveWorkspace
// - workbench.action.terminal.switchTerminal
// - workbench.action.terminal.toggleStickyScroll
// - workbench.action.terminal.unsplit
// - workbench.action.terminal.writeDataToTerminal
// - workbench.action.toggleActivityBarVisibility
// - workbench.action.toggleAutoSave
// - workbench.action.toggleAuxiliaryActivityBarVisibility
// - workbench.action.toggleCenteredLayout
// - workbench.action.toggleCommenting
// - workbench.action.toggleConfirmBeforeClose
// - workbench.action.toggleEditorGroupLock
// - workbench.action.toggleEditorType
// - workbench.action.toggleEditorVisibility
// - workbench.action.toggleEditorWidths
// - workbench.action.toggleKeepEditors
// - workbench.action.toggleKeybindingsLog
// - workbench.action.toggleLightDarkThemes
// - workbench.action.toggleLockedScrolling
// - workbench.action.toggleMaximizedPanel
// - workbench.action.toggleMultiCursorModifier
// - workbench.action.toggleNotebookClipboardLog
// - workbench.action.toggleScreencastMode
// - workbench.action.toggleSearchOnType
// - workbench.action.toggleSeparatePinnedEditorTabs
// - workbench.action.toggleSidebarPosition
// - workbench.action.toggleSplitEditorInGroup
// - workbench.action.toggleSplitEditorInGroupLayout
// - workbench.action.toggleStatusbarVisibility
// - workbench.action.toggleWindowTabsBar
// - workbench.action.triggerReconnect
// - workbench.action.troubleshootIssue.start
// - workbench.action.troubleshootIssue.stop
// - workbench.action.uninstallCommandLine
// - workbench.action.unlockEditorGroup
// - workbench.action.url.openUrl
// - workbench.action.webview.openDeveloperTools
// - workbench.action.webview.reloadWebviewAction
// - workbench.action.zenHideEditorTabs
// - workbench.action.zenShowEditorTab
// - workbench.action.zenShowMultipleEditorTabs
// - workbench.actions.table.workbench.panel.markers.view.viewAsTable
// - workbench.actions.table.workbench.panel.markers.view.viewAsTree
// - workbench.actions.treeView.workbench.panel.markers.view.collapseAll
// - workbench.actions.view.toggleProblems
// - workbench.actions.workbench.panel.comments.toggleResolvedComments
// - workbench.actions.workbench.panel.comments.toggleSortByResource
// - workbench.actions.workbench.panel.comments.toggleSortByUpdatedAt
// - workbench.actions.workbench.panel.comments.toggleUnResolvedComments
// - workbench.actions.workbench.panel.markers.view.toggleActiveFile
// - workbench.actions.workbench.panel.markers.view.toggleErrors
// - workbench.actions.workbench.panel.markers.view.toggleExcludedFiles
// - workbench.actions.workbench.panel.markers.view.toggleInfos
// - workbench.actions.workbench.panel.markers.view.toggleWarnings
// - workbench.actions.workbench.panel.output.clearFilterText
// - workbench.actions.workbench.panel.output.toggle.debug
// - workbench.actions.workbench.panel.output.toggle.error
// - workbench.actions.workbench.panel.output.toggle.info
// - workbench.actions.workbench.panel.output.toggle.trace
// - workbench.actions.workbench.panel.output.toggle.warn
// - workbench.command.prompts.create.local
// - workbench.command.prompts.create.user
// - workbench.debug.action.copyAll
// - workbench.debug.action.focusBreakpointsView
// - workbench.debug.action.focusCallStackView
// - workbench.debug.action.focusRepl
// - workbench.debug.action.focusVariablesView
// - workbench.debug.action.focusWatchView
// - workbench.debug.breakPointsView.resetViewLocation
// - workbench.debug.callStackView.resetViewLocation
// - workbench.debug.loadedScriptsView.focus
// - workbench.debug.loadedScriptsView.resetViewLocation
// - workbench.debug.variablesView.resetViewLocation
// - workbench.debug.viewlet.action.addDataBreakpointOnAddress
// - workbench.debug.viewlet.action.addFunctionBreakpointAction
// - workbench.debug.viewlet.action.addWatchExpression
// - workbench.debug.viewlet.action.copyWorkspaceVariableValue
// - workbench.debug.viewlet.action.disableAllBreakpoints
// - workbench.debug.viewlet.action.editDataBreakpointOnAddress
// - workbench.debug.viewlet.action.enableAllBreakpoints
// - workbench.debug.viewlet.action.reapplyBreakpointsAction
// - workbench.debug.viewlet.action.removeAllBreakpoints
// - workbench.debug.viewlet.action.removeAllWatchExpressions
// - workbench.debug.viewlet.action.removeBreakpoint
// - workbench.debug.viewlet.action.toggleBreakpointsActivatedAction
// - workbench.debug.viewlet.action.viewMemory
// - workbench.debug.watchExpressionsView.resetViewLocation
// - workbench.debug.welcome.focus
// - workbench.debug.welcome.removeView
// - workbench.debug.welcome.resetViewLocation
// - workbench.debug.welcome.toggleVisibility
// - workbench.editSessions.actions.resetAuth
// - workbench.explorer.fileView.focus
// - workbench.explorer.fileView.removeView
// - workbench.explorer.fileView.resetViewLocation
// - workbench.explorer.fileView.toggleVisibility
// - workbench.explorer.openEditorsView.removeView
// - workbench.explorer.openEditorsView.resetViewLocation
// - workbench.explorer.openEditorsView.toggleVisibility
// - workbench.extensions.action.addExtensionToWorkspaceRecommendations
// - workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceFolderRecommendations
// - workbench.extensions.action.addToWorkspaceIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceRecommendations
// - workbench.extensions.action.checkForUpdates
// - workbench.extensions.action.clearExtensionsSearchResults
// - workbench.extensions.action.clearLanguage
// - workbench.extensions.action.configure
// - workbench.extensions.action.configureKeybindings
// - workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions
// - workbench.extensions.action.configureWorkspaceRecommendedExtensions
// - workbench.extensions.action.copyExtension
// - workbench.extensions.action.copyExtensionId
// - workbench.extensions.action.copyLink
// - workbench.extensions.action.debugExtensionHost
// - workbench.extensions.action.disableAll
// - workbench.extensions.action.disableAllWorkspace
// - workbench.extensions.action.disableAutoUpdate
// - workbench.extensions.action.download
// - workbench.extensions.action.downloadPreRelease
// - workbench.extensions.action.enableAll
// - workbench.extensions.action.enableAllWorkspace
// - workbench.extensions.action.enableAutoUpdate
// - workbench.extensions.action.extensionHostProfile
// - workbench.extensions.action.extensionUpdates
// - workbench.extensions.action.focusExtensionsView
// - workbench.extensions.action.ignoreRecommendation
// - workbench.extensions.action.install.anotherVersion
// - workbench.extensions.action.install.specificVersion
// - workbench.extensions.action.installAndDonotSync
// - workbench.extensions.action.installExtensionFromLocation
// - workbench.extensions.action.installExtensions
// - workbench.extensions.action.installPrereleaseAndDonotSync
// - workbench.extensions.action.installUnsigned
// - workbench.extensions.action.installVSIX
// - workbench.extensions.action.installWorkspaceRecommendedExtensions
// - workbench.extensions.action.listBuiltInExtensions
// - workbench.extensions.action.listWorkspaceUnsupportedExtensions
// - workbench.extensions.action.manageAccountPreferences
// - workbench.extensions.action.manageAuthorizedExtensionURIs
// - workbench.extensions.action.manageTrustedPublishers
// - workbench.extensions.action.openExtensionHostProfile
// - workbench.extensions.action.openExtensionsFolder
// - workbench.extensions.action.recentlyPublishedExtensions
// - workbench.extensions.action.refreshExtension
// - workbench.extensions.action.removeExtensionFromWorkspaceRecommendations
// - workbench.extensions.action.saveExtensionHostProfile
// - workbench.extensions.action.setColorTheme
// - workbench.extensions.action.setFileIconTheme
// - workbench.extensions.action.setProductIconTheme
// - workbench.extensions.action.showDisabledExtensions
// - workbench.extensions.action.showEnabledExtensions
// - workbench.extensions.action.showExtensionsForLanguage
// - workbench.extensions.action.showExtensionsWithIds
// - workbench.extensions.action.showLanguageExtensions
// - workbench.extensions.action.showPopularExtensions
// - workbench.extensions.action.showPreReleaseVersion
// - workbench.extensions.action.showRecommendedExtensions
// - workbench.extensions.action.showRecommendedKeymapExtensions
// - workbench.extensions.action.showReleasedVersion
// - workbench.extensions.action.stopExtensionHostProfile
// - workbench.extensions.action.switchToPreRlease
// - workbench.extensions.action.switchToRelease
// - workbench.extensions.action.toggleApplyToAllProfiles
// - workbench.extensions.action.toggleAutoUpdateForExtension
// - workbench.extensions.action.toggleAutoUpdatesForPublisher
// - workbench.extensions.action.toggleIgnoreExtension
// - workbench.extensions.action.undoIgnoredRecommendation
// - workbench.extensions.action.updateAllExtensions
// - workbench.extensions.command.installFromVSIX
// - workbench.extensions.installMissingDependencies
// - workbench.files.action.acceptLocalChanges
// - workbench.files.action.collapseExplorerFolders
// - workbench.files.action.compareFileWith
// - workbench.files.action.compareNewUntitledTextFiles
// - workbench.files.action.createFileFromExplorer
// - workbench.files.action.createFolderFromExplorer
// - workbench.files.action.focusFilesExplorer
// - workbench.files.action.refreshFilesExplorer
// - workbench.files.action.revertLocalChanges
// - workbench.files.action.saveAllInGroup
// - workbench.files.action.showActiveFileInExplorer
// - workbench.getCodeExchangeProxyEndpoints
// - workbench.mcp.addConfiguration
// - workbench.mcp.editStoredInput
// - workbench.mcp.installFromActivation
// - workbench.mcp.listServer
// - workbench.mcp.removeStoredInput
// - workbench.mcp.resetCachedTools
// - workbench.mcp.resetTrust
// - workbench.mcp.restartServer
// - workbench.mcp.serverOptions
// - workbench.mcp.showOutput
// - workbench.mcp.startServer
// - workbench.mcp.stopServer
// - workbench.notebook.layout.configure
// - workbench.notebook.layout.configure.editorTitle
// - workbench.notebook.layout.gettingStarted
// - workbench.notebook.layout.select
// - workbench.notebook.layout.webview.reset
// - workbench.output.action.clearOutput
// - workbench.output.action.switchBetweenOutputs
// - workbench.output.action.toggleAutoScroll
// - workbench.panel.chat.resetViewContainerLocation
// - workbench.panel.chat.view.copilot.focus
// - workbench.panel.chat.view.copilot.resetViewLocation
// - workbench.panel.chat.view.edits.focus
// - workbench.panel.chat.view.edits.resetViewLocation
// - workbench.panel.chatEditing.resetViewContainerLocation
// - workbench.panel.markers.resetViewContainerLocation
// - workbench.panel.markers.view.focus
// - workbench.panel.markers.view.removeView
// - workbench.panel.markers.view.resetViewLocation
// - workbench.panel.markers.view.toggleVisibility
// - workbench.panel.output.focus
// - workbench.panel.output.removeView
// - workbench.panel.output.resetViewContainerLocation
// - workbench.panel.output.resetViewLocation
// - workbench.panel.output.toggleVisibility
// - workbench.panel.repl.resetViewContainerLocation
// - workbench.panel.repl.view.focus
// - workbench.panel.repl.view.removeView
// - workbench.panel.repl.view.resetViewLocation
// - workbench.panel.repl.view.toggleVisibility
// - workbench.panel.testResults.resetViewContainerLocation
// - workbench.panel.testResults.view.focus
// - workbench.panel.testResults.view.resetViewLocation
// - workbench.profiles.actions.cleanupProfiles
// - workbench.profiles.actions.createFromCurrentProfile
// - workbench.profiles.actions.createProfile
// - workbench.profiles.actions.createTemporaryProfile
// - workbench.profiles.actions.deleteProfile
// - workbench.profiles.actions.exportProfile
// - workbench.profiles.actions.help
// - workbench.profiles.actions.manageProfiles
// - workbench.profiles.actions.newWindowWithProfile
// - workbench.profiles.actions.profileEntry.__default__profile__
// - workbench.profiles.actions.resetWorkspaces
// - workbench.profiles.actions.switchProfile
// - workbench.scm.action.collapseAllRepositories
// - workbench.scm.action.expandAllRepositories
// - workbench.scm.action.focusNextInput
// - workbench.scm.action.focusNextResourceGroup
// - workbench.scm.action.focusPreviousInput
// - workbench.scm.action.focusPreviousResourceGroup
// - workbench.scm.action.graph.pickHistoryItemRefs
// - workbench.scm.action.graph.pickRepository
// - workbench.scm.action.graph.refresh
// - workbench.scm.action.graph.revealCurrentHistoryItem
// - workbench.scm.action.graph.viewChanges
// - workbench.scm.action.repositories.setSortKey.discoveryTime
// - workbench.scm.action.repositories.setSortKey.name
// - workbench.scm.action.repositories.setSortKey.path
// - workbench.scm.action.setListViewMode
// - workbench.scm.action.setListViewModeNavigation
// - workbench.scm.action.setSortKey.name
// - workbench.scm.action.setSortKey.path
// - workbench.scm.action.setSortKey.status
// - workbench.scm.action.setTreeViewMode
// - workbench.scm.action.setTreeViewModeNavigation
// - workbench.scm.action.toggleRepositoryVisibility.scm0
// - workbench.scm.action.toggleRepositoryVisibility.scm1
// - workbench.scm.action.toggleRepositoryVisibility.scm10
// - workbench.scm.action.toggleRepositoryVisibility.scm11
// - workbench.scm.action.toggleRepositoryVisibility.scm12
// - workbench.scm.action.toggleRepositoryVisibility.scm13
// - workbench.scm.action.toggleRepositoryVisibility.scm14
// - workbench.scm.action.toggleRepositoryVisibility.scm15
// - workbench.scm.action.toggleRepositoryVisibility.scm16
// - workbench.scm.action.toggleRepositoryVisibility.scm17
// - workbench.scm.action.toggleRepositoryVisibility.scm18
// - workbench.scm.action.toggleRepositoryVisibility.scm19
// - workbench.scm.action.toggleRepositoryVisibility.scm2
// - workbench.scm.action.toggleRepositoryVisibility.scm20
// - workbench.scm.action.toggleRepositoryVisibility.scm21
// - workbench.scm.action.toggleRepositoryVisibility.scm22
// - workbench.scm.action.toggleRepositoryVisibility.scm23
// - workbench.scm.action.toggleRepositoryVisibility.scm24
// - workbench.scm.action.toggleRepositoryVisibility.scm3
// - workbench.scm.action.toggleRepositoryVisibility.scm4
// - workbench.scm.action.toggleRepositoryVisibility.scm5
// - workbench.scm.action.toggleRepositoryVisibility.scm6
// - workbench.scm.action.toggleRepositoryVisibility.scm7
// - workbench.scm.action.toggleRepositoryVisibility.scm8
// - workbench.scm.action.toggleRepositoryVisibility.scm9
// - workbench.scm.focus
// - workbench.scm.history.focus
// - workbench.scm.history.removeView
// - workbench.scm.history.resetViewLocation
// - workbench.scm.history.toggleVisibility
// - workbench.scm.removeView
// - workbench.scm.repositories.focus
// - workbench.scm.repositories.removeView
// - workbench.scm.repositories.resetViewLocation
// - workbench.scm.repositories.toggleVisibility
// - workbench.scm.resetViewLocation
// - workbench.scm.toggleVisibility
// - workbench.trust.configure
// - workbench.trust.manage
// - workbench.userData.actions.openSyncBackupsFolder
// - workbench.userDataSync.actions.downloadSyncActivity
// - workbench.view.debug.resetViewContainerLocation
// - workbench.view.explorer.resetViewContainerLocation
// - workbench.view.extension.42crunch-platform
// - workbench.view.extension.42crunch-platform.resetViewContainerLocation
// - workbench.view.extension.bookmarks
// - workbench.view.extension.bookmarks.resetViewContainerLocation
// - workbench.view.extension.calva
// - workbench.view.extension.calva.resetViewContainerLocation
// - workbench.view.extension.claude-dev-ActivityBar
// - workbench.view.extension.claude-dev-ActivityBar.resetViewContainerLocation
// - workbench.view.extension.clipboard-history
// - workbench.view.extension.clipboard-history.resetViewContainerLocation
// - workbench.view.extension.cursorless
// - workbench.view.extension.cursorless.resetViewContainerLocation
// - workbench.view.extension.favorites-explorer
// - workbench.view.extension.favorites-explorer.resetViewContainerLocation
// - workbench.view.extension.filetree
// - workbench.view.extension.filetree.resetViewContainerLocation
// - workbench.view.extension.foldersCompare
// - workbench.view.extension.foldersCompare.resetViewContainerLocation
// - workbench.view.extension.githd-explorer
// - workbench.view.extension.githd-explorer.resetViewContainerLocation
// - workbench.view.extension.githd-panel
// - workbench.view.extension.githd-panel.resetViewContainerLocation
// - workbench.view.extension.github-pull-request
// - workbench.view.extension.github-pull-request.resetViewContainerLocation
// - workbench.view.extension.github-pull-requests
// - workbench.view.extension.github-pull-requests.resetViewContainerLocation
// - workbench.view.extension.gitlens
// - workbench.view.extension.gitlens.resetViewContainerLocation
// - workbench.view.extension.gitlensInspect
// - workbench.view.extension.gitlensInspect.resetViewContainerLocation
// - workbench.view.extension.gitlensPanel
// - workbench.view.extension.gitlensPanel.resetViewContainerLocation
// - workbench.view.extension.gitlensPatch
// - workbench.view.extension.gitlensPatch.resetViewContainerLocation
// - workbench.view.extension.json-views
// - workbench.view.extension.json-views.resetViewContainerLocation
// - workbench.view.extension.l13Diff.resetViewContainerLocation
// - workbench.view.extension.openapi-explorer
// - workbench.view.extension.openapi-explorer.resetViewContainerLocation
// - workbench.view.extension.project-manager
// - workbench.view.extension.project-manager.resetViewContainerLocation
// - workbench.view.extension.references-view
// - workbench.view.extension.references-view.resetViewContainerLocation
// - workbench.view.extension.terminalKeeperActivitybar
// - workbench.view.extension.terminalKeeperActivitybar.resetViewContainerLocation
// - workbench.view.extension.test
// - workbench.view.extension.test.resetViewContainerLocation
// - workbench.view.extensions.resetViewContainerLocation
// - workbench.view.remote
// - workbench.view.remote.resetViewContainerLocation
// - workbench.view.scm.resetViewContainerLocation
// - workbench.view.search.focus
// - workbench.view.search.removeView
// - workbench.view.search.resetViewContainerLocation
// - workbench.view.search.resetViewLocation
// - workbench.view.search.toggleVisibility
// - workbench.view.testCoverage.focus
// - workbench.view.testCoverage.resetViewLocation
// - workbench.view.testing.focus
// - workbench.view.testing.removeView
// - workbench.view.testing.resetViewLocation
// - workbench.view.testing.toggleVisibility
// - workbench.views.extensions.builtinFeatureExtensions.focus
// - workbench.views.extensions.builtinFeatureExtensions.resetViewLocation
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.focus
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation
// - workbench.views.extensions.builtinThemeExtensions.focus
// - workbench.views.extensions.builtinThemeExtensions.resetViewLocation
// - workbench.views.extensions.deprecatedExtensions.focus
// - workbench.views.extensions.deprecatedExtensions.resetViewLocation
// - workbench.views.extensions.disabled.focus
// - workbench.views.extensions.disabled.resetViewLocation
// - workbench.views.extensions.enabled.focus
// - workbench.views.extensions.enabled.resetViewLocation
// - workbench.views.extensions.installed.focus
// - workbench.views.extensions.installed.resetViewLocation
// - workbench.views.extensions.marketplace.focus
// - workbench.views.extensions.marketplace.resetViewLocation
// - workbench.views.extensions.otherRecommendations.focus
// - workbench.views.extensions.otherRecommendations.resetViewLocation
// - workbench.views.extensions.popular.focus
// - workbench.views.extensions.popular.resetViewLocation
// - workbench.views.extensions.searchBuiltin.focus
// - workbench.views.extensions.searchBuiltin.resetViewLocation
// - workbench.views.extensions.searchDisabled.focus
// - workbench.views.extensions.searchDisabled.resetViewLocation
// - workbench.views.extensions.searchEnabled.focus
// - workbench.views.extensions.searchEnabled.resetViewLocation
// - workbench.views.extensions.searchInstalled.focus
// - workbench.views.extensions.searchInstalled.resetViewLocation
// - workbench.views.extensions.searchOutdated.focus
// - workbench.views.extensions.searchOutdated.resetViewLocation
// - workbench.views.extensions.searchRecentlyUpdated.focus
// - workbench.views.extensions.searchRecentlyUpdated.resetViewLocation
// - workbench.views.extensions.searchWorkspaceUnsupported.focus
// - workbench.views.extensions.searchWorkspaceUnsupported.resetViewLocation
// - workbench.views.extensions.untrustedPartiallySupportedExtensions.focus
// - workbench.views.extensions.untrustedPartiallySupportedExtensions.resetViewLocation
// - workbench.views.extensions.untrustedUnsupportedExtensions.focus
// - workbench.views.extensions.untrustedUnsupportedExtensions.resetViewLocation
// - workbench.views.extensions.virtualPartiallySupportedExtensions.focus
// - workbench.views.extensions.virtualPartiallySupportedExtensions.resetViewLocation
// - workbench.views.extensions.virtualUnsupportedExtensions.focus
// - workbench.views.extensions.virtualUnsupportedExtensions.resetViewLocation
// - workbench.views.extensions.workspaceRecommendations.focus
// - workbench.views.extensions.workspaceRecommendations.resetViewLocation
// - workbench.views.service.auxiliarybar.116fde58-57a3-481e-879a-fec833f3fc79.resetViewContainerLocation
// - workbench.views.service.auxiliarybar.2820bfcc-d109-4adc-82b2-2c8d1d0d45a1.resetViewContainerLocation
// - workbench.views.service.auxiliarybar.42283eb4-30f7-499d-a022-d33c3ac83776.resetViewContainerLocation
// - workbench.views.service.auxiliarybar.bb9e2bfd-203a-4a5a-9a2e-3c0ba7af3550.resetViewContainerLocation
// - workbench.views.service.auxiliarybar.f501cf59-ae4d-4755-b45c-3088a46251ac.resetViewContainerLocation
// - workbench.views.service.sidebar.40338ce6-ae8c-4e4c-993e-d89c1b26b619.resetViewContainerLocation
// - yaml.select.json.schema
// - ~remote.forwardedPorts.focus
// - ~remote.forwardedPorts.removeView
// - ~remote.forwardedPorts.resetViewLocation
// - ~remote.forwardedPorts.toggleVisibility
// - ~remote.forwardedPortsContainer
// - ~remote.forwardedPortsContainer.resetViewContainerLocation